.TH HOSTMOT2 "9" "2008-05-13" "EMC Documentation" "HAL Component"
.de TQ
.br
.ns
.TP \\$1
..
.SH NAME

hostmot2 \- RTAI driver for the Mesa Electronics HostMot2 firmware.
.SH SYNOPSIS

.HP
.B loadrt hostmot2 [debug_idrom=\fIN\fB] [debug_module_descriptors=\fIN\fB] [debug_pin_descriptors=\fIN\fB] [debug_modules=\fIN\fB]
.RS
.TP
\fBdebug_idrom\fR [default: 0]
Developer/debug use only!  Enable debug logging of the HostMot2
IDROM header.
.TP
\fBdebug_module_descriptors\fR [default: 0]
Developer/debug use only!  Enable debug logging of the HostMot2
Module Descriptors.
.TP
\fBdebug_pin_descriptors\fR [default: 0]
Developer/debug use only!  Enable debug logging of the HostMot2
Pin Descriptors.
.TP
\fBdebug_modules\fR [default: 0]
Developer/debug use only!  Enable debug logging of the HostMot2
Modules used.
.RE
.SH DESCRIPTION

hostmot2 is an RTAI device driver that interfaces the Mesa HostMot2
firmware to the EMC2 HAL.  This driver by itself does nothing, the boards
that actually run the firmware require their own drivers before anything
can happen.  Currently drivers are available for the 5i20 (hm2_5i20) and
the 7i43 (hm2_7i43).  Drivers for the other Mesa Electronics Anything
I/O boards are under active development and should be ready sometime
during the summer of 2008.

The HostMot2 firmware provides encoders, PWM generators, step/dir
generators, and general purpose I/O pins (GPIOs).  These things are
called "Modules".  The firmware is configured, at firmware compile time,
to provide zero or more instances of each of these four Modules.
.SH Board I/O Pins

The HostMot2 firmware runs on an FPGA board.  The board interfaces with
the computer via PCI or EPP, and interfaces with motion control hardware
such as servos and stepper motors via I/O pins on the board.

Each I/O pin can be configured, at board-driver load time, to serve
one of two purposes: either as a particular I/O pin of a particular
Module instance (encoder, pwmgen, or stepgen), or as a general purpose
digital I/O pin.  By default all Module instances are enabled, and all
the board's pins are used by the Module instances.

The user can disable Module instances at board-driver load time, by
specifying a hostmot2 config string modparam.  Any pins which belong to
Module instances that have been disabled automatically become GPIOs.

All IO pins have some HAL presence, whether they belong to an active
module instance or are full GPIOs.  GPIOs can be changed (at run-time)
between inputs, normal outputs, and open drains, and have a flexible
HAL interface.  IO pins that belongs to active module instances are
constrained by the requirements of the owning module, and have a more
limited interface in the HAL .  This is described in the General Purpose
I/O section below.
.SH config modparam

The board-driver modules accept a config string modparam at load time.
This config string is passed to and parsed by the hostmot2 driver when
the board-driver registers a HostMot2 instance.  The format of the config
string is:

.B [firmware=\fIF\fB] [num_encoders=\fIN\fB] [num_pwmgens=\fIN\fB] [num_stepgens=\fIN\fB] [enable_raw]
.RS
.TP
\fBfirmware\fR [optional]
Load the firmware specified by F into the FPGA on this board.  If no
"\fBfirmware=\fIF\fR" string is specified, the FPGA will not be
programmed, and had better have a valid configuration already.
.P
.RS
The requested firmware F is fetched by udev.  udev searches for the
firmware in the system's firmware search path, usually /lib/firmware.
F typically has the form "hm2/<BoardType>/file.bit"; a typical value
for F might be "hm2/5i20/SVST8_4.BIT".  If EMC2 is installed by the
Debian package (.deb), then the firmware files are already installed
in /lib/firmware.  If EMC2 is compiled from CVS and configured for
run-in-place, then the user must symlink the hostmot2 firmware into
/lib/firmware manually, by a command like this:
.P
.RS
\fBsudo ln -s $HOME/emc2-sandbox/src/hal/drivers/mesa-hostmot2/firmware
/lib/firmware/hm2\fR
.RE
.RE
.TP
\fBnum_encoders\fR [optional, default: -1]
Only enable the first N encoders.  If N is -1, all encoders are enabled.
If N is 0, no encoders are enabled.  If N is greater than the number of
encoders available in the firmware, the board will fail to register.
.TP
\fBnum_pwmgens\fR [optional, default: -1]
Only enable the first N pwmgens.  If N is -1, all pwmgens are enabled.
If N is 0, no pwmgens are enabled.  If N is greater than the number of
pwmgens available in the firmware, the board will fail to register.
.TP
\fBnum_stepgens\fR [optional, default: -1]
Only enable the first N stepgens.  If N is -1, all stepgens are enabled.
If N is 0, no stepgens are enabled.  If N is greater than the number of
stepgens available in the firmware, the board will fail to register.
.TP
\fBenable_raw\fR [optional]
If specified, this turns on a raw access mode, whereby a user can peek and
poke the firmware from HAL.  See Raw Mode below.
.RE
.SH encoder

Very basic support, more to come.  This is what's implemented so far:

Encoders have names like "hm2_<BoardType>.<BoardNum>.encoder.<Instance>".
Instance is a two-digit number that corresponds to the HostMot2 encoder
instance number.  There are 'num_encoders' instances, starting with 00.

In HM2, each encoder uses three input IO pins: A, B, and Index (sometimes
also known as Z).

Each encoder instance has the following pins and parameters:

Pins:

(s32 out) count: Number of encoder counts since the previous reset.
(Like CDI.)

(float out) position: Encoder position (count / scale).  (Like CDI.)

(bit in) reset: When this pin is TRUE, the count and position pins are
set to 0.  (Like CDI.)

(bit in/out) index-enable: When this pin is set to True, the count and
position are reset to zero on the next Index (Phase-Z) pulse.  At the
same time, index-enable is reset to zero to indicate that the pulse
has occurred.  (Like CDI.)

Parameters:

(float r/w) scale: Converts from 'count' units to 'position' units.
(Like CDI.)

(bit r/w) index_invert: If set to True, the rising edge of the Index
input pin triggers the Index event (if index-enable is True).  If set
to False, the falling edge triggers.

(bit r/w) index_mask: ?? 

(bit r/w) index_mask_invert: ?? 

(bit r/w) counter_mode: Set to False (the default) for Quadrature.
Set to True for Up/Down.

(bit r/w) filter: If set to True (the default), the quadrature counter
needs 15 clocks to register a change on any of the three input lines
(any pulse shorter than this is rejected as noise).  If set to False,
the quadrature counter needs only 3 clocks to register a change.  FIXME:
filter clock rate is not controllable yet, but it will be soon.
.SH pwmgen

pwmgens have names like "hm2_<BoardType>.<BoardNum>.pwmgen.<Instance>".
Instance is a two-digit number that corresponds to the HostMot2 pwmgen
instance number.  There are 'num_pwmgens' instances, starting with 00.

In HM2, each pwmgen uses three output IO pins: Not-Enable, Out0, and
Out1.

The function of the Out0 and Out1 IO pins varies with output-type
parameter (see below).

The pwmgen representation is modeled on the pwmgen software component
as far as possible.  Each pwmgen instance has the following pins and
parameters:

Pins:

(bit input) enable: If true, the pwmgen will set its Not-Enable pin
false and output its PWM and Direction signals.  If 'enable' is false,
pwmgen will set its Not-Enable pin true and not output any signals.

(float input) value: The current pwmgen command value, in arbitrary units.

Parameters:

(float rw) scale: Scaling factor to convert 'value' from arbitrary units
to duty cycle: dc = value / scale.  Duty cycle has an effective range
of -1.0 to +1.0 inclusive.

(s32 rw) output-type: This emulates the output_type load-time argument to
the software pwmgen component.  This parameter may be changed at runtime,
but most of the time you probably want to set it at startup and then leave
it alone.  Accepted values are 1 (PWM on Out0 and Direction on Out1), 2
(Up on Out0 and Down on Out1), 3 (PDM mode, PDM on Out0 and Dir on Out1),
and 4 (Direction on Out0 and PWM on Out1, "for locked antiphase").

In addition to the per-instance HAL Parameters listed above, there are
a couple of HAL Parameters that affect all the pwmgen instances:

(u32 rw) pwm_frequency: This specifies the PWM frequency, in Hz, of all
the pwmgen instances running in the PWM modes (modes 1 and 2).  This is
the frequency of the variable-duty-cycle wave.  Its effective range is
from 1 Hz up to 193 KHz.  Note that the max frequency is determined by the
ClockHigh frequency of the Anything IO board; the 5i20 and 7i43 both have
a 100 MHz clock, resulting in a 193 KHz max PWM frequency.  Other boards
may have different clocks, resulting in different max PWM frequencies.
If the user attempts to set the frequency too high, it will be clipped
to the max supported frequency of the board.  Frequencies below about
5 Hz are not terribly accurate, but above 5 Hz they're pretty close.

(u32 rw) pdm_frequency: This specifies the PDM frequency, in Hz, of
all the pwmgen instances running in PDM mode (mode 3).  This is the
"pulse slot frequency"; the frequency at which the pdm generator in the
AnyIO board chooses whether to emit a pulse or a space.  Each pulse (and
space) in the PDM pulse train has a duration of 1/pdm_frequency seconds.
For example, setting the pdm_frequency to 2e6 (2 MHz) and the duty cycle
to 50% results in a 1 MHz square wave, identical to a 1 MHz PWM signal
with 50% duty cycle.  The effective range of this parameter is from
about 1525 Hz up to just under 100 MHz.  Note that the max frequency
is determined by the ClockHigh frequency of the Anything IO board; the
5i20 and 7i43 both have a 100 MHz clock, resulting in a 100 Mhz max PDM
frequency.  Other boards may have different clocks, resulting in different
max PDM frequencies.  If the user attempts to set the frequency too high,
it will be clipped to the max supported frequency of the board.
.SH stepgen

Very basic support.  This is what's implemented so far:

stepgens have names like "hm2_<BoardType>.<BoardNum>.stepgen.<Instance>.
Instance is a two-digit number that corresponds to the HostMot2 stepgen
instance number.  There are 'num_stepgens' instances, starting with 00.

Currently only Step/Dir output and Position-mode control is supported.

Each stepgen allocates 6 IO pins, but only uses two: Step and Direction
outputs.  This will be fixed in the future.

The stepgen representation is modeled on the stepgen software component.
Each stepgen instance has the following pins and parameters:

Pins:

(float input) position_cmd: Target of stepper motion, in arbitrary
position units.

(s32 output) counts: Feedback position in counts (number of steps).

(float output) position-fb: Feedback position in arbitrary position units
(counts / position_scale).

(float output) velocity-fb: Feedback velocity in arbitrary position
units per second.

(float output) velocity-cmd: Commanded velocity in arbitrary position
units per second.

(bit input) enable: Enables output steps.  When false, no steps are
generated.

Parameters:

(float r/w) position_scale: Converts from counts to position units.
position = counts / position_scale

(float r/w) maxvel: Maximum speed, in position units per second.  If set
to 0, the driver will choose the maximum velocity based on the values of
steplen and stepspace (at the time that maxvel was set to 0).

(float r/w) maxaccel: Maximum acceleration, in position units per second
per second.  If set to 0, the driver will not limit its acceleration.

(u32 r/w) steplen: Duration of the step signal, in nanoseconds.

(u32 r/w) stepspace: Minimum interval between step signals, in
nanoseconds.

(u32 r/w) dirsetup: Minimum duration of stable Direction signal before
a step begins, in nanoseconds.

(u32 r/w) dirhold: Minimum duration of stable Direction signal after a
step ends, in nanoseconds.
.SH General Purpose I/O

I/O pins on the board which are not used by a module instance are exported
to HAL as full GPIO pins.  Full GPIO pins can be configured at run-time
to be inputs, outputs, or open drains, and have a HAL interface that
exposes this flexibility.  IO pins that are owned by an active module
instance are constrained by the requirements of the owning module,
and have a restricted HAL interface.

GPIOs have names like
"hm2_<BoardType>.<BoardNum>.gpio.<PortName>.<PinNum>".  PinNum is a
three-digit number.  PortName and PinNum correspond to the I/O Pin info
as given in Mesa Electronics' manual for the board.

Each GPIO can have the following HAL Pins:

(bit out) in & in_not: State (normal and inverted) of the hardware
input pin.  This follows the Canonical Device Interface for Digital Input.
Only full GPIO pins and IO pins used as inputs by active module instances
have these pins.

(bit in) out: Value to be written (possibly inverted) to the hardware
output pin.  This follows the Canonical Device Interface for Digital
Output.  Only full GPIO pins have this pin.

Each GPIO can have the following Parameters:

(bit r/w) is_output: If set to 0, the GPIO is an input.  The IO pin is
put in a high-impedance state (pulled up to 5V), to be driven by other
devices.  The logic value on the IO pin is available in the "in" and
"in_not" HAL pins.  Writes to the "out" HAL pin have no effect.  If this
parameter is set to 1, the GPIO is an output; its behavior then depends
on the "is_opendrain" parameter.  Only full GPIO pins have this parameter.

(bit r/w) is_opendrain: This parameter only has an effect if the
"is_output" parameter is true.  If this parameter is false, the GPIO
behaves as a normal output pin: the IO pin on the connector is driven
to the value specified by the "out" HAL pin (possibly inverted), and the
value of the "in" and "in_not" HAL pins is undefined.  If this parameter
is true, the GPIO behaves as an open-drain pin.  Writing 0 to the "out"
HAL pin drives the IO pin low, writing 1 to the "out" HAL pin puts the
IO pin in a high-impedance state.  In this high-impedance state the IO
pin floats (pulled up to 5V), and other devices can drive the value; the
resulting value on the IO pin is available on the "in" and "in_not" pins.
Only full GPIO pins and IO pins used as outputs by active module instances
have this parameter.

(bit r/w) invert_output: This parameter only has an effect if the
"is_output" parameter is true.  If this parameter is true, the output
value of the GPIO will be the inverse of the value on the "out" HAL pin.
This corresponds to the 'invert' parameter in the Canonical Device
Interface for Digital Output.  Only full GPIO pins and IO pins used as
outputs by active module instances have this parameter.
.SH Watchdog

The HostMot2 firmware may include a watchdog Module; if it does,
the hostmot2 driver will use it.  The watchdog must be petted by EMC2
periodically or it will bite.  When the watchdog bites, all the board's
I/O pins are disconnected from their Module instances and become
high-impedance inputs (pulled high), and all communication with the
board stops.  Resetting the watchdog resumes communication and resets
the I/O pins to the configuration chosen at load-time.

If the firmware includes a watchdog, the following HAL objects will
be exported:

Pins:

(bit in/out) has_bit: True if the watchdog has bit, False if the watchdog has
not bit.  If the watchdog has bit and the has_bit bit is True, the user
can reset it to False to resume operation.

Parameters:

(u32 read/write) timeout_ns: Watchdog timeout, in nanoseconds.  This is initialized
to 1,000,000,000 (1 second) at module load time.  If more than this
amount of time passes between calls to the pet_watchdog() function,
the watchdog will bite.

Functions:

pet_watchdog(): Calling this function resets the watchdog timer and
postpones the watchdog biting until timeout_ns nanoseconds later.
.SH Raw Mode

If the "enable_raw" config keyword is specified, some extra debugging
options are made available to HAL.  With Raw mode enabled, a user may
peek and poke the firmware from HAL, and may dump the internal state of
the hostmot2 driver to the syslog.

Pins:

(u32 in) read_address: The bottom 16 bits of this is used as the address
to read from.

(u32 out) read_data: Each time the hm2_read() function is called, this
pin is updated with the value at .read_address.

(u32 in) write_address: The bottom 16 bits of this is used as the address
to write to.

(u32 in) write_data: This is the value to write to .write_address.

(bit in) write_strobe: Each time the hm2_write() function is called, this
pin is examined.  If it is True, then value in .write_data is written
to the address in .write_address, and .write_strobe is set back to False.

(bit in/out) dump_state: This pin is normally False.  If it gets set to
True the hostmot2 driver will write its representation of the board's
internal state to the syslog, and set the pin back to False.
.SH FUNCTIONS
.TP
\fBhm2_<BoardType>.<BoardNum>.read\fR
Read all inputs, update input HAL pins.
.TP
\fBhm2_<BoardType>.<BoardNum>.write\fR
Write all outputs.
.TP
\fBhm2_<BoardType>.<BoardNum>.pet-watchdog\fR
Pet the watchdog to keep it from biting us for a while.
.TP
\fBhm2_<BoardType>.<BoardNum>.read_gpio\fR
Read the GPIO input pins. (This function is not available on the 7i43
due to limitations of the EPP bus.)
.TP
\fBhm2_<BoardType>.<BoardNum>.write_gpio\fR
Write the GPIO control registers and output pins.  (This function is
not available on the 7i43 due to limitations of the EPP bus.)
.SH SEE ALSO

hm2_7i43(9)
.br
hm2_5i20(9)
.br
Mesa's documentation for the Anything I/O boards, at <http://www.mesanet.com>
.br
.SH LICENSE

GPL
