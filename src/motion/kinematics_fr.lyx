#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language french
\inputencoding default
\fontscheme bookman
\graphics default
\float_placement !!h
\paperfontsize 10
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 5
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language french
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

La cinématique dans EMC2
\layout Section

Introduction
\layout Standard

Habituellement quand nous parlons de machines 
\begin_inset LatexCommand \index{Machines CNC}

\end_inset 

CNC, nous pensons à des machines programmées pour effectuer certains mouvements
 et effectuer diverses tâches.
 Pour avoir une représentation unifiée dans l'espace de ces machines, nous
 la faisons correspondre à la vision humaine de l'espace en 3D, la plupart
 des machines (sinon toutes) utilisent un système de coordonnées courant,
 le système Cartésien.
\layout Standard

Le système de coordonnées Cartésiennes est composé de 3 axes (X, Y, Z) chacun
 perpendiculaire aux 2 autres.
 
\begin_inset Foot
collapsed true

\layout Standard

Le mot 
\begin_inset Quotes eld
\end_inset 

axes
\begin_inset Quotes erd
\end_inset 

 est aussi communément (et incorrectement) utilisé à propos des machines
 CNC, il fait référence aux directions des mouvements de la machine.
\end_inset 


\layout Standard

Quand nous parlons d'un programme G-code (RS274NGC) nous parlons d'un certain
 nombre de commandes (G0, G1, etc.) qui ont comme paramètres (X- Y- Z-).
 Ces positions se référent exactement à des positions Cartésiennes.
 Une partie du contrôleur de mouvements d'EMC2 est responsable de la translation
 entre ces positions et les positions correspondantes de la cinématique
 
\begin_inset LatexCommand \index{cinematique}

\end_inset 

 de la machine
\begin_inset Foot
collapsed true

\layout Standard

Cinématique: une fonction à deux voies pour transformer un espace Cartésien
 en espace à jointures
\end_inset 

.
\layout Subsection

Les jointures (articulations) par rapport aux axes
\layout Standard

Une jointure, pour une machine CNC est un des degrés physiques de liberté
 de la machine.
 Elle peut être linéaire (vis à billes) ou rotative (table tournante, jointures
 d'un bras robotisé).
 Il peut y avoir n'importe quel nombre de jointures sur une machine.
 Par exemple, un robot classique dispose de 6 jointures et une fraiseuse
 classique n'en a que 3.
\layout Standard

Sur certaines machines, les jointures sont placées de manière à correspondre
 aux axes cinématiques (jointure 0 le long de l'axe X, jointure 1 le long
 de l'axe Y et jointure 2 le long de l'axe Z), ces machines sont appelées
 machines Cartésiennes 
\begin_inset LatexCommand \index{Machines Cartesiennes}

\end_inset 

 (ou encore machines à cinématiques triviales 
\begin_inset LatexCommand \index{Cinematique triviale}

\end_inset 

).
 Ce sont les machines les plus courantes parmi les machines-outils mais
 elles ne sont pas courantes dans d'autres domaines comme les machines de
 soudage (ex: robots de soudage de type puma).
\layout Section

Cinématiques triviales
\layout Standard

Comme nous l'avons vu, il y a un groupe de machines sur lesquelles chacun
 des axes est placé le long d'un des axes Cartésiens.
 Sur ces machines le passage, du plan de l'espace Cartésien (le programme
 G-code) au plan de l'espace jointure (l'actuateur actuel de la machine),
 est trivial.
 C'est un simple plan 1:1:
\layout LyX-Code

pos->tran.x = joints[0];
\newline 
pos->tran.y = joints[1];
\newline 
pos->tran.z = joints[2];
\newline 
pos->a = joints[3];
\newline 
pos->b = joints[4];
\newline 
pos->c = joints[5];
\layout LyX-Code

\layout Standard

Dans l'extrait de code ci-dessus, nous pouvons voir comment le plan est
 fait: la position X est identique avec la jointure 0, Y avec la jointure
 1 etc.
 Nous nous référons dans ce cas à une cinématique directe (une transformation
 avant), tandis que dans l'extrait de code suivant il est fait référence
 à une cinématique inverse (ou une transformation inverse):
\layout LyX-Code

joints[0] = pos->tran.x;
\newline 
joints[1] = pos->tran.y;
\newline 
joints[2] = pos->tran.z;
\newline 
joints[3] = pos->a;
\newline 
joints[4] = pos->b;
\newline 
joints[5] = pos->c;
\layout Standard

Comme on peut le voir, c'est assez simple de faire la transformation d'une
 machine à cinématique banale (ou Cartésienne).
 Cela devient un peu plus compliqué si il manque un axe à la machine.
\begin_inset Foot
collapsed true

\layout Standard

Si la machine (par exemple un tour) est montée avec seulement les axes X,
 Z et A et que le fichier d'init d'EMC2 contient uniquement la définition
 de ces 3 jointures, alors l'assertion précédente est fausse.
 Parce-que nous avons actuellement (joint0=x, joint1=Z, joint2=A) ce qui
 suppose que joint1=Y.
 Pour faire en sorte que cela fonctionne dans EMC2 il suffit de définir
 tous les axes (XYZA), EMC2 utilisera alors une simple boucle dans HAL pour
 l'axe Y inutilisé.
\end_inset 


\begin_inset Foot
collapsed true

\layout Standard

Une autre façon de le faire fonctionner, est de changer le code correspondant
 et recompiler le logiciel.
\end_inset 


\layout Section

Cinématiques non triviales
\layout Standard

Il peut y avoir un certain nombre de types de configurations de machine
 (robots: puma, scara; hexapodes etc.) Chacun d'eux est mis en place en utilisant
 des jointures linéaires et rotatives.
 Ces jointures ne correspondent pas habituellement avec les coordonnées
 Cartésiennes, cela nécessite une fonction cinématique qui fasse la conversion
 (en fait 2 fonctions: fonction en  avant et inverse de la cinématique).
\layout Standard

Pour illustrer ce qui précède, nous analyserons une simple cinématique appelée
 bipode (une version simplifiée du tripode, qui est déjà une version simplifiée
 de l'hexapode).
 
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption

Définir un bipode
\begin_inset LatexCommand \label{cap:Bipod-setup}

\end_inset 


\layout Standard


\begin_inset Graphics
	filename bipod.png
	scale 80

\end_inset 


\end_inset 


\layout Standard

Le bipode dont nous parlons est un appareil, composé de deux moteurs placés
 sur un mur, à cet appareil un mobile est suspendu par des fils.
 Les jointures dans ce cas sont les distances entre le mobile et les moteurs
 de l'appareil (nommées AD et BD sur la figure 
\begin_inset LatexCommand \ref{cap:Bipod-setup}

\end_inset 

).
\layout Standard

La position des moteurs est fixée par convention.
 Le moteur A est en (0,0), qui signifie que sa coordonnée X est 0 et sa
 coordonnée Y également 0.
 Le moteur B est placé en (Bx, 0), se qui veut dire que sa coordonnée X
 est Bx.
\layout Standard

Notre pointe mobile se trouvera au point D défini par les distances AD et
 BD, et par les coordonnées Cartésiennes Dx, Dy.
\layout Standard

La tâche de la cinématique consistera à transformer les longueurs des jointures
 en (AD, BD) en coordonnées Cartésiennes (Dx, Dy) et vice-versa.
\layout Subsection

Transformation avant
\begin_inset LatexCommand \label{sub:Forward-transformation}

\end_inset 


\layout Standard

Pour effectuer la transformation de l'espace jointure en espace Cartésien
 nous allons utiliser quelques règles de trigonomètrie (le triangle rectangle
 déterminé par les points (0,0), (Dx,0), (Dx,Dy) et le triangle rectangle
 (Dx,0), (Bx,0) et (Dx,Dy).
\layout Standard

Nous pouvons voir aisément que 
\begin_inset Formula $AD^{2}=x^{2}+y^{2}$
\end_inset 

, de même que 
\begin_inset Formula $BD^{2}=(Bx-x)^{2}+y^{2}$
\end_inset 

.
\layout Standard

Si nous soustrayons l'un de l'autre nous aurons:
\layout Standard


\begin_inset Formula \[
AD^{2}-BD^{2}=x^{2}+y^{2}-x^{2}+2*x*Bx-Bx^{2}-y^{2}\]

\end_inset 


\layout Standard

et par conséquent:
\layout Standard


\begin_inset Formula \[
x=\frac{AD^{2}-BD^{2}+Bx^{2}}{2*Bx}\]

\end_inset 


\layout Standard

De là nous calculons:
\layout Standard


\begin_inset Formula \[
y=\sqrt{AD^{2}-x^{2}}\]

\end_inset 


\layout Standard

Noter que le calcul inclus la racine carrée de la différence, mais qu'il
 n'en résulte pas un nombre réel.
 Si il n'y a aucune coordonnées Cartésienne pour la position de cette jointure,
 alors la position est dite singulière.
 Dans ce cas, la cinématique inverse retourne -1.
\layout Standard

Traduction en code:
\layout LyX-Code

double AD2 = joints[0] * joints[0];
\newline 
double BD2 = joints[1] * joints[1];
\newline 
double x = (AD2 - BD2 + Bx * Bx) / (2 * Bx);
\newline 
double y2 = AD2 - x * x;
\newline 
if(y2 < 0) return -1;
\newline 
pos->tran.x = x;
\newline 
pos->tran.y = sqrt(y2);
\layout LyX-Code

return 0;
\layout LyX-Code

\layout Subsection

Transformation inverse
\begin_inset LatexCommand \label{sub:Inverse-transformation}

\end_inset 


\layout Standard

La cinématique inverse est beaucoup plus simple dans notre exemple, de sorte
 que nous pouvons l'écrire directement:
\layout Standard


\begin_inset Formula \[
AD=\sqrt{x^{2}+y^{2}}\]

\end_inset 


\layout Standard


\begin_inset Formula \[
BD=\sqrt{(Bx-x)^{2}+y^{2}}\]

\end_inset 


\layout Standard

ou traduite en code:
\layout LyX-Code

double x2 = pos->tran.x * pos->tran.x;
\newline 
double y2 = pos->tran.y * pos->tran.y;
\newline 
joints[0] = sqrt(x2 + y2);
\newline 
joints[1] = sqrt((Bx - pos->tran.x)*(Bx - pos->tran.x) + y2);
\newline 
return 0;
\layout Section

Détails d'implémentation
\layout Standard

Un module cinématique est implémenté comme un composant de HAL, et il est
 permis d'exporter ses pins et ses paramètres.
 Il consiste en quelques fonctions 
\begin_inset Quotes eld
\end_inset 

C
\begin_inset Quotes erd
\end_inset 

 (par opposition au fonctions de HAL):
\layout Itemize


\family typewriter 
int kinematicsForward(const double *joint, EmcPose *world, const KINEMATICS_FORW
ARD_FLAGS *fflags, KINEMATICS_INVERSE_FLAGS *iflags)
\begin_deeper 
\layout Standard

Implémente la fonction cinématique avant, comme décrite dans la section
 
\begin_inset LatexCommand \ref{sub:Forward-transformation}

\end_inset 

.
\end_deeper 
\layout Itemize


\family typewriter 
int kinematicsInverse(const EmcPose * world, double *joints, const KINEMATICS_IN
VERSE_FLAGS *iflags, KINEMATICS_FORWARD_FLAGS *fflags)
\begin_deeper 
\layout Standard

Implémente la fonction cinématique inverse, comme décrite dans la section
 
\begin_inset LatexCommand \ref{sub:Inverse-transformation}

\end_inset 

.
\end_deeper 
\layout Itemize


\family typewriter 
KINEMATICS_TYPE kinematicsType(void)
\begin_deeper 
\layout Standard

Retourne l'identificateur de type de la cinématique, typiquement 
\family typewriter 
KINEMATICS_BOTH
\family default 
.
\end_deeper 
\layout Itemize


\family typewriter 
int kinematicsHome(EmcPose *world, double *joint, KINEMATICS_FORWARD_FLAGS
 *fflags, KINEMATICS_INVERSE_FLAGS *iflags)
\begin_deeper 
\layout Standard

La fonction prise d'origine de la cinématique ajuste tous ses arguments
 à leur propre valeur à une position d'origine connue.
 Quand elle est appelée, cette position doit être ajustée, quand elle est
 connue, comme valeurs initiales, par exemple depuis un fichier INI.
 Si la prise d'origine de la cinématique peut accepter des points de départ
 arbitraires, ces valeurs initiales doivent être utilisées.
 
\end_deeper 
\layout Itemize


\family typewriter 
int rtapi_app_main(void)
\layout Itemize


\family typewriter 
void rtapi_app_exit(void)
\begin_deeper 
\layout Standard

Il s'agit des fonctions standards d'installation et de la désinstallation
 des modules RTAPI.
\end_deeper 
\layout Standard

Quand ils sont contenus dans un seul fichier source, les modules de la cinématiq
ue peuvent être compilés et installé par 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

comp
\family default 

\begin_inset Quotes frd
\end_inset 

.
 Voir la manpage 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

comp(1)
\begin_inset Quotes frd
\end_inset 


\family default 
 pour d'autres informations.
\the_end
