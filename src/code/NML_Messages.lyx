#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize letterpaper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

NML Messages
\layout Section

EMC OPERATOR
\layout Subsection

EMC_OPERATOR_ERROR_TYPE
\layout Standard

Description, NML Type: textual error message to the operator, 11
\layout Standard

Written From: emccanon.cc, iosh.cc
\layout Standard

Read To: emctaskmain.cc, emcsh.cc
\layout Standard

Parameter, Type: [error, char[LINELEN]] 
\layout Subsection

EMC_OPERATOR_TEXT_TYPE
\layout Standard

Description, NML Type: textual information message to the operator, 12
\layout Standard

Written From: emctaskmain.cc
\layout Standard

Read To: emctaskmain.cc, emcsh.cc
\layout Standard

Parameter, Type: [text, char[LINELEN]] 
\layout Subsection

EMC_OPERATOR_DISPLAY_TYPE
\layout Standard

Description, NML Type: URL or filename of a document to display, 13
\layout Standard

Obs: not used, only read
\layout Standard

Written From: none
\layout Standard

Read To: emctaskmain.cc, emcsh.cc
\layout Standard

Parameter, Type: [display, char[LINELEN]] 
\layout Section

EMC NULL, SET, DEBUG, & SYSTEM
\layout Subsection

EMC_NULL_TYPE
\layout Standard

Description, NML Type: used to reset serial number to original, 21
\layout Standard

Written From: thisQuit (emcsh.cc)
\layout Standard

Read To: emctaskmain.cc
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_SET_DEBUG_TYPE
\layout Standard

Description, NML Type: sets debug level, 22
\layout Standard

Written From: emcIoSetDebug (iotaskintf.cc), sendDebug (emcsh.cc)
\layout Standard

Read To: emctaskmain.cc, ioControl.cc
\layout Standard

Parameter, Type: [debug, int] 
\layout Subsection

EMC_SYSTEM_CMD_TYPE
\layout Standard

Description, NML Type: execute a system command, 30
\layout Standard

Written From: user_defined_add_m_code (emctask.cc)
\layout Standard

Read To: emcSystemCmd (emctaskmain.cc)
\layout Standard

Parameter, Type: [string, char[LINELEN]] 
\layout Section

EMC AXIS
\layout Subsection

EMC_AXIS_SET_AXIS_TYPE
\layout Standard

Description, NML Type: axis type to linear or angular, 101
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [axisType, unsigned char]
 
\layout Subsection

EMC_AXIS_SET_UNITS_TYPE
\layout Standard

Description, NML Type: units conversion factor, 102
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [units, double] 
\layout Subsection

EMC_AXIS_SET_GAINS_TYPE
\layout Standard

Description, NML Type: Set the PID gains, 103
\layout Standard

Obs: currently not used in emc2, needs to go to HAL
\layout Standard

Written From: none
\layout Standard

Read To: emctaskmain.cc
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [p, double] [i, double]
 [d, double] [ff0, double] [ff1, double] [ff2, double] [backlash, double]
 [bias, double] [maxError, double] 
\layout Subsection

EMC_AXIS_SET_CYCLE_TIME_TYPE
\layout Standard

Description, NML Type: cycle time for the servo task, 104
\layout Standard

Written From: none
\layout Standard

Read To: emctaskmain.cc
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [cycleTime, double] 
\layout Subsection

EMC_AXIS_SET_INPUT_SCALE_TYPE
\layout Standard

Description, NML Type: scale factor and offset for the position input, 105
\layout Standard

Obs: currently if 0'ed, used only directly from iniaxis
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisSetInputScale
 (minimill|bridgeporttaskintf.cc) which sends EMCMOT_SET_INPUT_SCALE
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [scale, double] [offset,
 double] 
\layout Subsection

EMC_AXIS_SET_OUTPUT_SCALE_TYPE
\layout Standard

Description, NML Type: scale factor and offset for the position output,
 106
\layout Standard

Obs: currently if 0'ed, used only directly from iniaxis
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc)
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [scale, double] [offset,
 double] 
\layout Subsection

EMC_AXIS_SET_MIN_POSITION_LIMIT_TYPE
\layout Standard

Description, NML Type: sets min limit, 107
\layout Standard

Obs: also handled by iniaxis which directly calls emcAxisSetMinPositionLimit
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisSetMinPositionLimit
 (taskintf.cc) which sends EMCMOT_SET_POSITION_LIMITS
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [limit, double] 
\layout Subsection

EMC_AXIS_SET_MAX_POSITION_LIMIT_TYPE
\layout Standard

Description, NML Type: sets max limit, 108
\layout Standard

Obs: also handled by iniaxis which directly calls emcAxisSetMaxPositionLimit
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisSetMaxPositionLimit
 (taskintf.cc) which sends EMCMOT_SET_POSITION_LIMITS
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [limit, double] 
\layout Subsection

EMC_AXIS_SET_MIN_OUTPUT_LIMIT_TYPE
\layout Standard

Description, NML Type: -, 109
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [limit, double] 
\layout Subsection

EMC_AXIS_SET_MAX_OUTPUT_LIMIT_TYPE
\layout Standard

Description, NML Type: -, 110
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [limit, double] 
\layout Subsection

EMC_AXIS_SET_FERROR_TYPE
\layout Standard

Description, NML Type: sets max following error, 111
\layout Standard

Obs: also handled by iniaxis which directly calls emcAxisSetFerror
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisSetFerror (taskintf.cc)
 which sends EMCMOT_SET_MAX_FERROR
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [ferror, double] 
\layout Subsection

EMC_AXIS_SET_HOMING_VEL_TYPE
\layout Standard

Description, NML Type: -, 112
\layout Standard

Obs: in EMC2 those are SET_HOMING_PARAMS double home, double offset, double
 search_vel, double latch_vel, int use_index, int ignore_limits,
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [ferror, double] 
\layout Subsection

EMC_AXIS_SET_HOME_TYPE
\layout Standard

Description, NML Type: -, 113
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [homingVel, double] 
\layout Subsection

EMC_AXIS_SET_HOME_OFFSET_TYPE
\layout Standard

Description, NML Type: -, 114
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [home, double] 
\layout Subsection

EMC_AXIS_SET_MIN_FERROR_TYPE
\layout Standard

Description, NML Type: sets min following error, 115
\layout Standard

Obs: also handled by iniaxis which directly calls emcAxisSetMinFerror
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisSetMinFerror (taskintf.
cc) which sends EMCMOT_SET_MIN_FERROR
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [offset, double] 
\layout Subsection

EMC_AXIS_SET_MAX_VELOCITY_TYPE
\layout Standard

Description, NML Type: sets max.
 velocity, 116
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [vel, double] 
\layout Subsection

EMC_AXIS_INIT_TYPE
\layout Standard

Description, NML Type: -, 118
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] 
\layout Subsection

EMC_AXIS_HALT_TYPE
\layout Standard

Description, NML Type: -, 119
\layout Standard

Obs: not used, only read
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisHalt (taskintf.cc)
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] 
\layout Subsection

EMC_AXIS_ABORT_TYPE
\layout Standard

Description, NML Type: aborts motion on an axis (e.g.
 GUI jogs), 120
\layout Standard

Obs: used from the GUI when stopping a manual jog
\layout Standard

Written From: sendJogStop (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisAbort (taskintf.cc)
 which sends EMCMOT_AXIS_ABORT
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] 
\layout Subsection

EMC_AXIS_ENABLE_TYPE
\layout Standard

Description, NML Type: enables axis, 121
\layout Standard

Obs: not used from tkemc & mini
\layout Standard

Written From: sendAxisEnable (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisEnable (taskintf.cc)
 which sends EMCMOT_ENABLE_AMPLIFIER
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] 
\layout Subsection

EMC_AXIS_DISABLE_TYPE
\layout Standard

Description, NML Type: disable axis, 122
\layout Standard

Obs: not used from tkemc & mini
\layout Standard

Written From: sendAxisDisable (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisDisable (taskintf.cc)
 which sends EMCMOT_DISABLE_AMPLIFIER
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] 
\layout Subsection

EMC_AXIS_HOME_TYPE
\layout Standard

Description, NML Type: home an axis at current position, 123
\layout Standard

Obs: used from tkemc & mini through emc_home
\layout Standard

Written From: sendHome (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisHome (taskintf.cc)
 which sends EMCMOT_HOME
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] 
\layout Subsection

EMC_AXIS_JOG_TYPE
\layout Standard

Description, NML Type: jogs an axis continuosly, 124
\layout Standard

Obs: used on jogging
\layout Standard

Written From: sendJogCont (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisJog (taskintf.cc)
 which sends EMCMOT_JOG_CONT
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [vel, double] 
\layout Subsection

EMC_AXIS_INCR_JOG_TYPE
\layout Standard

Description, NML Type: jogs an axis with an increment, 125
\layout Standard

Obs: used on jogging
\layout Standard

Written From: sendJogIncr (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisIncrJog (taskintf.cc)
 which sends EMCMOT_JOG_INCR
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [incr, double] [vel,
 double] 
\layout Subsection

EMC_AXIS_ABS_JOG_TYPE
\layout Standard

Description, NML Type: jogs an axis with an absolute value, 126
\layout Standard

Obs: not used, only read
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisAbsJog (taskintf.cc)
 which sends EMCMOT_JOG_ABS
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [pos, double] [vel, double]
 
\layout Subsection

EMC_AXIS_ACTIVATE_TYPE
\layout Standard

Description, NML Type: -, 127
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] 
\layout Subsection

EMC_AXIS_DEACTIVATE_TYPE
\layout Standard

Description, NML Type: -, 128
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] 
\layout Subsection

EMC_AXIS_OVERRIDE_LIMITS_TYPE
\layout Standard

Description, NML Type: overrides min/max limits during homing, 129
\layout Standard

Obs: used from tkemc & mini through emc_override_limit
\layout Standard

Written From: sendOverrideLimits (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisOverrideLimits
 (taskintf.cc) which sends EMCMOT_OVERRIDE_LIMITS
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] 
\layout Subsection

EMC_AXIS_SET_OUTPUT_TYPE
\layout Standard

Description, NML Type: sets an DAC output value, 130
\layout Standard

Obs: currently not used in emc2, needs to go to HAL
\layout Standard

Written From: sendAxisSetOutput (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisSetOutput (taskintf.cc)
 which sends EMCMOT_DAC_OUT
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [output, double] 
\layout Subsection

EMC_AXIS_LOAD_COMP_TYPE
\layout Standard

Description, NML Type: loads compensation values from a file, 131
\layout Standard

Obs: currently usrmotLoadComp if 0'ed in emc2
\layout Standard

Written From: sendAxisLoadComp (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisLoadComp (minimill|bri
dgeporttaskintf.cc) which calls usrmotLoadComp
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [file, char[LINELEN]]
 
\layout Subsection

EMC_AXIS_ALTER_TYPE
\layout Standard

Description, NML Type: loads the alter value to modify the axis position,
 132
\layout Standard

Written From: sendAxisAlter (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisAlter (taskintf.cc)
 which calls usrmotAlter
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [alter, double] 
\layout Subsection

EMC_AXIS_SET_STEP_PARAMS_TYPE
\layout Standard

Description, NML Type: was used to set step related params, 133
\layout Standard

Obs: currently not used in emc2, needs to go to HAL (maybe directly from
 the ini, not through NML)
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcAxisSetStepParams
 (taskintf.cc) which sends EMCMOT_SET_STEP_PARAMS
\layout Standard

Parameter, Type: [axis (in EMC_AXIS_CMD_MSG), int] [setup_time, double]
 [hold_time, double] 
\layout Subsection

EMC_AXIS_STAT_TYPE
\layout Standard

Description, NML Type: status for axis, not sent as a message but used as
 is, 199
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [a HUGE load of params]
\layout Section

EMC TRAJ
\layout Subsection

EMC_TRAJ_SET_AXES_TYPE
\layout Standard

Description, NML Type: -, 201
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [axes, int] 
\layout Subsection

EMC_TRAJ_SET_UNITS_TYPE
\layout Standard

Description, NML Type: -, 202
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [linearUnits, double] [angularUnits, double] 
\layout Subsection

EMC_TRAJ_SET_CYCLE_TIME_TYPE
\layout Standard

Description, NML Type: -, 203
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [cycleTime, double] 
\layout Subsection

EMC_TRAJ_SET_MODE_TYPE
\layout Standard

Description, NML Type: -, 204
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [mode, enum EMC_TRAJ_MODE_ENUM] 
\layout Subsection

EMC_TRAJ_SET_VELOCITY_TYPE
\layout Standard

Description, NML Type: sends a request to set the vel, which is in internal
 units/sec, 205
\layout Standard

Written From: sendVelMsg (emccanon.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajSetVelocity (minimill
 | bridgeporttaskintf.cc) which sends EMCMOT_SET_VEL
\layout Standard

Parameter, Type: [velocity, double] 
\layout Subsection

EMC_TRAJ_SET_ACCELERATION_TYPE
\layout Standard

Description, NML Type: -, 206
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [acceleration, double] 
\layout Subsection

EMC_TRAJ_SET_MAX_VELOCITY_TYPE
\layout Standard

Description, NML Type: -, 207
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [velocity, double] 
\layout Subsection

EMC_TRAJ_SET_MAX_ACCELERATION_TYPE
\layout Standard

Description, NML Type: -, 208
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [acceleration, double] 
\layout Subsection

EMC_TRAJ_SET_SCALE_TYPE
\layout Standard

Description, NML Type: set the feed override to be the percent value, 209
\layout Standard

Obs: used for feed override messages
\layout Standard

Written From: sendFeedOverride (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajSetScale (taskintf.cc)
 which sends EMCMOT_SCALE
\layout Standard

Parameter, Type: [scale, double] 
\layout Subsection

EMC_TRAJ_SET_MOTION_ID_TYPE
\layout Standard

Description, NML Type: -, 210
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [id, int] 
\layout Subsection

EMC_TRAJ_INIT_TYPE
\layout Standard

Description, NML Type: -, 211
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TRAJ_HALT_TYPE
\layout Standard

Description, NML Type: -, 212
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TRAJ_ENABLE_TYPE
\layout Standard

Description, NML Type: -, 213
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TRAJ_DISABLE_TYPE
\layout Standard

Description, NML Type: -, 214
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TRAJ_ABORT_TYPE
\layout Standard

Description, NML Type: causes traj to abort ?, 215
\layout Standard

Obs: not used, only read
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajAbort (taskintf.cc)
 which sends EMCMOT_ABORT
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TRAJ_PAUSE_TYPE
\layout Standard

Description, NML Type: causes traj to pause ?, 216
\layout Standard

Obs: not used, only read
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajPause (minimill
 | bridgeporttaskintf.cc) which sends EMCMOT_PAUSE
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TRAJ_STEP_TYPE
\layout Standard

Description, NML Type: -, 217
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TRAJ_RESUME_TYPE
\layout Standard

Description, NML Type: causes traj to resume ?, 218
\layout Standard

Obs: not used, only read
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajResume (minimill
 | bridgeporttaskintf.cc) which sends EMCMOT_RESUME
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TRAJ_DELAY_TYPE
\layout Standard

Description, NML Type: sets a delay in the task execution, 219
\layout Standard

Obs: used with dwelling
\layout Standard

Written From: DWELL (emccanon.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc)
\layout Standard

Parameter, Type: [delay, double] 
\layout Subsection

EMC_TRAJ_LINEAR_MOVE_TYPE
\layout Standard

Description, NML Type: sends a linear move from the interp to motion, 220
\layout Standard

Obs: used
\layout Standard

Written From: STRAIGHT_TRAVERSE, ARC_FEED (emccanon.cc)
\layout Standard

Read To: checkInterpList, emcTaskIssueCommand (emctaskmain.cc) calls emcTrajLinea
rMove (minimill | bridgeporttaskintf.cc) which sends EMCMOT_SET_LINE
\layout Standard

Parameter, Type: [end, EmcPose] 
\layout Subsection

EMC_TRAJ_CIRCULAR_MOVE_TYPE
\layout Standard

Description, NML Type: sends a circular move from the interp to motion,
 221
\layout Standard

Obs: used
\layout Standard

Written From: ARC_FEED (emccanon.cc)
\layout Standard

Read To: checkInterpList, emcTaskIssueCommand (emctaskmain.cc) calls emcTrajCircu
larMove (minimill | bridgeporttaskintf.cc) which sends EMCMOT_SET_CIRCLE
\layout Standard

Parameter, Type: [end, EmcPose] [center, PM_CARTESIAN] [normal, PM_CARTESIAN]
 [turn, int] 
\layout Subsection

EMC_TRAJ_SET_TERM_COND_TYPE
\layout Standard

Description, NML Type: choses between blending or exact path mode, 222
\layout Standard

Obs: used, seems the interp knows exact PATH, STOP and BLEND, motion however
 knows only BLEND or STOP
\layout Standard

Written From: SET_MOTION_CONTROL_MODE (emccanon.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajSetTermCond (minimill
 | bridgeporttaskintf.cc) which sends EMCMOT_TERM_COND_STOP or EMCMOT_TERM_COND_B
LEND
\layout Standard

Parameter, Type: [cond, int] 
\layout Subsection

EMC_TRAJ_SET_OFFSET_TYPE
\layout Standard

Description, NML Type: is used for tool length offset, 223
\layout Standard

Obs: used, the message could transport more than just Z offset used for
 tool length
\layout Standard

Written From: USE_TOOL_LENGTH_OFFSET (emccanon.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) remembers the origin offset
 into emcStatus->task.origin
\layout Standard

Parameter, Type: [offset, EmcPose] 
\layout Subsection

EMC_TRAJ_SET_ORIGIN_TYPE
\layout Standard

Description, NML Type: sets the origin coords ?, 224
\layout Standard

Obs: used
\layout Standard

Written From: SET_ORIGIN_OFFSETS (emccanon.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) remembers the tool length offset
\layout Standard

Parameter, Type: [origin, EmcPose] 
\layout Subsection

EMC_TRAJ_SET_HOME_TYPE
\layout Standard

Description, NML Type: -, 225
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [home, EmcPose] 
\layout Subsection

EMC_TRAJ_SET_PROBE_INDEX_TYPE
\layout Standard

Description, NML Type: sends the index pin used for probing, 226
\layout Standard

Obs: should get obsolete, probin pin should get routed by HAL
\layout Standard

Written From: sendSetProbeIndex (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajSetProbeIndex
 (minimill | bridgeporttaskintf.cc) which sends EMCMOT_SET_PROBE_INDEX
\layout Standard

Parameter, Type: [index, int] 
\layout Subsection

EMC_TRAJ_SET_PROBE_POLARITY_TYPE
\layout Standard

Description, NML Type: sends the polarity for the pin used for probing,
 227
\layout Standard

Obs: should get obsolete, probin pin polarity should get routed by HAL
\layout Standard

Written From: sendSetProbePolarity (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajSetProbePolarity
 (minimill | bridgeporttaskintf.cc) which sends EMCMOT_SET_PROBE_POLARITY
\layout Standard

Parameter, Type: [polarity, int] 
\layout Subsection

EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG_TYPE
\layout Standard

Description, NML Type: clears the probe tripped, 228
\layout Standard

Obs: used
\layout Standard

Written From: TURN_PROBE_ON (emccanon.cc) sendClearProbeTrippedFlag (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajClearProbeTrippedFlag
 (minimill | bridgeporttaskintf.cc) which sends EMCMOT_CLEAR_PROBE_FLAGS
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TRAJ_PROBE_TYPE
\layout Standard

Description, NML Type: performs a straight probe move, 229
\layout Standard

Obs: used
\layout Standard

Written From: STRAIGHT_PROBE (emccanon.cc) sendProbe (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajProbe (minimill
 | bridgeporttaskintf.cc) which sends EMCMOT_PROBE
\layout Standard

Parameter, Type: [pos, EmcPose] 
\layout Subsection

EMC_TRAJ_SET_TELEOP_ENABLE_TYPE
\layout Standard

Description, NML Type: sets the traj mode to teleop, 230
\layout Standard

Obs: used
\layout Standard

Written From: sendSetTeleopEnable (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajSetMode (minimill
 | bridgeporttaskintf.cc) which sends EMCMOT_TELEOP
\layout Standard

Parameter, Type: [enable, int] 
\layout Subsection

EMC_TRAJ_SET_TELEOP_VECTOR_TYPE
\layout Standard

Description, NML Type: jogs in teleop mode, 231
\layout Standard

Obs: used for jogging in teleop mode
\layout Standard

Written From: sendJogCont (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTrajSetTeleopVector
 (minimill | bridgeporttaskintf.cc) which sends EMCMOT_SET_TELEOP_VECTOR
\layout Standard

Parameter, Type: [vector, EmcPose] 
\layout Subsection

EMC_TRAJ_STAT_TYPE
\layout Standard

Description, NML Type: status for traj, not sent as a message but used as
 is, 299
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [a HUGE load of params
\layout Section

EMC MOTION
\layout Subsection

EMC_MOTION_INIT_TYPE
\layout Standard

Description, NML Type: -, 301
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_MOTION_HALT_TYPE
\layout Standard

Description, NML Type: -, 302
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_MOTION_ABORT_TYPE
\layout Standard

Description, NML Type: -, 303
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_MOTION_SET_AOUT_TYPE
\layout Standard

Description, NML Type: sets an analog output value coordinated with motion,
 304
\layout Standard

Obs: emccanon.cc currently lacks this in emc2, not used in emc2, needs to
 go to HAL
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcMotionSetAout (minimill
 | bridgeporttaskintf.cc) which sends EMCMOT_SET_AOUT
\layout Standard

Parameter, Type: [index, unsigned char] [start, double] [end, double] [now,
 unsigned char] 
\layout Subsection

EMC_MOTION_SET_DOUT_TYPE
\layout Standard

Description, NML Type: sets an digital output value coordinated with motion,
 305
\layout Standard

Obs: emccanon.cc currently lacks this in emc2, not used in emc2, needs to
 go to HAL
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcMotionSetDout (minimill
 | bridgeporttaskintf.cc) which sends EMCMOT_SET_DOUT
\layout Standard

Parameter, Type: [index, unsigned char] [start, double] [end, double] 
\layout Subsection

EMC_MOTION_STAT_TYPE
\layout Standard

Description, NML Type: status for motion, not sent as a message but used
 as is, 399
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [heartbeat, unsigned long int] [traj, EMC_TRAJ_STAT] [axis[EMC_
AXIS_MAX], EMC_AXIS_STAT] 
\layout Section

EMC TASK
\layout Subsection

EMC_TASK_INIT_TYPE
\layout Standard

Description, NML Type: calls the Task init(), 501
\layout Standard

Obs: not used, emcTaskInit called directly from emctask_startup() 
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTaskInit()
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_HALT_TYPE
\layout Standard

Description, NML Type: -, 502
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_ABORT_TYPE
\layout Standard

Description, NML Type: aborts task, cleans up, 503
\layout Standard

Obs: used on shutdown
\layout Standard

Written From: sendAbort (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) aborts all
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_SET_MODE_TYPE
\layout Standard

Description, NML Type: sets current TASK mode, MANUAL, MDI, AUTO, 504
\layout Standard

Obs: used for switching the current mode
\layout Standard

Written From: sendManual sendMdi sendAuto (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcTaskSetMode (emcTask.cc)
\layout Standard

Parameter, Type: [mode, enum EMC_TASK_MODE_ENUM] 
\layout Subsection

EMC_TASK_SET_STATE_TYPE
\layout Standard

Description, NML Type: , 505
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [state, enum EMC_TASK_STATE_ENUM] 
\layout Subsection

EMC_TASK_PLAN_OPEN_TYPE
\layout Standard

Description, NML Type: , 506
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [file, char[LINELEN]] 
\layout Subsection

EMC_TASK_PLAN_RUN_TYPE
\layout Standard

Description, NML Type: , 507
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [line, int] 
\layout Subsection

EMC_TASK_PLAN_READ_TYPE
\layout Standard

Description, NML Type: , 508
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_PLAN_EXECUTE_TYPE
\layout Standard

Description, NML Type: , 509
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [command, char[LINELEN]] 
\layout Subsection

EMC_TASK_PLAN_PAUSE_TYPE
\layout Standard

Description, NML Type: , 510
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_PLAN_STEP_TYPE
\layout Standard

Description, NML Type: , 511
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_PLAN_RESUME_TYPE
\layout Standard

Description, NML Type: , 512
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_PLAN_END_TYPE
\layout Standard

Description, NML Type: , 513
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_PLAN_CLOSE_TYPE
\layout Standard

Description, NML Type: , 514
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_PLAN_INIT_TYPE
\layout Standard

Description, NML Type: , 515
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_PLAN_SYNCH_TYPE
\layout Standard

Description, NML Type: , 516
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TASK_STAT_TYPE
\layout Standard

Description, NML Type: , 599
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [heartbeat, unsigned long int] [a HUGE load of params
\layout Section

EMC TOOL
\layout Subsection

EMC_TOOL_INIT_TYPE
\layout Standard

Description, NML Type: starts TOOL init, 1101
\layout Standard

Obs: used for initializing the IO stuff, should load the tool table too
\layout Standard

Written From: emcIoInit (iotaskintf.cc)
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TOOL_HALT_TYPE
\layout Standard

Description, NML Type: stops TOOL, 1102
\layout Standard

Obs: used for stopping IO, doesn't actually do anything so far, in EMC1
 it was send to subordinates too (spindle, aux, coolant, lube)
\layout Standard

Written From: emcIoHalt (iotaskintf.cc)
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TOOL_ABORT_TYPE
\layout Standard

Description, NML Type: aborts TOOL, 1103
\layout Standard

Obs: used for aborting IO, doesn't actually do anything so far, in EMC1
 it was send to subordinates too (spindle, aux, coolant, lube)
\layout Standard

Written From: emcIoAbort (iotaskintf.cc)
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TOOL_PREPARE_TYPE
\layout Standard

Description, NML Type: prepares a tool for tool changing, 1104
\layout Standard

Obs: loads the prep tool in emcioStatus.tool.toolPrepped, should go to PLC
 and make it move the desired tool in the toolchanging position
\layout Standard

Written From: SELECT_TOOL (emccanon.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcToolPrepare (iotaskintf.cc)
 which sends it to the IO controller
\layout Standard

Parameter, Type: [tool, int] 
\layout Subsection

EMC_TOOL_LOAD_TYPE
\layout Standard

Description, NML Type: changes the current tool with the prepared tool,
 1105
\layout Standard

Obs: loads the actual tool, makes toolprepped=0
\layout Standard

Written From: CHANGE_TOOL (emccanon.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcToolLoad (iotaskintf.cc)
 which sends it to the IO controller, main (simIoControl.cc ioControl.cc)
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TOOL_UNLOAD_TYPE
\layout Standard

Description, NML Type: unloads the current tool from the spindle, 1106
\layout Standard

Obs: unloads the current tool, not written in EMC2 only read
\layout Standard

Written From: none
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcToolUnLoad (iotaskintf.cc)
 which sends it to the IO controller, main (simIoControl.cc ioControl.cc)
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_TOOL_LOAD_TOOL_TABLE_TYPE
\layout Standard

Description, NML Type: loads the tool table, without this tool comp.
 can't be made, 1107
\layout Standard

Written From: sendLoadToolTable (emcsh.cc)
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [file, char[LINELEN]] 
\layout Subsection

EMC_TOOL_SET_OFFSET_TYPE
\layout Standard

Description, NML Type: , 1108
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [tool, int] [length, double] [diameter, double] 
\layout Subsection

EMC_TOOL_STAT_TYPE
\layout Standard

Description, NML Type: , 1199
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Section

EMC AUX
\layout Subsection

EMC_AUX_INIT_TYPE
\layout Standard

Description, NML Type: , 1201
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_AUX_HALT_TYPE
\layout Standard

Description, NML Type: , 1202
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_AUX_ABORT_TYPE
\layout Standard

Description, NML Type: , 1203
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_AUX_DIO_WRITE_TYPE
\layout Standard

Description, NML Type: , 1204
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [index, int] [value, int] 
\layout Subsection

EMC_AUX_AIO_WRITE_TYPE
\layout Standard

Description, NML Type: , 1205
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [index, int] [value, double] 
\layout Subsection

EMC_AUX_ESTOP_ON_TYPE
\layout Standard

Description, NML Type: , 1206
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_AUX_ESTOP_OFF_TYPE
\layout Standard

Description, NML Type: , 1207
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_AUX_STAT_TYPE
\layout Standard

Description, NML Type: , 1299
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [estop, int] [estopIn, int] [dout, unsigned char[EMC_AUX_MAX_DO
UT]] [din, unsigned char[EMC_AUX_MAX_DIN]] [aout, double[EMC_AUX_MAX_AOUT]]
 [ain, double[EMC_AUX_MAX_AIN]] 
\layout Section

EMC SPINDLE
\layout Subsection

EMC_SPINDLE_INIT_TYPE
\layout Standard

Description, NML Type: , 1301
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_HALT_TYPE
\layout Standard

Description, NML Type: , 1302
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_ABORT_TYPE
\layout Standard

Description, NML Type: , 1303
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_ON_TYPE
\layout Standard

Description, NML Type: , 1304
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [speed, double] 
\layout Subsection

EMC_SPINDLE_OFF_TYPE
\layout Standard

Description, NML Type: , 1305
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_FORWARD_TYPE
\layout Standard

Description, NML Type: , 1306
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [speed, double] 
\layout Subsection

EMC_SPINDLE_REVERSE_TYPE
\layout Standard

Description, NML Type: , 1307
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [speed, double] 
\layout Subsection

EMC_SPINDLE_STOP_TYPE
\layout Standard

Description, NML Type: , 1308
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [speed, double] 
\layout Subsection

EMC_SPINDLE_INCREASE_TYPE
\layout Standard

Description, NML Type: , 1309
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [speed, double] 
\layout Subsection

EMC_SPINDLE_DECREASE_TYPE
\layout Standard

Description, NML Type: , 1310
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_CONSTANT_TYPE
\layout Standard

Description, NML Type: , 1311
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_BRAKE_RELEASE_TYPE
\layout Standard

Description, NML Type: , 1312
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_BRAKE_ENGAGE_TYPE
\layout Standard

Description, NML Type: , 1313
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_ENABLE_TYPE
\layout Standard

Description, NML Type: , 1314
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_DISABLE_TYPE
\layout Standard

Description, NML Type: , 1315
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_SPINDLE_STAT_TYPE
\layout Standard

Description, NML Type: , 1399
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [speed, double] [direction, int] [brake, int] [increasing,
 int] [enabled, int] 
\layout Section

EMC COOLANT
\layout Subsection

EMC_COOLANT_INIT_TYPE
\layout Standard

Description, NML Type: initializes the COOLANT controller (currently part
 of the IO controller), 1401
\layout Standard

Obs: not written in emc2, only read, in EMC1 it was sent when TOOL_INIT
 was sent
\layout Standard

Written From: none
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_COOLANT_HALT_TYPE
\layout Standard

Description, NML Type: stops the COOLANT, 1402
\layout Standard

Obs: not written in emc2, only read, in EMC1 it was sent when TOOL_HALT
 was sent
\layout Standard

Written From: none
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_COOLANT_ABORT_TYPE
\layout Standard

Description, NML Type: aborts the COOLANT, 1403
\layout Standard

Obs: not written in emc2, only read, in EMC1 it was sent when TOOL_ABORT
 was sent
\layout Standard

Written From: none
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_COOLANT_MIST_ON_TYPE
\layout Standard

Description, NML Type: starts MIST coolant, 1404
\layout Standard

Obs: used, written by emccanon.cc
\layout Standard

Written From: MIST_ON (emccanon.cc) sendMistOn (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcCoolantMistOn (iotaskintf.c
c) which sends it to the IO controller, main (simIoControl.cc ioControl.cc)
 iosh.cc
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_COOLANT_MIST_OFF_TYPE
\layout Standard

Description, NML Type: stops MIST coolant, 1405
\layout Standard

Obs: used, written by emccanon.cc
\layout Standard

Written From: MIST_OFF (emccanon.cc) sendMistOff (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcCoolantMistOff (iotaskintf.
cc) which sends it to the IO controller, main (simIoControl.cc ioControl.cc)
 iosh.cc
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_COOLANT_FLOOD_ON_TYPE
\layout Standard

Description, NML Type: starts FLOOD coolant, 1406
\layout Standard

Obs: used, written by emccanon.cc
\layout Standard

Written From: FLOOD_ON (emccanon.cc) sendFloodOn (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcCoolantFloodOn (iotaskintf.
cc) which sends it to the IO controller, main (simIoControl.cc ioControl.cc)
 iosh.cc
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_COOLANT_FLOOD_OFF_TYPE
\layout Standard

Description, NML Type: stops FLOOD coolant, 1407
\layout Standard

Obs: used, written by emccanon.cc
\layout Standard

Written From: FLOOD_OFF (emccanon.cc) sendFloodOff (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcCoolantFloodOff (iotaskint
f.cc) which sends it to the IO controller, main (simIoControl.cc ioControl.cc)
 iosh.cc
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_COOLANT_STAT_TYPE
\layout Standard

Description, NML Type: status for coolant, not sent as a message but used
 as is, 1499
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [mist, int] [flood, int] 
\layout Section

EMC LUBE
\layout Subsection

EMC_LUBE_INIT_TYPE
\layout Standard

Description, NML Type: initializes the LUBE controller (currently part of
 the IO controller), 1501
\layout Standard

Obs: not written in emc2, only read, in EMC1 it was sent when TOOL_INIT
 was sent
\layout Standard

Written From: none
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_LUBE_HALT_TYPE
\layout Standard

Description, NML Type: stops the LUBE, 1502
\layout Standard

Obs: not written in emc2, only read, in EMC1 it was sent when TOOL_HALT
 was sent
\layout Standard

Written From: none
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_LUBE_ABORT_TYPE
\layout Standard

Description, NML Type: aborts the LUBE, 1503
\layout Standard

Obs: not written in emc2, only read, in EMC1 it was sent when TOOL_ABORT
 was sent
\layout Standard

Written From: none
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_LUBE_ON_TYPE
\layout Standard

Description, NML Type: starts LUBE, 1504
\layout Standard

Obs: written only by the GUI's (emcsh.cc)
\layout Standard

Written From: sendLubeOn (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcLubeOn (iotaskintf.cc)
 which sends it to the IO controller, main (ioControl.cc simIoControl.cc)
 emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_LUBE_OFF_TYPE
\layout Standard

Description, NML Type: stops LUBE, 1505
\layout Standard

Obs: written only by the GUI's (emcsh.cc)
\layout Standard

Written From: sendLubeOff (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcLubeOff (iotaskintf.cc)
 which sends it to the IO controller, main (ioControl.cc simIoControl.cc)
 emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_LUBE_STAT_TYPE
\layout Standard

Description, NML Type: status for LUBE, not sent as a message but used as
 is, 1599
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [on, int] [level, int] 
\layout Section

EMC SET
\layout Subsection

EMC_SET_DIO_INDEX_TYPE
\layout Standard

Description, NML Type: , 5001
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [value, int] [index, int] 
\layout Subsection

EMC_SET_AIO_INDEX_TYPE
\layout Standard

Description, NML Type: , 5002
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [value, int] [index, int] 
\layout Subsection

EMC_SET_POLARITY_TYPE
\layout Standard

Description, NML Type: , 5003
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [value, int] [polarity, int] 
\layout Section

EMC IO
\layout Subsection

EMC_IO_INIT_TYPE
\layout Standard

Description, NML Type: , 1601
\layout Standard

Obs: not written in emc2, only read
\layout Standard

Written From: none
\layout Standard

Read To: main (ioControl.cc simIoControl.cc) emc_io_get_command (iosh.cc)
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_IO_HALT_TYPE
\layout Standard

Description, NML Type: , 1602
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_IO_ABORT_TYPE
\layout Standard

Description, NML Type: , 1603
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_IO_SET_CYCLE_TIME_TYPE
\layout Standard

Description, NML Type: , 1604
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [cycleTime, double] 
\layout Subsection

EMC_IO_STAT_TYPE
\layout Standard

Description, NML Type: status for IO, not sent as a message but used as
 is, 1699
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [heartbeat, unsigned long int] [tool, EMC_TOOL_STAT] [spindle,
 EMC_SPINDLE_STAT] [coolant, EMC_COOLANT_STAT] [aux, EMC_AUX_STAT] [lube,
 EMC_LUBE_STAT] 
\layout Section

EMC INIT, HALT, & ABORT
\layout Subsection

EMC_INIT_TYPE
\layout Standard

Description, NML Type: , 1901
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_HALT_TYPE
\layout Standard

Description, NML Type: , 1902
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Subsection

EMC_ABORT_TYPE
\layout Standard

Description, NML Type: , 1903
\layout Standard

Obs: not used
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: 
\layout Section

EMC LOG
\layout Subsection

EMC_LOG_OPEN_TYPE
\layout Standard

Description, NML Type: opens the log file, 1904
\layout Standard

Obs: not used in emc2, it was used in EMC[1] from emclog.tcl
\layout Standard

Written From: sendLogOpen (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcLogOpen (taskintf.cc)
 which sends EMCMOT_OPEN_LOG
\layout Standard

Parameter, Type: [file, char[LINELEN]] [type, int] [size, int] [skip, int]
 [which, int] [triggerType, int] [triggerVar, int] [triggerThreshold, double]
 
\layout Subsection

EMC_LOG_START_TYPE
\layout Standard

Description, NML Type: starts logging, 1905
\layout Standard

Obs: not used in emc2, it was used in EMC[1] from emclog.tcl
\layout Standard

Written From: sendLogStart (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcLogStart (taskintf.cc)
 which sends EMCMOT_START_LOG
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_LOG_STOP_TYPE
\layout Standard

Description, NML Type: stops logging, 1906
\layout Standard

Obs: not used in emc2, it was used in EMC[1] from emclog.tcl
\layout Standard

Written From: sendLogStop (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcLogStop (taskintf.cc)
 which sends EMCMOT_STOP_LOG
\layout Standard

Parameter, Type: none
\layout Subsection

EMC_LOG_CLOSE_TYPE
\layout Standard

Description, NML Type: closes the log file, 1907
\layout Standard

Obs: not used in emc2, it was used in EMC[1] from emclog.tcl
\layout Standard

Written From: sendLogClose (emcsh.cc)
\layout Standard

Read To: emcTaskIssueCommand (emctaskmain.cc) calls emcLogClose (taskintf.cc)
 which sends EMCMOT_CLOSE_LOG
\layout Standard

Parameter, Type: none
\layout Section

EMC STAT
\layout Subsection

EMC_STAT_TYPE
\layout Standard

Description, NML Type: aggregation of all the status messages, not sent
 as a message but used as is all over the place, 1999
\layout Standard

Written From: none
\layout Standard

Read To: none
\layout Standard

Parameter, Type: [task, EMC_TASK_STAT] [motion, EMC_MOTION_STAT] [io, EMC_IO_STA
T] [logFile, char[LINELEN]] [logType, int] [logSize, int] [logSkip, int]
 [logOpen, int] [logStarted, int] [logPoints, int] 
\the_end
