#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language french
\inputencoding auto
\fontscheme bookman
\graphics default
\paperfontsize 11
\spacing single 
\papersize letterpaper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 5
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language french
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle headings

\layout Chapter

Les bases de HAL
\layout Section

Commandes de Hal
\layout Standard

Des informations plus détaillées peuvent être trouvées dans la man page
 en tapant "man halcmd" dans une console.
 Pour voir la configuration de HAL ainsi que le status de ses pins et paramétres
 utiliser la fenêtre HAL Configuration dans le menu 
\begin_inset Quotes fld
\end_inset 

Machine
\begin_inset Quotes frd
\end_inset 

 d'AXIS.
 Pour visualiser le status des pins, ouvrir l'onglet 
\begin_inset Quotes fld
\end_inset 

Watch
\begin_inset Quotes frd
\end_inset 

 puis cliquer dans l'arborescence sur les pins qui doivent être visualisées
 dans la fenêtre watch.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

Fenêtre de configuration de HAL
\layout Standard
\align center 

\begin_inset Graphics
	filename images/HAL_Configuration.png
	scale 60

\end_inset 


\end_inset 


\layout Subsection

loadrt
\layout Standard

La commande "loadrt" charge un composant temps réel de HAL.
 Les composants temps réel doivent être ajoutés au thread temps réel pour
 être fonctionnels.
 Il n'est pas possible de charger un composant de l'espace utilisateur dans
 l'espace temps réel.
\layout Standard

Syntaxe et exemple:
\layout Quote


\series bold 
loadrt <composant> <options>
\layout Quote


\series bold 
loadrt mux4 count=1
\layout Subsection

addf
\layout Standard

La commande "addf" ajoute une fonction à un thread temps réel.
 Si l'assistant StepConf a été utilisé pour créer la configuration, deux
 threads ont été créés.
\layout Itemize

base-thread (le thread haute vitesse) ce thread prends en main les items
 nécessitant une réponse très rapide comme la génération d'impulsions, la
 lecture et l'écriture sur le port parallèle.
\layout Itemize

servo-thread (le thread basse vitesse) ce thread prends en main les items
 n'étant pas influencés par la vitesse comme le contrôleur de mouvement,
 l'API ClassicLadder et les commandes manuelles.
\layout Standard

Syntaxe et exemple:
\layout Quote


\series bold 
addf <composant> <thread>
\layout Quote


\series bold 
addf mux4 servo-thread
\layout Subsection

loadusr
\layout Standard

La commande "loadusr" charge un composant de HAL de l'espace utilisateur.
 Les programmes de l'espace utilisateur ont leur propre process séparé qui
 optionellement communique avec les autres composants de HAL via leurs pins
 et paramètres.
 Il n'est pas possible de charger un composant temps réel dans l'espace
 utilisateur.
\layout Standard

Les drapeaux peuvent être un ou plusieurs parmis les suivants:
\layout Description

-W pour attendre que le composant soit prêt.
 Le composant est supposé avoir le même nom que le premier argument de la
 commande.
\layout Description

-Wn\SpecialChar ~
<nom> pour attendre un composant, qui porte le nom donné sous la forme
 <nom>.
\layout Description

-w pour attendre la fin du programme
\layout Description

-i pour ignorer la valeur retournée par le programme (avec -w) 
\layout Standard

Syntaxe et exemple:
\layout Quote


\series bold 
loadusr <composant> <options>
\layout Quote


\series bold 
loadusr halui
\layout Quote


\series bold 
loadusr -Wn spindle gs2_vfd -n spindle
\layout Quote

En anglais ça donne "loadusr wait for name spindle component gs2_vfd name
 spindle."
\newline 
Le -n spindle est une partie du composant gs2_vfd et non de la commande
 loadusr.
\layout Subsection

net
\layout Standard

La commande "net" crée une "connection" entre un signal et une ou plusieurs
 pins.
 Les indicateurs de direction "<= et =>" sont seulement des aides à la lecture,
 ils n'ont pas d'autre utilité.
 
\layout Standard

Syntaxe et exemple:
\layout Quote


\series bold 
net <signal-name> <pin-name> <opt-direction> <opt-pin-name>
\layout Quote


\series bold 
net both-home-y <= parport.0.pin-11-in
\layout Standard

Chaque signal ne peut avoir qu'une seule source (une seule pin de HAL "out
\begin_inset Quotes erd
\end_inset 

) et autant de 
\begin_inset Quotes fld
\end_inset 

lecteurs
\begin_inset Quotes frd
\end_inset 

 (des pins de HAL "in") que souhaité.
 Dans la colonne Dir de la fenêtre de configuration de HAL il est possible
 de voir quelles pins sont "in" et quelles pins sont "out".
\layout Standard

Pour faire celà en une ligne:
\layout Quote


\series bold 
net xStep stepgen.0.out => parport.0.pin-02-out parport.0.pin-08-out
\layout Standard

Ou pour le faire en plusieurs lignes, utiliser simplement le signal avec
 les lecteurs des lignes suivantes:
\layout Quote


\series bold 
net xStep stepgen.0.out => parport.0.pin-02-out
\newline 
net xStep => parport.0.pin-02-out
\layout Standard

Les pins appelées I/O pins comme 
\begin_inset Quotes fld
\end_inset 

index-enable
\begin_inset Quotes frd
\end_inset 

, ne suivent pas cette règle.
\layout Subsection

setp
\layout Standard

La commande "setp" ajuste la valeur d'une pin ou d'un paramètre.
 Les valeurs valides dépendront du type de la pin ou du paramètre.
 
\layout Itemize

bit = true ou 1 et false ou 0 (True, TRUE, true sont toutes valides)
\layout Itemize

float = un flottant sur 32 bits, avec approximativement 24 bits de résolution
 et au plus 200 bits d'étendue dynamique.
\layout Itemize

s32 = un nombre entier compris entre -2147483648 et 2147483647
\layout Itemize

u32 = un nombre entier compris entre 0 et 4294967295
\layout Standard

Pour des informations sur les flottants voir ici (en anglais):
\layout Standard


\begin_inset LatexCommand \url{http://en.wikipedia.org/wiki/Floating_point}

\end_inset 


\layout Standard

Les paramètres peuvent être positionnés avant utilisation ou pendant l'utilisati
on, toutefois certains composants ont des paramètres qui doivent être positionné
s avant utilisation.
 Il n'est pas possible d'utiliser 
\begin_inset Quotes fld
\end_inset 

setp
\begin_inset Quotes frd
\end_inset 

 sur une pin connectée à un signal.
\layout Standard

Syntaxe et exemple:
\layout Quote


\series bold 
setp <pin/parameter-name> <value>
\layout Quote


\series bold 
setp paraport.0.pin-08-out TRUE
\layout Subsection

Quatre commandes obsolètes
\layout Subsubsection

linksp
\layout Standard

The command "linksp" creates a "connection" between a signal and one pin.
\layout Standard

Syntaxe et exemple:
\layout Quote


\series bold 
linksp <signal-name> <pin-name>
\layout Quote


\series bold 
linksp X-step parport.0.pin-02-out
\layout Standard

La commande "linksp" a été incluse dans la commande "net".
\layout Subsubsection

linkps
\layout Standard

The command "linkps" creates a "connection" between one pin and one signal.
 It is the same as linksp but the arguments are reversed.
\layout Standard

Syntaxe et exemple:
\layout Quote


\series bold 
linkps <pin-name> <signal-name>
\layout Quote


\series bold 
linkps parport.0.pin-02-out X-Step
\layout Standard

La commande "linkps" a été incluse dans la commande "net".
\layout Subsubsection

unlinkp
\layout Standard

The command "unlinkp" unlinks a pin from the connected signal.
 If no signal was connected to the pin prior running the command, nothing
 happens.
\layout Standard

Syntaxe et exemple:
\layout Quote


\series bold 
unlinkp <pin-name>
\layout Quote


\series bold 
unlinkp parport.0.pin-02-out
\layout Subsubsection

newsig
\layout Standard

the command "newsig" creates a new HAL signal by the name <signame> and
 the data type of <type>.
 Type must be "bit", "s32", "u32" or "float".
 Error if <signame> all ready exists.
\layout Standard

Syntaxe et exemple:
\layout Quote


\series bold 
newsig <signame> <type>
\layout Quote


\series bold 
newsig Xstep bit
\layout Standard

D'autres informations peuvent être trouvées dans le manuel de HAL ou la
 man page de 
\begin_inset Quotes fld
\end_inset 

halrun
\begin_inset Quotes frd
\end_inset 

.
\layout Section

Fichiers Hal
\layout Standard

Si l'assistant StepConf a été utilisé pour générer la configuration trois
 fichiers HAL ont dû être créés dans le répertoire de la configuration.
\layout Itemize

ma-fraiseuse.hal (si ne nom de la config est nomée "ma-fraiseuse") Ce fichier
 est chargé en premier, il ne doit pas être modifié sous peine de ne plus
 pouvoir l'utiliser avec l'assistant StepConf.
\layout Itemize

custom.hal Ce fichier est le deuxième à être chargé et il l'est avant l'interface
 utilisateur graphique (GUI).
 C'est dans ce fichier que ce trouvent les commandes personnalisées de l'utilisa
teur devant être chargées avant la GUI.
 
\layout Itemize

custom_postgui.hal Ce fichier est chargé après la GUI.
 C'est dans ce fichier que se trouvent les commandes personnalisées de l'utilisa
teur devant être chargées après la GUI.
 Toutes les commandes relatives aux widgets de pyVCP doivent être placées
 ici.
 
\layout Section

Composants de logiques combinatoire
\layout Standard

Hal contient plusieurs composants logiques temps réel.
 Les composants logiques suivent une tables de vérité montrant les états
 logiques des sorties en fonction de l'état des entrées.
 Typiquement, la manipulation des bits d'entrée détermine l'état électrique
 des sorties selon la table de vérité des portes.
\layout Subsection

and2
\layout Standard

Le composant "and2" est une porte "and" à deux entrées.
 Sa table de vérité montre la sortie pour chaque combinaison des entrées.
\layout Standard

Syntaxe
\layout Quote


\series bold 
and2 [count=N|names=name1[,name2...]]
\layout Standard

Fonctions
\layout Quote

and2.n
\layout Standard

Pins
\layout Quote

and2.N.in0 (bit, in)
\newline 
and2.N.in1 (bit, in)
\newline 
and2.N.out (bit, out)
\layout Standard
\align center 
Table de vérité
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

not
\layout Standard

Le composant "not" est un simple inverseur d'état.
 
\layout Standard

Syntaxe
\layout Quote


\series bold 
not [count=n|names=name1[,name2...]]
\layout Standard

Fonctions
\layout Quote

not.all
\newline 
not.n
\layout Standard

Pins
\layout Quote

not.n.in (bit, in)
\newline 
not.n.out (bit, out)
\layout Standard
\align center 
Table de vérité
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

or2
\layout Standard

Le composant "or2" est une porte OR à deux entrées.
\layout Standard

Syntaxe
\layout Quote


\series bold 
or2[count=,|names=name1[,name2...]]
\layout Standard

Fonctions
\layout Quote

or2.n
\layout Standard

Pins
\layout Quote

or2.n.in0 (bit, in)
\newline 
or2.n.in1 (bit, in)
\newline 
or2.n.out (bit, out)
\layout Standard
\align center 
Table de vérité
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

xor2
\layout Standard

Le composant "xor2" est une porte XOR à deux entrées (OU exclusif).
\layout Standard

Syntaxe
\layout Quote


\series bold 
xor2[count=,|names=name1[,name2...]]
\layout Standard

Fonctions
\layout Quote

xor2.n
\layout Standard

Pins
\layout Quote

xor2.n.in0 (bit, in)
\newline 
xor2.n.in1 (bit, in)
\newline 
xor2.n.out (bit, out)
\layout Standard
\align center 
Table de vérité
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

Exemples de logique combinatoire
\layout Standard

Un exemple de connection avec un "and2", deux entrées vers une sortie.
\layout Quote


\series bold 
loadrt and2 count=1
\newline 
addf and2.0 servo-thread
\newline 
net my-sigin1 and2.0.in0 <= parport.0.pin-11-in
\newline 
net my-sigin2 and2.0.in.1 <= parport.0.pin-12-in
\newline 
net both-on parport.0.pin-14-out <= and2.0.out
\layout Standard

Dans cet exemple un and2 est chargé dans l'espace temps réel, puis ajouté
 à servo thread.
 Ensuite la broche d'entrée 11 du port parallèle est connectée à l'entrée
 in0 de la porte.
 Puis la broche d'entrée 12 du port est connectée à l'entrée in1 de la porte.
 Enfin la sortie and2.0.out de la porte est connectée à la broche de sortie
 14 du port parallèle.
 Ainsi en suivant la table de vérité du and2, si les broches 11 et 12 du
 port sont à 1, alors sa sortie 14 est à 1 aussi.
\the_end
