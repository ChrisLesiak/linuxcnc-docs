#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\begin_preamble
\usepackage[plainpages=false,pdfpagelabels,colorlinks=true,linkcolor=blue]{hyperref}
\end_preamble
\language english
\inputencoding default
\fontscheme bookman
\graphics default
\float_placement !htbp
\paperfontsize default
\spacing single 
\papersize letterpaper
\paperpackage a4
\use_geometry 1
\use_amsmath 1
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 3
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

pyVCP
\layout Standard

Python Virtual Control Panel
\layout Section

Introduction
\layout Standard

The pyVCP (python Virtual Control Panel) is designed to give the integrator
 the ability to customize the AXIS interface with buttons and indicators
 to do special tasks.
 
\layout Standard

Hardware machine control panels can use up a lot of I/O pins and can be
 expensive.
 That is where Virtual Control Panels have the advantage as well as it cost
 nothing to build a pyVCP.
 
\layout Standard

Virtual control panels can be used for testing or monitoring things to temporari
ly replace real I/O devices while debugging ladder logic, or to simulate
 a physical panel before you build it and wire it to an I/O board.
\layout Standard

The following graphic displays many of the pyVCP widgets.
\layout Standard
\align center 

\begin_inset Graphics
	filename images/pyvcp_group.png
	scale 70

\end_inset 


\layout Section

Panel Construction
\layout Standard

The layout of a pyVCP panel is specified with an XML file that contains
 widget tags between <pyvcp> and </pyvcp>.
 For example:
\layout LyX-Code

<pyvcp>
\newline 
    <label text="This is a LED indicator"/>
\newline 
    <led/>
\newline 
</pyvcp>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_mypanel.png

\end_inset 


\layout Standard

If you place this text in a file called tiny.xml, and run 
\layout LyX-Code

halrun -I loadusr pyvcp -c mypanel tiny.xml
\layout Standard

pyVCP will create the panel for you, which includes two widgets, a Label
 with the text "This is a LED indicator", and a LED, used for displaying
 the state of a HAL BIT signal.
 It will also create a HAL component named "mypanel" (all widgets in this
 panel are connected to pins that start with "mypanel.").
 Since no <halpin> tag was present inside the <led> tag, pyVCP will automaticall
y name the HAL pin for the LED widget mypanel.led.0
\layout Standard

For a list of widgets and their tags and options, see the widget reference
 below.
\layout Standard

Once you have created your panel, connecting HAL signals to and from the
 pyVCP pins is done with:
\layout LyX-Code

halcmd net
\layout Standard

If you are new to HAL, the HAL basics chapter is a good place to start.
\layout Section

Security of pyVCP
\layout Standard

Parts of pyVCP files are evaluated as Python code, and can take any action
 available to Python programs.
 Only use pyVCP .xml files from a source that you trust.
\layout Section

pyVCP with AXIS
\begin_inset LatexCommand \label{sec:pyvcp-with-axis}

\end_inset 


\layout Standard

Since AXIS uses the same GUI toolkit (Tkinter) as pyVCP, it is possible
 to include a pyVCP panel on the right side of the normal AXIS user interface.
 A typical example is explained below.
\layout Standard

Place your pyVCP XML file describing the panel in the same directory where
 your .ini file is.
 Say we we want to display the current spindle speed using a Bar widget.
 Place the following in a file called spindle.xml:
\layout LyX-Code

<pyvcp>
\newline 
    <label>
\newline 
        <text>"Spindle speed:"</text>
\newline 
    </label>
\newline 
    <bar>
\newline 
        <halpin>"spindle-speed"</halpin>
\newline 
        <max_>5000</max_>
\newline 
    </bar>
\newline 
</pyvcp>
\layout Standard

Here we've made a panel with a Label and a Bar widget, specified that the
 HAL pin connected to the Bar should be named 
\begin_inset Quotes eld
\end_inset 

spindle-speed
\begin_inset Quotes erd
\end_inset 

, and set the maximum value of the bar to 5000 (see widget reference below
 for all options).
 To make AXIS aware of this file, and call it at start up, we need to specify
 the following in the [DISPLAY] section of the .ini file:
\layout LyX-Code

PYVCP = spindle.xml
\layout Standard

To make our widget actually display the spindle-speed it needs to be hooked
 up to the appropriate HAL signal.
 A .hal file that will be run once AXIS and pyVCP have started can be specified
 in the [HAL] section of the .ini file:
\layout LyX-Code

POSTGUI_HALFILE = spindle_to_pyvcp.hal
\layout Standard

This change will run the HAL commands specified in "spindle_to_pyvcp.hal".
 In our example the contents could look like this:
\layout LyX-Code

net spindle-rpm-filtered  => pyvcp.spindle-speed
\layout Standard

assuming that a signal called 
\begin_inset Quotes eld
\end_inset 

spindle-rpm-filtered
\begin_inset Quotes erd
\end_inset 

 already exists.
 Note that when running together with AXIS, all pyVCP widget HAL pins have
 names that start with "pyvcp.".
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_AXIS.png
	lyxscale 50
	scale 50

\end_inset 


\layout Standard

This is what the newly created pyVCP panel should look like in AXIS.
 The 
\family typewriter 
sim/lathe
\family default 
 configuration is already configured this way.
\layout Section

pyVCP Widget reference
\layout Standard

HAL signals come in two variants, bits and numbers.
 Bits are off/on signals.
 Numbers can be "float", "s32" or "u32".
 For more information on HAL data types see the 
\begin_inset LatexCommand \ref{sec:Hal-Data}

\end_inset 

 section.
 The pyVCP widget can either display the value of the signal with an indicator
 widget, or modify the signal value with a control widget.
 Thus there are four classes of pyVCP widgets that you can connect to a
 HAL signal.
 A fifth class of helper widgets allow you to organize and label your panel.
\layout Enumerate

Widgets for indicating "bit" signals: led, rectled
\layout Enumerate

Widgets for controlling "bit" signals: button, checkbutton, radiobutton
\layout Enumerate

Widgets for indicating "number" signals: number, s32, u32, bar, meter
\layout Enumerate

Widgets for controlling "number" signals: spinbox, scale, jogwheel
\layout Enumerate

Helper widgets: hbox, vbox, tabel, label, labelframe
\layout Subsubsection

Syntax
\layout Standard

Each widget is described briefly, followed by the markup used, and a screen
 shot.
 All tags inside the main widget tag are optional.
\layout Subsubsection

General Notes
\layout Standard

At the present time, both a tag-based and an attribute-based syntax are
 supported.
 For instance, the following XML fragments are treated identically:
\layout LyX-Code

<led halpin="my-led"/>
\layout Standard

and
\layout LyX-Code

<led><halpin>"my-led"</halpin></led>
\layout Standard

When the attribute-based syntax is used, the following rules are used to
 turn the attributes value into a Python value:
\layout Enumerate

If the first character of the attribute is one of the following, it is evaluated
 as a Python expression: 
\family typewriter 
{(["'
\layout Enumerate

If the string is accepted by int(), the value is treated as an integer
\layout Enumerate

If the string is accepted by float(), the value is treated as floating-point
\layout Enumerate

Otherwise, the string is accepted as a string.
\layout Standard

When the tag-based syntax is used, the text within the tag is always evaluated
 as a Python expression.
\layout Standard

The examples below show a mix of formats.
\layout Subsubsection

Comments
\layout Standard

To add a comment use the xml syntax for a comment.
 
\layout Quote

<!--My Comment-->
\layout Subsubsection

Editing the XML file
\layout Standard

Edit the XML file with a text editor.
 In most cases you can right click on the file and select "open with text
 editor" or similar.
\layout Subsection

LED
\layout Standard

A LED is used to indicate the status of a BIT signal.
 The LED color will be on_color when the BIT signal is true, and off_color
 otherwise.
\layout Quote

<led>
\newline 
\SpecialChar ~
\SpecialChar ~
<halpin>"my-led"</halpin> 
\newline 
\SpecialChar ~
\SpecialChar ~
<size>50</size> 
\newline 
\SpecialChar ~
\SpecialChar ~
<on_color>"blue"</on_color>
\newline 
\SpecialChar ~
\SpecialChar ~
<off_color>"black"</off_color>
\newline 
</led>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_led.png

\end_inset 


\layout Standard

<halpin> sets the name of the pin, default is 
\begin_inset Quotes eld
\end_inset 

led.n
\begin_inset Quotes erd
\end_inset 

, where n is an integer
\newline 
<size> sets the size of the led, default is 20
\newline 
<on_color> sets the color of the LED when the pin is true.
 default is 
\begin_inset Quotes eld
\end_inset 

green
\begin_inset Quotes erd
\end_inset 


\newline 
<off_color> sets the color of the LED when the pin is false.
 default is 
\begin_inset Quotes eld
\end_inset 

ref
\begin_inset Quotes erd
\end_inset 


\layout Subsection

Rectangle LED
\layout Standard

This is a variant of the "led" widget.
 
\layout Quote

<rectled>
\newline 
\SpecialChar ~
\SpecialChar ~
<halpin>"my-led"</halpin>
\newline 
\SpecialChar ~
\SpecialChar ~
<height>"50"</height>
\newline 
\SpecialChar ~
\SpecialChar ~
<width>"100"</width>
\newline 
\SpecialChar ~
\SpecialChar ~
<on_color>"green"</on_color>
\newline 
\SpecialChar ~
\SpecialChar ~
<off_color>"red"</off_color>
\newline 
</rectled>
\layout Subsection

Button
\layout Standard

A button is used to control a BIT pin.
 The pin will be set True when the button is pressed and held down, and
 will be set False when the button is released.
 Buttons can use the following formatting options
\layout Itemize

<padx>n</padx> where "n" is the amount of extra horzontal extra space
\layout Itemize

<pady>n</pady> where "n" is the amount of extra vertical extra space
\layout Itemize

<activebackground>"color"</activebackground> the cursor over color
\layout Itemize

<bg>"color"</bg> the color of the button
\layout Subsubsection

Text Button
\layout Quote

<button>
\newline 
    <halpin>"my-button"</halpin>
\newline 
    <text>"OK"</text> 
\newline 
</button>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_button.png

\end_inset 


\layout Subsubsection

Checkbutton
\layout Standard

A checkbutton controls a BIT pin.
 The pin will be set True when the button is checked, and false when the
 button is unchecked.
\layout Quote

<checkbutton>
\newline 
    <halpin>"my-checkbutton"</halpin>
\newline 
</checkbutton>
\layout Standard

An unchecked checkbutton: 
\begin_inset Graphics
	filename pyvcp_checkbutton1.png

\end_inset 

 , and a checked one: 
\begin_inset Graphics
	filename pyvcp_checkbutton2.png

\end_inset 


\layout Subsubsection

Radiobutton
\layout Standard

A radiobutton will set one of a number of BIT pins true.
 The other pins are set false.
\layout Quote

<radiobutton>
\newline 
    <choices>["one","two","three"]</choices> 
\newline 
    <halpin>"my-radio"</halpin> 
\newline 
</radiobutton>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_radiobutton.png

\end_inset 


\layout Standard

Note that the HAL pins in the example above will me named my-radio.one, my-radio.t
wo, and my-radio.three.
 In the image above, 
\begin_inset Quotes eld
\end_inset 

three
\begin_inset Quotes erd
\end_inset 

 is the selected value.
\layout Subsection

Number Displays
\layout Standard

Number displays can use the following formatting options
\layout Itemize

<font>("Font Name",n)</font> where "n" is the font size
\layout Itemize

<width>n</width> where "n" is the overall width of the space used
\layout Itemize

<justify>pos</justify> where "pos" is LEFT, CENTER, or RIGHT (doesn't work)
\layout Itemize

<padx>n</padx> where "n" is the amount of extra horzontal extra space
\layout Itemize

<pady>n</pady> where "n" is the amount of extra vertical extra space
\layout Subsubsection

Float
\layout Standard

The number widget displays the value of a float signal.
\layout Quote

<number>
\newline 
    <halpin>"my-number"</halpin>
\newline 
    <font>("Helvetica",50)</font>
\newline 
    <format>"+4.3f"</format>
\newline 
</number>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_number.png

\end_inset 


\layout Standard

<font> is a Tkinter font type and size specification.
 Note that on Ubuntu 6.06 "Helvetica" is not available in sizes above ca
 40 or 50.
 One font that will show up to at least size 200 is "courier 10 pitch",
 so for a really big Number widget you could specify:
\layout Quote

<font>("courier 10 pitch",100)</font>
\layout Standard

<format> is a "C-style" format specified that determines how the number
 is displayed.
\layout Subsubsection

s32 Number
\layout Standard

The s32 number widget displays the value of a s32 number.
 The syntax is the same as "number" except the name which is <s32>.
\layout Subsubsection

u32 Number
\layout Standard

The u32 number widget displays the value of a u32 number.
 The syntax is the same as "number" except the name which is <u32>.
\layout Subsection

Bar
\layout Standard

A bar widget displays the value of a FLOAT signal both graphically using
 a bar display and numerically.
\layout Quote

<bar>
\newline 
    <halpin>"my-bar"</halpin>
\newline 
    <min_>0</min_>
\newline 
    <max_>123</max_>
\newline 
    <bgcolor>"grey"</bgcolor>
\newline 
    <fillcolor>"red"</fillcolor>
\newline 
</bar>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_bar.png

\end_inset 


\layout Subsection

Meter
\layout Standard

Meter displays the value of a FLOAT signal using a traditional dial indicator.
\layout Quote

<meter>
\newline 
    <halpin>"mymeter"</halpin>
\newline 
    <text>"Battery"</text>
\newline 
    <subtext>"Volts"</subtext>
\newline 
    <size>300</size>
\newline 
    <min_>0</min_>
\newline 
    <max_>10.5</max_>
\newline 
    <majorscale>1</majorscale>
\newline 
    <minorscale>0.2</minorscale>
\newline 
    <region1>(9,10.5,"green")</region1>
\newline 
    <region2>(7.5,9,"orange")</region2>
\newline 
    <region3>(0,7.5,"red")</region3>
\newline 
</meter>
\layout LyX-Code

\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_meter.png
	lyxscale 50
	scale 50

\end_inset 


\layout Subsection

Spinbox
\layout Standard

Spinbox controls a FLOAT pin.
 You increase or decrease the value of the pin by either pressing on the
 arrows, or pointing at the spinbox and rolling your mouse-wheel.
\layout Quote

<spinbox>
\newline 
    <halpin>"my-spinbox"</halpin>
\newline 
    <min_>-12</min_>
\newline 
    <max_>33</max_>
\newline 
    <resolution>0.1</resolution>
\newline 
    <format>"2.3f"</format>
\newline 
    <font>("Arial",30)</font>
\newline 
</spinbox>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_spinbox.png

\end_inset 


\layout Subsection

Scale
\layout Standard

Scale controls a float or a s32 pin.
 You increase or decrease the value of the pin be either dragging the slider,
 or pointing at the scale and rolling your mouse-wheel.
 The "halpin" will have both "-f" and "-i" added to it to form the float
 and s32 pins.
 Width is the width of the slider in vertical and the height of the slider
 in horizontal orientation.
\layout Quote

<scale>
\newline 
<font>("Helvetica",16)</font>
\newline 
<width>"25"</width>
\newline 
<halpin>"my-hscale"</halpin>
\newline 
<resolution>0.1</resolution>
\newline 
<orient>HORIZONTAL</orient>
\newline 
<min_>-33</min_>
\newline 
<max_>26</max_>
\newline 
</scale>
\layout Quote

<scale>
\newline 
<font>("Helvetica",16)</font>
\newline 
<width>"50"</width>
\newline 
<halpin>"my-vscale"</halpin>
\newline 
<resolution>1</resolution>
\newline 
<orient>VERTICAL</orient>
\newline 
<min_>100</min_>
\newline 
<max_>0</max_>
\newline 
</scale>
\layout Standard
\align center 
The above code produced this example
\layout Standard
\align center 

\begin_inset Graphics
	filename images/pyvcp_scale.png

\end_inset 


\layout Standard

Notice that the default is the min even though it is set higher than max
 unless there is a negative min.
\layout Subsection

Jogwheel
\layout Standard

Jogwheel mimics a real jogwheel by outputting a FLOAT pin which counts up
 or down as the wheel is turned, either by dragging in a circular motion,
 or by rolling the mouse-wheel.
\layout Quote

<jogwheel>
\newline 
    <halpin>"my-wheel"</halpin>
\newline 
    <cpr>45</cpr>
\newline 
    <size>250</size>
\newline 
</jogwheel>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_jogwheel.png
	lyxscale 50
	scale 50

\end_inset 


\layout Section

pyVCP Container reference
\layout Standard

Containers are widgets that contain other widgets.
 
\layout Subsection

Borders
\layout Standard

Container borders are specified with two tags used together.
 The <relief> tag specifies the type of border and the <bd> specifies the
 width of the border.
 
\layout Description

<relief>type</relief> Where "type" is FLAT, SUNKEN, RAISED, GROOVE, or RIDGE
\layout Description

<bd>n</bd> Where "n" is the width of the border.
\layout Quote

<hbox>
\newline 
<button>
\newline 
<relief>FLAT</relief>
\newline 
<text>"FLAT"</text>
\newline 
<bd>3</bd>
\newline 
</button>
\layout Quote

<button>
\newline 
<relief>SUNKEN</relief>
\newline 
<text>"SUNKEN"</text>
\newline 
<bd>3</bd>
\newline 
</button>
\layout Quote

<button>
\newline 
<relief>RAISED</relief>
\newline 
<text>"RAISED"</text>
\newline 
<bd>3</bd>
\newline 
</button>
\layout Quote

<button>
\newline 
<relief>GROOVE</relief>
\newline 
<text>"GROOVE"</text>
\newline 
<bd>3</bd>
\newline 
</button>
\layout Quote

<button>
\newline 
<relief>RIDGE</relief>
\newline 
<text>"RIDGE"</text>
\newline 
<bd>3</bd>
\newline 
</button>
\newline 
</hbox>
\layout Standard
\align center 
The above code produced this example
\layout Standard
\align center 

\begin_inset Graphics
	filename images/pyvcp_borders.png

\end_inset 


\layout Subsection

Hbox
\layout Standard

Use a Hbox when you want to stack widgets horizontally next to each other.
\layout Quote

<hbox>
\newline 
    <label><text>"a vbox:"</text></label>
\newline 
    <led></led>
\newline 
    <number></number>
\newline 
    <bar></bar>
\newline 
</hbox>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_hbox.png

\end_inset 


\layout Standard

Inside a Hbox, you can use the 
\family typewriter 
<boxfill fill=""/>
\family default 
, 
\family typewriter 
<boxanchor anchor=""/>
\family default 
, and 
\family typewriter 
<boxexpand expand=""/>
\family default 
 tags to choose how items in the box behave when the window is re-sized.
 For details of how fill, anchor, and expand behave, refer to the Tk 
\family typewriter 
pack
\family default 
 manual page, 
\family typewriter 
pack(3tk)
\family default 
.
 By default, 
\family typewriter 
fill="y"
\family default 
, 
\family typewriter 
anchor="center"
\family default 
, 
\family typewriter 
expand="yes"
\family default 
.
\layout Subsection

Vbox
\layout Standard

Use a Vbox when you want to stack widgets vertically on top of each other.
\layout Quote

<vbox>
\newline 
    <label><text>"a vbox:"</text></label>
\newline 
    <led></led>
\newline 
    <number></number>
\newline 
    <bar></bar>
\newline 
</vbox>
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_vbox.png

\end_inset 


\layout Standard

Inside a Hbox, you can use the 
\family typewriter 
<boxfill fill=""/>
\family default 
, 
\family typewriter 
<boxanchor anchor=""/>
\family default 
, and 
\family typewriter 
<boxexpand expand=""/>
\family default 
 tags to choose how items in the box behave when the window is re-sized.
 For details of how fill, anchor, and expand behave, refer to the Tk 
\family typewriter 
pack
\family default 
 manual page, 
\family typewriter 
pack(3tk)
\family default 
.
 By default, 
\family typewriter 
fill="x"
\family default 
, 
\family typewriter 
anchor="center"
\family default 
, 
\family typewriter 
expand="yes"
\family default 
.
\layout Subsection

Label
\layout Standard

A label is a piece of text on your panel.
\layout Quote

<label>
\newline 
    <text>"This is a Label:"</text>
\newline 
    <font>("Helvetica",20)</font>
\newline 
</label> 
\layout Standard
\align center 

\begin_inset Graphics
	filename pyvcp_label.png

\end_inset 


\layout Subsection

Labelframe
\layout Standard

A labelframe is a frame with a groove and a label at the upper-left corner.
\layout Quote

<labelframe text="Group Title">
\newline 
\SpecialChar ~
<font>("Helvetica",16)</font>
\newline 
\SpecialChar ~
<hbox>
\newline 
\SpecialChar ~
<led/> <led/>
\newline 
\SpecialChar ~
</hbox>
\newline 
</labelframe>
\layout Standard
\align center 
The above code produced this example
\layout Standard
\align center 

\begin_inset Graphics
	filename images/pyvcp_labelframe.png

\end_inset 


\layout Subsection

Table
\layout Standard

A table is a container that allows layout in a grid of rows and columns.
 Each row is started by a 
\family typewriter 
<tablerow/>
\family default 
 tag.
 A contained widget may span rows or columns through the use of the 
\family typewriter 
<tablespan rows= cols=/>
\family default 
 tag.
 The sides of the cells to which the contained widgets 
\begin_inset Quotes eld
\end_inset 

stick
\begin_inset Quotes erd
\end_inset 

 may be set through the use of the 
\family typewriter 
<tablesticky sticky=/>
\family default 
 tag.
 A table expands on its flexible rows and columns.
\layout Standard

Example:
\layout Quote

<table flexible_rows="[2]" flexible_columns="[1,4]">
\newline 
   <tablesticky sticky="new"/>
\newline 
   <tablerow/>
\newline 
    <label text="A (cell 1,1)"/>
\newline 
    <label text="B (cell 1,2)"/>
\newline 
    <tablespan columns="2"/><label text="C, D (cells 1,3 and 1,4)"/> 
\newline 
   <tablerow/>
\newline 
    <label text="E (cell 2,1)"/>
\newline 
    <tablesticky sticky="nsew"/><tablespan rows="2"/>
\newline 
        <label text="'spans
\backslash 
n2 rows'"/>
\newline 
    <tablesticky sticky="new"/><label text="G (cell 2,3)"/>
\newline 
    <label text="H (cell 2,4)"/>
\newline 
   <tablerow/> 
\newline 
    <label text="J (cell 3,1)"/>
\newline 
    <label text="K (cell 3,2)"/>
\newline 
   <u32 halpin="test"/>
\newline 
</table> 
\layout Quote
\align center 

\begin_inset Graphics
	filename images/pyvcp_table.png
	scale 70

\end_inset 


\layout Subsection

Tabs
\layout Standard

A tabbed interface can save quite a bit of space.
\layout Quote

<tabs>
\newline 
<names> ["spindle","green eggs"]</names>
\newline 
</tabs>
\newline 
<tabs>
\newline 
<names>["Spindle", "Green Eggs", "Ham"]</names>
\newline 
<vbox>
\newline 
<label>
\newline 
<text>"Spindle speed:"</text>
\newline 
</label>
\newline 
<bar>
\newline 
<halpin>"spindle-speed"</halpin>
\newline 
<max_>5000</max_>
\newline 
</bar>
\newline 
</vbox>
\newline 
<vbox>
\newline 
<label>
\newline 
<text>"(this is the green eggs tab)"</text>
\newline 
</label>
\newline 
</vbox>
\newline 
<vbox>
\newline 
<label>
\newline 
<text>"(this tab has nothing on it)"</text>
\newline 
</label>
\newline 
</vbox>
\newline 
</tabs>
\layout Standard

The above code produces the following tabbed display.
\layout Standard
\align center 

\begin_inset Graphics
	filename images/pyvcp_tabs1.png
	scale 70

\end_inset 


\begin_inset Graphics
	filename images/pyvcp_tabs2.png
	scale 70

\end_inset 


\begin_inset Graphics
	filename images/pyvcp_tabs3.png
	scale 70

\end_inset 


\the_end
