#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\begin_preamble
\usepackage[plainpages=false,pdfpagelabels,colorlinks=true,linkcolor=blue]{hyperref}
\end_preamble
\language french
\inputencoding default
\fontscheme bookman
\graphics default
\float_placement !!h
\paperfontsize default
\spacing single 
\papersize letterpaper
\paperpackage a4
\use_geometry 0
\use_amsmath 1
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 5
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language french
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter


\emph on 
comp
\emph default 
: un outil pour créer les modules HAL
\layout Section

Introduction
\layout Standard

Ecrire un composant de HAL peut se révéler être une tâche ennuyeuse, la
 plupart de cette tâche consiste à appeler des fonctions 
\family typewriter 
rtapi_
\family default 
 et 
\family typewriter 
hal_
\family default 
 et à contrôler les erreurs associées à ces fonctions.
 
\emph on 
comp
\emph default 
 va écrire tout ce code pour vous, automatiquement.
\layout Standard

Compiler un composant de HAL est également beaucoup plus simple en utilisant
 
\emph on 
comp
\emph default 
, que le composant fasse partie de l'arborescence d'emc2, ou qu'il en soit
 extérieur.
\layout Standard

Par exemple, cette portion des blocks 
\begin_inset Quotes fld
\end_inset 

ddt
\begin_inset Quotes frd
\end_inset 

 fait environ 80 lignes de code.
 Le composant équivalent est vraiment très court quand il est écrit en utilisant
 le préprocesseur 
\emph on 
comp
\emph default 
:
\layout LyX-Code

component ddt "Calcule la dérivée de la fonction d'entrée";
\newline 
pin in float in;
\newline 
pin out float out;
\newline 
variable float old;
\newline 
function _;
\newline 
license "GPL";
\newline 
;;
\newline 
float tmp = in;
\newline 
out = (tmp - old) / fperiod;
\newline 
old = tmp;
\layout Standard

et il peut être compilé et installé très facilement en plaçant simplement
 
\family typewriter 
ddt.comp
\family default 
 dans 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

src/hal/components
\begin_inset Quotes frd
\end_inset 


\family default 
 puis en lançant 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

make
\family default 

\begin_inset Quotes frd
\end_inset 

, ou en le plaçant quelque part sur le système et en lançant 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

comp --install ddt.comp
\begin_inset Quotes frd
\end_inset 


\layout Section

Définitions
\layout Description

component Un composant est un simple module temps réel, qui se charge avec
 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

halcmd loadrt
\family default 

\begin_inset Quotes frd
\end_inset 

.
 Un fichier 
\family typewriter 
.comp
\family default 
 spécifie un seul composant.
\layout Description

instance Un composant peut avoir zéro ou plusieurs instances.
 Chaque instance d'un composant est créée égale (elles ont toutes les mêmes
 pins, les mêmes paramètres, les mêmes fonctions et les mêmes données) mais
 elle se comporte de manière différente quand leurs pins, leurs paramètres
 et leur données ont des valeurs différentes.
\layout Description

singleton Il est possible pour un composant d'être un 'singleton' (composant
 dont il n'existe qu'une seule instance), dans ce cas, exactement une seule
 instance est créée.
 Il est rarement logique d'écrire un composant 
\family typewriter 
singleton
\family default 
, à moins qu'il n'y ait qu'un seul objet de ce type dans le système (par
 exemple, un composant ayant pour but de fournir une pin avec le temps Unix
 courant, ou un pilote matériel pour le haut parleur interne du PC)
\layout Section

Création d'instance
\layout Standard

Pour un singleton, une seule instance est créée quand le composant est chargé.
\layout Standard

Pour un non-singleton, le paramètre '
\family typewriter 
count
\family default 
' du module détermine combien d'instances seront créées.
\layout Section

Syntaxe
\layout Standard

Un fichier 
\family typewriter 
.comp
\family default 
 commence par un certain nombre de déclarations, puis par un 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

;;
\begin_inset Quotes frd
\end_inset 


\family default 
 seul sur sa propre ligne.
 Il se terminé par le code C implémentant les fonctions du module.
\layout Standard

Déclarations d'include:
\layout Itemize


\family typewriter 
component 
\emph on 
HALNAME
\emph default 
 
\emph on 
(DOC
\emph default 
);
\layout Itemize


\family typewriter 
pin 
\emph on 
PINDIRECTION
\emph default 
 
\emph on 
TYPE
\emph default 
 
\emph on 
HALNAME
\emph default 
 ([
\emph on 
SIZE
\emph default 
]|[
\emph on 
MAXSIZE 
\emph default 
: 
\emph on 
CONDSIZE]
\emph default 
) (if 
\emph on 
CONDITION
\emph default 
) (= 
\emph on 
STARTVALUE
\emph default 
) (
\emph on 
DOC
\emph default 
);
\layout Itemize


\family typewriter 
param 
\emph on 
PARAMDIRECTION
\emph default 
 
\emph on 
TYPE
\emph default 
 
\emph on 
HALNAME
\emph default 
 ([
\emph on 
SIZE
\emph default 
]|[
\emph on 
MAXSIZE 
\emph default 
: 
\emph on 
CONDSIZE]
\emph default 
) (if 
\emph on 
CONDITION) 
\emph default 
(= 
\emph on 
STARTVALUE
\emph default 
) (
\emph on 
DOC
\emph default 
) ;
\layout Itemize


\family typewriter 
function 
\emph on 
HALNAME
\emph default 
 (fp | nofp) (
\emph on 
DOC
\emph default 
);
\layout Itemize


\family typewriter 
option 
\emph on 
OPT
\emph default 
 (
\emph on 
VALUE
\emph default 
);
\layout Itemize


\family typewriter 
variable 
\emph on 
CTYPE NAME 
\emph default 
([
\emph on 
SIZE
\emph default 
]);
\layout Itemize


\family typewriter 
description DOC;
\layout Itemize


\family typewriter 
see_also DOC;
\layout Itemize


\family typewriter 
license LICENSE;
\layout Itemize


\family typewriter 
author AUTHOR;
\layout Standard

Les parenthèses indiquent un item optionnel.
 Une barre verticale indique une alternative.
 Les mots en 
\emph on 
CAPITALES
\emph default 
 indiquent une variable texte, comme ci-dessous:
\layout Description

HALNAME Un identifiant.
\begin_deeper 
\layout Standard

Lorsqu'ils sont utilisés pour créer un identifiant de HAL, tous les caractères
 soulignés sont remplacés par des tirets, tous les points et les virgules
 de fin, sont supprimés, ainsi 
\begin_inset Quotes fld
\end_inset 

ce_nom_
\begin_inset Quotes frd
\end_inset 

 est remplacé par 
\begin_inset Quotes fld
\end_inset 

ce-nom
\begin_inset Quotes frd
\end_inset 

 et si le nom 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

_
\family default 

\begin_inset Quotes frd
\end_inset 

, alors le point final est enlevé aussi, ainsi 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

function _
\family default 

\begin_inset Quotes frd
\end_inset 

 donne un nom de fonction HAL tel que 
\family typewriter 
component.<num>
\family default 
 au lieu de 
\family typewriter 
component.<num>.
\layout Standard

S'il est présent, le préfixe 
\family typewriter 
hal_
\family default 
 est enlevé du début d'un nom de composant pour la création des pins des
 paramètres et des fonctions.
\layout Standard

Dans l'identifiant de HAL pour une pin ou un paramètre, # indique un membre
 de tableau, il doit être utilisé conjointement avec une déclaration 
\family typewriter 
[SIZE]
\family default 
.
 Les 
\begin_inset Quotes fld
\end_inset 

hash marks
\begin_inset Quotes frd
\end_inset 

 sont remplacées par des nombres de 0-barrés équivalents aux nombres de
 caractères #.
\layout Standard

Quand ils sont utilisés pour créer des identifiants C, les changements de
 caractères suivants sont appliqués au HALNAME:
\layout Enumerate

Tous les caractères # sont enlevés ainsi que tous les caractères 
\begin_inset Quotes fld
\end_inset 

.
\begin_inset Quotes frd
\end_inset 

, 
\begin_inset Quotes fld
\end_inset 

_
\begin_inset Quotes frd
\end_inset 

 ou 
\begin_inset Quotes fld
\end_inset 

-
\begin_inset Quotes frd
\end_inset 

 immédiatement devant eux.
\layout Enumerate

Dans un nom, tous les carcatères 
\begin_inset Quotes fld
\end_inset 

.
\begin_inset Quotes frd
\end_inset 

 et 
\begin_inset Quotes fld
\end_inset 

-
\begin_inset Quotes frd
\end_inset 

 sont remplacés par 
\begin_inset Quotes fld
\end_inset 

_
\begin_inset Quotes frd
\end_inset 


\layout Enumerate

Les caractères 
\begin_inset Quotes fld
\end_inset 

_
\begin_inset Quotes frd
\end_inset 

 répétitifs sont remplacés par un seul caractère 
\begin_inset Quotes fld
\end_inset 

_
\begin_inset Quotes frd
\end_inset 

.
\layout Standard

Un 
\begin_inset Quotes fld
\end_inset 

_
\begin_inset Quotes frd
\end_inset 

 final est maintenu, de sorte que les identifiants de HAL, qui autrement
 seraient en conflit avec les noms ou mots clé réservés (par exemple: 
\begin_inset Quotes fld
\end_inset 

min
\begin_inset Quotes frd
\end_inset 

), puissent être utilisés.
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="6" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

HALNAME
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Identifiant C
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Identifiant HAL
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x_y_z
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x_y_z
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x-y-z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x-y.z
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x_y_z
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x-y.z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x_y_z_
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x_y_z_
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x-y-z
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x.##.y
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x_y(MM)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x.MM.z
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x.##
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x(MM)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x.MM
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_deeper 
\layout Description

if\SpecialChar ~
CONDITION Une expression impliquant la 
\emph on 
personnalité
\emph default 
 d'une variable non nulle quand la variable ou le paramètre doit être créé.
\layout Description

SIZE Un nombre donnant la taille d'un tableau.
 Les items des tableaus sont numérotés de 0 à 
\emph on 
SIZE
\emph default 
-1.
\layout Description

MAXSIZE\SpecialChar ~
:\SpecialChar ~
CONDSIZE Un nombre donnant la taille maximum d'un tableau, suivi
 d'une expression impliquant la 
\emph on 
personnalité
\emph default 
 d'une variable et qui aura toujours une valeur inférieure à 
\emph on 
MAXSIZE
\emph default 
.
 Quand le tableau est créé sa taille est égale à 
\emph on 
CONDSIZE
\emph default 
.
\layout Description

DOC Une chaine qui documente l'item.
 La chaine doit être au format C, 
\begin_inset Quotes fld
\end_inset 

entre guillemets
\begin_inset Quotes frd
\end_inset 

, comme 
\family typewriter 
"Sélectionnez le front désiré: TRUE pour descendant, FALSE pour montant"
\family default 
 ou au format Python 
\begin_inset Quotes fld
\end_inset 

triples guillemets
\begin_inset Quotes frd
\end_inset 

, pouvant inclure des caractères newlines et des guillements, comme:
\begin_deeper 
\layout LyX-Code

param rw bit zot=TRUE
\newline 
"""L'effet de ce paramètre, également connu comme "the orb of zot",
\newline 
requiert au moins deux paragraphes d'explications.
\newline 

\newline 
J'espère que ces paragraphes vous ont permis de comprendre "zot" 
\newline 
plus profondément.""";
\layout Standard

La chaine documentation est en format 
\begin_inset Quotes fld
\end_inset 

groff -man
\begin_inset Quotes frd
\end_inset 

.
 Pour plus d'informations sur ce format de markup, voyez 
\family typewriter 
groff_man(7)
\family default 
.
 Souvenez vous que comp interpréte backslash comme Echap dans les chaines,
 ainsi par exemple pour passer le mot 
\emph on 
example
\emph default 
 en font italique, ecrivez 
\family typewriter 

\begin_inset Quotes fld
\end_inset 


\backslash 

\backslash 
fIexample
\backslash 

\backslash 
fB
\family default 

\begin_inset Quotes frd
\end_inset 

.
\end_deeper 
\layout Description

TYPE Un des types de HAL: 
\family typewriter 
bit
\family default 
, 
\family typewriter 
signed (sign
\family default 
é), 
\family typewriter 
unsigned (non sign
\family default 
é) ou 
\family typewriter 
float (flott
\family default 
ant).
 Les anciens noms 
\family typewriter 
s32
\family default 
 et 
\family typewriter 
u32
\family default 
 peuvent encore être utilisés, mais 
\family typewriter 
signed
\family default 
 et 
\family typewriter 
unsigned
\family default 
 sont préférables.
\layout Description

PINDIRECTION Une des ces directions: 
\family typewriter 
in
\family default 
, 
\family typewriter 
out
\family default 
, ou 
\family typewriter 
io
\family default 
.
 Le composant pourra positionner la valeur d'une pin de sortie, il pourra
 lire la valeur sur une pin d'entrée et il pourra lire ou positionner la
 valeur d'une pin 
\family typewriter 
io
\family default 
.
\layout Description

PARAMDIRECTION Une des valeurs suivantes: 
\family typewriter 
r
\family default 
 ou 
\family typewriter 
rw
\family default 
.
 Le composant pourra positionner la valeur d'un paramètre 
\family typewriter 
r
\family default 
 et il pourra positionner ou lire la valeur d'un paramètre rw.
\layout Description

STARTVALUE Spécifie la valeur initiale d'une pin ou d'un paramètre.
 Si il n'est pas spécifié, alors la valeur par défaut est 
\family typewriter 
0
\family default 
 ou 
\family typewriter 
FALSE
\family default 
, selon le type de l'item.
\layout Description

fp Indique que la fonction effectuera ses calculs en virgule flottante.
\layout Description

nofp Indique que la fonction effectuera ses calculs sur des entiers.
 Si il n'est pas spécifié, 
\family typewriter 
fp
\family default 
 est utilisé.
 Ni comp ni gcc ne peuvent détecter l'utilisation de calculs en virgule
 flottante dans les fonctions marquées 
\family typewriter 
nofp
\family default 
.
\layout Description

OPT,\SpecialChar ~
VALUE Selon le nom de l'option OPT, les valeurs VALUE varient.
 Les options actuellement définies sont les suivantes:
\begin_deeper 
\layout Description

option\SpecialChar ~
singleton\SpecialChar ~
yes (défaut: no)
\begin_deeper 
\layout Standard

Ne crée pas le paramètre numéro de module et crée toujours une seule instance.
 Avec 
\family typewriter 
singleton
\family default 
, les items sont nommés 
\family typewriter 
composant-name.item-name
\family default 
 et sans 
\family typewriter 
singleton
\family default 
, les items des différentes instances sont nommés 
\family typewriter 
composant-name.<num>.item-name
\family default 
.
\end_deeper 
\layout Description

option\SpecialChar ~
default_count\SpecialChar ~

\emph on 
number
\emph default 
 (défaut: 1)
\begin_deeper 
\layout Standard

Normalement, le paramètre 
\family typewriter 
count par
\family default 
 défaut est 0.
 Si spécifié, 
\family typewriter 
count
\family default 
 remplace la valeur par défaut.
\end_deeper 
\layout Description

option\SpecialChar ~
count_function\SpecialChar ~
yes (défaut: no)
\begin_deeper 
\layout Standard

Normalement, le numéro des instances à créer est specifié dans le paramètre
 
\family typewriter 
count
\family default 
 du module, si 
\family typewriter 
count_function
\family default 
 est spécifié, la valeur retournée par la fonction 
\family typewriter 
int get_count(void)
\family default 
 est utilisée à la place de la valeur par défaut et le paramètre 
\family typewriter 
count
\family default 
 du module n'est pas défini.
\end_deeper 
\layout Description

option\SpecialChar ~
rtapi_app\SpecialChar ~
no (défaut: yes)
\begin_deeper 
\layout Standard

Normalement, les fonctions 
\family typewriter 
rtapi_app_main
\family default 
 et 
\family typewriter 
rtapi_app_exit
\family default 
 sont définies automatiquement.
 Avec 
\family typewriter 
option rtapi_app no
\family default 
, elles ne le seront pas et doivent être fournies dans le code C.
\layout Standard

Quand vous implémentez votre propre 
\family typewriter 
rtapi_app_main
\family default 
, appellez la fonction 
\family typewriter 
int export(char *prefix, long extra_arg)
\family default 
 pour enregistrer les pins, paramètres et fonctions pour 
\family typewriter 
préfix
\family default 
er.
\end_deeper 
\layout Description

option\SpecialChar ~
data\SpecialChar ~

\emph on 
type
\emph default 
 (défaut: none) 
\series bold 
\noun on 
deprecated
\begin_deeper 
\layout Standard

If specified, each instance of the component will have an associated data
 block of 
\emph on 
type
\emph default 
 (which can be a simple type like 
\family typewriter 
float
\family default 
 or the name of a type created with 
\family typewriter 
typedef
\family default 
).
\layout Standard

In new components, 
\emph on 
variable
\emph default 
 should be used instead.
\end_deeper 
\end_deeper 
\layout Description

option\SpecialChar ~
extra_setup\SpecialChar ~
yes (défaut: no)
\begin_deeper 
\begin_deeper 
\layout Standard

Si spécifié, appelle la fonction définie par 
\family typewriter 
EXTRA_SETUP
\family default 
 pour chaque instance.
 Si la définition automatique 
\family typewriter 
rtapi_app_main
\family default 
 est utilisée, 
\family typewriter 
extra_arg
\family default 
 est le numéro de cette instance.
 
\end_deeper 
\layout Description

option\SpecialChar ~
extra_cleanup\SpecialChar ~
yes (défaut: no)
\begin_deeper 
\layout Standard

Si spécifié, appelle la fonction définie par 
\family typewriter 
EXTRA_CLEANUP
\family default 
 depuis la fonction définie automatiquement 
\family typewriter 
rtapi_app_exit
\family default 
, ou une erreur est détectée dans la fonction automatiquement définie 
\family typewriter 
rtapi_app_main
\family default 
.
\end_deeper 
\layout Description

option\SpecialChar ~
userspace\SpecialChar ~
yes (défaut: no)
\begin_deeper 
\layout Standard

Si spécifié, ce fichier décrit un composant d'espace utilisateur, plutôt
 que le réel.
 Un composant d'espace utilisateur peut ne pas avoir de fonction définie
 par la directive de fonction.
 Au lieu de cela, après que toutes les instances soient construites, la
 fonction C 
\family typewriter 
user_mainloop()
\family default 
 est appelée.
 Dès la fin de cette fonction, le composant se termine.
 En règle générale, 
\family typewriter 
user_mainloop()
\family default 
 va utiliser 
\family typewriter 
FOR_ALL_INSTS()
\family default 
 pour effectuer la mise à  jour pour chaque action, puis attendre un court
 instant.
 Une autre action commune dans 
\family typewriter 
user_mainloop()
\family default 
 peut être d'appeler le gestionnaire de boucles d'événements d'une interface
 graphique.
\end_deeper 
\layout Description

option\SpecialChar ~
userinit\SpecialChar ~
yes (défaut: no)
\begin_deeper 
\layout Standard

Si spécifiée, la fonction 
\family typewriter 
userinit(argc,argv)
\family default 
 est appelée avant 
\family typewriter 
rtapi_app_main()
\family default 
 (et cela avant l'appel de 
\family typewriter 
hal_init()
\family default 
).
 Cette fonction peut traiter les arguments de la ligne de commande ou exécuter
 d'autres actions.
 Son type de retour est 
\family typewriter 
void
\family default 
; elle peut appeler 
\family typewriter 
exit()
\family default 
 et si elle le veut, se terminer sans créer de composant HAL (par exemple,
 parce que les arguments de la ligne de commande sont invalides).
\end_deeper 
\layout Standard

Si aucune option VALUE n'est spécifiée, alors c'est équivalent à spécifier
 la valeur
\family typewriter 
\SpecialChar \ldots{}
 yes
\family default 
.
 Le résultat consécutif à l'assignation d'une valeur inappropriée à une
 option est indéterminé.
 Le résultat consécutif à n'utiliser aucune autre option est indéfini.
\end_deeper 
\layout Description

LICENSE Spécifie la license du module, pour la documentation et pour le
 module déclaré dans MODULE_LICENSE().
\layout Description

AUTHOR Spécifie l'auteur du module, pour la documentation
\layout Section

Stockage des données 
\begin_inset Quotes fld
\end_inset 

par-instance
\begin_inset Quotes frd
\end_inset 


\layout Description

variable\SpecialChar ~

\emph on 
CTYPE\SpecialChar ~
NAME
\emph default 
;
\layout Description

variable\SpecialChar ~

\emph on 
CTYPE\SpecialChar ~
NAME
\emph default 
[
\emph on 
SIZE
\emph default 
];
\layout Description

variable\SpecialChar ~

\emph on 
CTYPE\SpecialChar ~
NAME
\emph default 
\SpecialChar ~
=\SpecialChar ~

\emph on 
default
\emph default 
;
\layout Description

variable\SpecialChar ~

\emph on 
CTYPE\SpecialChar ~
NAME
\emph default 
[
\emph on 
SIZE
\emph default 
]\SpecialChar ~
=\SpecialChar ~

\emph on 
default
\emph default 
;
\begin_deeper 
\layout Standard

Déclare la variable 
\begin_inset Quotes fld
\end_inset 

par-instance
\begin_inset Quotes frd
\end_inset 

 
\emph on 
NAME
\emph default 
 de type 
\emph on 
CTYPE
\emph default 
, optionnellement comme un tableau de 
\emph on 
SIZE
\emph default 
 items et optionnellement avec une valeur default.
 Les items sans 
\emph on 
default
\emph default 
 sont initialisés 
\begin_inset Quotes fld
\end_inset 

all-bits-zero
\begin_inset Quotes frd
\end_inset 

.
 
\emph on 
CTYPE
\emph default 
 est un simple mot de type C, comme 
\family typewriter 
float
\family default 
, 
\family typewriter 
u32
\family default 
, 
\family typewriter 
s32
\family default 
, etc.
\newline 
Les variables d'un tableau sont mises entre crochets.
\end_deeper 
\layout Standard

Les commentaires de style C++ une ligne (
\family typewriter 
// \SpecialChar \ldots{}

\family default 
) et de style C multi-lignes (
\family typewriter 
/* \SpecialChar \ldots{}
 */
\family default 
) sont supportés tous les deux dans la section déclaration.
\layout Section

Autres restrictions sur les fichiers comp
\layout Standard

Bien que HAL permette à une pin, un paramètre et une fonction d'avoir le
 même nom, comp ne le permet pas.
\layout Section

Conventions des macros
\layout Standard

En se basant sur les déclarations des items de section, 
\emph on 
comp
\emph default 
 crée une structure C appellée 
\family typewriter 
structure d'état
\family default 
.
 Cependant, au lieu de faire référence aux membres de cette structure (par
 exemple: 
\family typewriter 
*(inst->name)
\family default 
), il leur sera généralement fait référence en utilisant les macros ci-dessous.
 Certains détails de la structure d'état et de ces macros peuvent différer
 d'une version de 
\emph on 
comp
\emph default 
 à la suivante.
\layout Description

FUNCTION(name) Cette macro s'utilise au début de la définition d'une fonction
 temps réel qui aura été précédemment déclarée avec '
\family typewriter 
function NAME
\family default 
'.
 function inclus un paramètre '
\family typewriter 
period
\family default 
' qui est le nombre entier de nanosecondes entre les appels à la fonction.
\layout Description

EXTRA_SETUP() Cette macro s'utilise au début de la définition de la fonction
 appelée pour exécuter les réglages complémentaires à cette instance.
 Une valeur de retour négative (Unix 
\family typewriter 
errno)
\family default 
 indique un défaut (par exemple: 
\family typewriter 
elle retourne -EBUSY
\family default 
 comme défaut à la réservation d'un port d'entrées/sorties), une valeur
 égale à 0 indique le succés.
\layout Description

EXTRA_CLEANUP() Cette macro s'utilise au début de la définition de la fonction
 appelée pour exécuter un nettoyage (cleanup) du composant.
 Noter que cette fonction doit nettoyer toutes les instances du composant,
 pas juste un.
 Les macros 'pin_name', 'parameter_name' et 'data' ne doivent pas être utilisées
 ici.
\layout Description


\emph on 
pin_name
\layout Description


\emph on 
parameter_name
\emph default 
 Pour chaque pin, 
\family typewriter 
pin_name
\family default 
 ou pour chaque paramètre, 
\family typewriter 
parameter_name
\family default 
 il y a une macro qui permet d'utiliser le nom seul pour faire référence
 à la pin ou au paramètre.
\begin_deeper 
\layout Standard

Quand 
\family typewriter 
pin_name
\family default 
 ou 
\family typewriter 
parameter_name
\family default 
 sont des tableaux, la macro est de la forme 
\emph on 
pin_name(idx)
\emph default 
 ou 
\emph on 
param_name(idx) 
\emph default 
dans laquelle 
\emph on 
idx
\emph default 
 est l'index dans le tableau de pins.
 Quand le tableau est de taille variable, il est seulement légal de faire
 référence aux items par leurs 
\emph on 
condsize
\emph default 
.
\layout Standard

Quand un item est conditionnel, il est seulement légal de faire référence
 à cet item quand ses 
\emph on 
conditions 
\emph default 
sont évaluées
\emph on 
 
\emph default 
à des valeurs différentes de zéro.
\end_deeper 
\layout Description


\emph on 
variable_name 
\emph default 
Pour chaque variable, 
\family typewriter 
il y a une macro variable_name
\family default 
 qui permet au nom seul d'être utilisé pour faire référence à la variable.
 Quand 
\family typewriter 
variable_name
\family default 
 est un tableau, le style normal de C est utilisé: 
\emph on 
variable_name[idx]
\layout Description

data Si l'
\begin_inset Quotes fld
\end_inset 

option data
\begin_inset Quotes frd
\end_inset 

 est spécifiée, cette macro permet l'accès à l'instance de la donnée.
\layout Description

fperiod Le nombre de secondes en virgule flottante entre les appels à cette
 fonction temps réel.
\layout Description

FOR_ALL_INSTS()\SpecialChar ~
{
\family typewriter 
\SpecialChar \ldots{}

\family default 
} Pour les composants de l'espace utilisateur.
 Cette macro utilise la variable 
\family typewriter 
struct state *inst
\family default 
 pour itérer au dessus de toutes les instances définies.
 Dans le corps de la boucle, les macros 
\series bold 
\emph on 
pin_name
\series default 
\emph default 
, 
\series bold 
\emph on 
parameter_name
\series default 
\emph default 
 et 
\series bold 
data
\series default 
 travaillent comme elles le font dans les fonctions temps réel.
\layout Section

Composants avec une seule fonction
\layout Standard

Si un composant a seulement une fonction et que la chaine 
\begin_inset Quotes fld
\end_inset 

FUNCTION
\begin_inset Quotes frd
\end_inset 

 n'apparaît nulle part après 
\family typewriter 
;;
\family default 
, alors la portion après 
\family typewriter 
;;
\family default 
 est considérée comme étant le corps d'un composant simple fonction.
\layout Section


\begin_inset Quotes fld
\end_inset 

Personnalité
\begin_inset Quotes frd
\end_inset 

 du composant
\layout Standard

Si un composant a n'importe combien de pins ou de paramètres avec un 
\begin_inset Quotes fld
\end_inset 

if 
\emph on 
condition
\emph default 

\begin_inset Quotes frd
\end_inset 

 ou 
\begin_inset Quotes fld
\end_inset 

[
\emph on 
maxsize : condsize
\emph default 
]
\begin_inset Quotes frd
\end_inset 

, il est appelé un composant avec 
\emph on 

\begin_inset Quotes fld
\end_inset 

personnalit
\emph default 
é
\begin_inset Quotes frd
\end_inset 

.
 La 
\begin_inset Quotes fld
\end_inset 

personnalité
\begin_inset Quotes frd
\end_inset 

 de chaque instance est spécifiée quand le module est chargé.
 La 
\begin_inset Quotes fld
\end_inset 

Personnalité
\begin_inset Quotes frd
\end_inset 

 peut être utilisée pour créer les pins seulement quand c'est nécessaire.
 Par exemple, la personnalité peut être utilisée dans un composant logique,
 pour donner un nombre variable de broches d'entrée à chaque porte logique
 et permettre la sélection de n'importe quelle fonction de logique booléenne
 de base 
\series bold 
and
\series default 
, 
\series bold 
or
\series default 
 et 
\series bold 
xor
\series default 
.
\layout Section

Compiler un fichier 
\family typewriter 
.comp
\family default 
 dans l'arborescence
\layout Standard

Placer le fichier 
\family typewriter 
.comp
\family default 
 dans le répertoire 
\family typewriter 
emc2/src/hal/components
\family default 
 et lancer/relancer 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

make
\family default 

\begin_inset Quotes frd
\end_inset 

.
 
\family typewriter 
Les fichiers Comp
\family default 
 sont automatiquement détectés par le système de compilation.
\layout Standard

Si un fichier 
\family typewriter 
.comp
\family default 
 est un pilote de périphérique, il peut être placé dans 
\family typewriter 
emc2/src/hal/components
\family default 
 et il y sera construit excepté si emc2 est configuré en mode simulation.
\layout Section

Compiler un composant temps réel hors de l'arborescence
\begin_inset LatexCommand \label{sec:Compiler-composants-rt}

\end_inset 


\layout Standard


\family typewriter 
comp
\family default 
 peut traiter, compiler et installer un composant temps réel en une seule
 étape, en plaçant 
\family typewriter 
rtexample.ko
\family default 
 dans le répertoire du module temps réel d'emc2:
\layout LyX-Code

comp --install rtexample.comp
\layout Standard

Ou il peut aussi être traité et compilé en une seule étape en laissant 
\family typewriter 
example.ko
\family default 
 (ou 
\family typewriter 
example.so
\family default 
 pour la simulation) dans le répertoire courant:
\layout LyX-Code

comp --compile rtexample.comp
\layout Standard

Ou il peut simplement être traité en laissant 
\family typewriter 
example.c
\family default 
 dans le répertoire courant:
\layout LyX-Code

comp rtexample.comp
\layout Standard


\family typewriter 
comp
\family default 
 peut aussi compiler et installer un composant écrit en C, en utilisant
 
\family typewriter 
les options --install
\family default 
 et 
\family typewriter 
--compile
\family default 
 comme ci-dessous:
\layout LyX-Code

comp --install rtexample2.c
\layout Standard

La documentation au format man peut être créée à partir des informations
 de la section 
\begin_inset Quotes fld
\end_inset 

declaration
\begin_inset Quotes frd
\end_inset 

:
\layout LyX-Code

comp --document rtexample.comp
\layout Standard

La manpage résultante, 
\family typewriter 
exemple.9
\family default 
 peut être lue avec:
\layout LyX-Code

man ./exemple.9
\layout Standard

ou copiée à un emplacement standard pour une page de manuel.
\layout Section

Compiler un composant de l'espace utilisateur hors de l'arborescence
\layout Standard


\family typewriter 
comp
\family default 
 peut traiter, compiler et installer un document de l'espace utilisateur:
\layout LyX-Code

comp usrexample.comp
\newline 
comp --compile usrexample.comp
\newline 
comp --install usrexample.comp
\newline 
comp --document usrexample.comp
\layout Standard

Cela fonctionne seulement pour les fichiers 
\family typewriter 
.comp
\family default 
 mais pas pour les fichiers 
\family typewriter 
.c
\family default 
.
\layout Section

Exemples
\layout Subsection

constant
\layout Standard

Ce composant fonctionne comme dans 'blocks', y compris la valeur par défaut
 à 1.0.
 La déclaration 
\begin_inset Quotes fld
\end_inset 

function _
\begin_inset Quotes frd
\end_inset 

 crée les fonctions nommées 'constant.0', etc.
\layout LyX-Code

component constant;
\newline 
pin out float out;
\newline 
param r float value = 1.0;
\newline 
function _;
\newline 
;;
\newline 
FUNCTION(_) { out = value; }
\layout Subsection

sincos
\layout Standard

Ce composant calcule le sinus et le cosinus d'un angle entré en radians.
 Il a différentes possibilités comme les sorties 'sinus' et 'cosinus' de
 siggen, parceque l'entrée est un angle au lieu d'être librement basé sur
 un paramètre 'frequency'.
\layout Standard

Les pins sont déclarées avec les noms 
\family typewriter 
sin_
\family default 
 et 
\family typewriter 
cos_
\family default 
 dans le code source pour que ça n'interfère pas avec les fonctions 
\family typewriter 
sin()
\family default 
 et 
\family typewriter 
cos()
\family default 
.
 Les pins de HAL sont toujours appelées 
\family typewriter 
sincos.<num>.sin
\family default 
.
\layout LyX-Code

component sincos;
\newline 
pin out float sin_;
\newline 
pin out float cos_;
\newline 
pin in float theta;
\newline 
function _;
\newline 
;;
\newline 
#include <rtapi_math.h>
\newline 
FUNCTION(_) { sin_ = sin(theta); cos_ = cos(theta); }
\layout Subsection

out8
\layout Standard

Ce composant est un pilote pour une carte imaginaire appelée 
\begin_inset Quotes fld
\end_inset 

out8
\begin_inset Quotes frd
\end_inset 

, qui a 8 pins de sortie digitales qui sont traitées comme une simple valeur
 sur 8 bits.
 Il peut y avoir un nombre quelconque de ces cartes dans le système et elles
 peuvent avoir des adresses variées.
 La pin est appelée 
\family typewriter 
out_
\family default 
 parceque 
\family typewriter 
out
\family default 
 est un identifiant utilisé dans 
\family typewriter 
<asm/io.h>
\family default 
.
 Il illustre l'utilisation de 
\family typewriter 
EXTRA_SETUP
\family default 
 et de 
\family typewriter 
EXTRA_CLEANUP
\family default 
 pour sa requête de région d'entrées/sorties et libère cette région en cas
 d'erreur ou quand le module est déchargé.
\layout LyX-Code


\begin_inset Include \verbatiminput{out8.comp}
preview false

\end_inset 


\layout Subsection

hal_loop
\layout LyX-Code

component hal_loop;
\newline 
pin out float example;
\layout Standard

Ce fragment de composant illustre l'utilisation du préfixe 
\family typewriter 
hal_
\family default 
 dans un nom de composant.
 
\family typewriter 
loop
\family default 
 est le nom d'un module standard du kernel Linux, donc un composant 
\family typewriter 
loop
\family default 
 ne pourrait pas être chargé si le module loop de Linux est également présent.
\layout Standard

Quand il le charge, 
\family typewriter 
halcmd montre un
\family default 
 composant appelé 
\family typewriter 
hal_loop
\family default 
.
 Cependant, les pins affichées par 
\family typewriter 
halcmd
\family default 
 sont 
\family typewriter 
loop.0.example
\family default 
 et non 
\family typewriter 
hal-loop.0.example
\family default 
.
\layout Subsection

arraydemo
\layout Standard

Ce composant temps réel illustre l'utilisation d'un tableau de taille fixe:
\layout LyX-Code

component arraydemo "Registre à décalage 4-bits";
\newline 
pin in bit in;
\newline 
pin out bit out-# [4];
\newline 
function _ nofp;
\newline 
;;
\newline 
int i; 
\newline 
for(i=3; i>0; i--) out(i) = out(i-1); 
\newline 
out(0) = in;
\layout Subsection

rand
\layout Standard

Ce composant de l'espace utilisateur modifie la valeur de ses pins de sortie
 vers une nouvelle valeur aléatoire dans l'étendue 
\begin_inset Formula $[0,1)$
\end_inset 

 à chaque ms.
\layout LyX-Code


\begin_inset Include \verbatiminput{rand.comp}
preview false

\end_inset 


\layout Subsubsection

logic
\layout Standard

Ce composant temps réel montre l'utilisation de la 
\begin_inset Quotes fld
\end_inset 

personnalité
\begin_inset Quotes frd
\end_inset 

 pour créer un tableau de taille variable et des pins optionnelles.
\layout LyX-Code


\begin_inset Include \verbatiminput{../../../src/hal/components/logic.comp}
preview false

\end_inset 


\layout Standard

Une ligne de chargement typique pourrait être:
\layout LyX-Code

loadrt logic count=3 personality=0x102,0x305,0x503
\layout Standard

qui créerait les pins suivantes:
\layout Itemize

Une porte AND à 2 entrées: logic.0.and, logic.0.in-00, logic.0.in-01
\layout Itemize

des portes AND et OR à 5 entrées: logic.1.and, logic.1.or, logic.1.in-00, logic.1.in-01,
 logic.1.in-02, logic.1.in-03, logic.1.in-04, 
\layout Itemize

des portes AND et XOR à 3 entrées: logic.2.and, logic.2.xor, logic.2.in-00, logic.2.in-0
1, logic.2.in-02
\the_end
