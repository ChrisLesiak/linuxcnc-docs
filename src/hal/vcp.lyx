#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\begin_preamble
\usepackage[plainpages=false,pdfpagelabels,colorlinks=true,linkcolor=blue]{hyperref}
\end_preamble
\language english
\inputencoding default
\fontscheme bookman
\graphics default
\float_placement !htbp
\paperfontsize default
\spacing single 
\papersize letterpaper
\paperpackage a4
\use_geometry 1
\use_amsmath 1
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 1
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

Virtual Control Panels
\layout Section

Introduction
\layout Standard

Traditional machine control panels are large sheets of steel with pushbuttons,
 knobs, lights and sometimes meters mounted on them.
 They have many advantages - the buttons are far more rugged than a computer
 keyboard, and large enough that you can usually operate the correct one
 by feel while looking elsewhere, for example at the tool.
 However, they also have disadvantages.
 The occupy a lot of panel space, they are expensive, and wiring them into
 the PC can use up a lot of I/O pins.
 That is where Virtual Control Panels come in.
\layout Standard

A Virtual Control Panel (VCP) is a window on the computer screen with buttons,
 meters, switches, etc.
 When you click on a VCP button, it changes the state of a HAL pin, exactly
 as if you had pressed a physical button wired to an input pin on an I/O
 card.
 Likewise, a VCP LED lights up when a HAL pin goes true, just like a physical
 indicator lamp wired to an output pin on an I/O card.
 Virtual control panels are not intended to replace physical panels - sometimes
 there is just no substiture for a big rugged oil-tight pushbutton.
 But virtual panels can be used for testing or monitoring things that don't
 require physical buttons and lights, to temporarily replace real I/O devices
 while debugging ladder logic, or perhaps to simulate a physical panel before
 you build it and wire it to an I/O board.
\layout Standard

Currently there are two VCP implementations included with EMC2: The older,
 simply named VCP, which used GTK widgets, and the newer, called pyVCP,
 which uses Tkinter widgets.
\layout Section

pyVCP
\layout Standard

The layout of a pyVCP panel is specified with an XML file that contains
 widget tags between <pyvcp> and </pyvcp>.
 For example:
\layout LyX-Code

<pyvcp>
\layout LyX-Code

    <label>
\layout LyX-Code

        <text>
\begin_inset Quotes erd
\end_inset 

This is a LED indicator
\begin_inset Quotes erd
\end_inset 

</text>
\layout LyX-Code

    </label>
\layout LyX-Code

    <led>
\layout LyX-Code

    </led>
\layout LyX-Code

</pyvcp>
\layout LyX-Code

\layout LyX-Code


\begin_inset Graphics
	filename pyvcp_mypanel.png

\end_inset 


\layout Standard

If you place this text in a file called tiny.xml, and run 
\layout LyX-Code

pyvcp -c mypanel tiny.xml
\layout Standard

pyVCP will create the panel for you, which includes two widgets, a Label
 with the text 
\begin_inset Quotes eld
\end_inset 

This is a LED indicator
\begin_inset Quotes erd
\end_inset 

, and a LED, used for displaying the state of a HAL BIT signal.
 It will also create a HAL component named 
\begin_inset Quotes eld
\end_inset 

mypanel
\begin_inset Quotes erd
\end_inset 

 (all widgets in this panel are connected to pins that start with 
\begin_inset Quotes eld
\end_inset 

mypanel.
\begin_inset Quotes erd
\end_inset 

).
 Since no <halpin> tag was present inside the <led> tag, pyVCP will automaticall
y name the HAL pin for the LED widget mypanel.led.0
\layout Standard

For a list of widgets and their tags and options, see the widget reference
 below.
\layout Standard

Once you have created your panel, connecting HAL signals to and form the
 pyVCP pins is done with 'halcmd linksp' as usual.
 If you are new to HAL, the HAL Tutorial
\begin_inset LatexCommand \ref{cha:HAL-Tutorial}

\end_inset 

 is recommended.
\layout Section

Using pyVCP with AXIS
\layout Standard

Since AXIS uses the same GUI toolkit (Tkinter) as pyVCP, it is possible
 to include a pyVCP panel on the right side of the normal AXIS user interface.
 A typical example is explained below.
\layout Standard

Place your pyVCP XML file describing the panel in the same directory where
 your .ini file is.
 Say we we want to display the current spindle speed using a Bar widget.
 Place the following in a file called spindle.xml:
\layout LyX-Code

<pyvcp>
\layout LyX-Code

    <label>
\layout LyX-Code

        <text>
\begin_inset Quotes erd
\end_inset 

Spindle speed:
\begin_inset Quotes erd
\end_inset 

</text>
\layout LyX-Code

    </label>
\layout LyX-Code

    <bar>
\layout LyX-Code

        <halpin>
\begin_inset Quotes erd
\end_inset 

spindle-speed
\begin_inset Quotes erd
\end_inset 

</halpin>
\layout LyX-Code

        <endval>5000</endval>
\layout LyX-Code

    </bar>
\layout LyX-Code

</pyvcp>
\layout LyX-Code

\layout Standard

Here we've made a panel with a Label and a Bar widget, specified that the
 HAL pin connected to the Bar should be named 
\begin_inset Quotes eld
\end_inset 

spindle-speed
\begin_inset Quotes erd
\end_inset 

, and set the maximum value of the bar to 5000 (see widget reference below
 for all options).
 To make AXIS aware of this file, and call it at startup, we need to specify
 the following in the [DISPLAY] section of the .ini file:
\layout LyX-Code

PYVCP = spindle.xml
\layout Standard

To make our widget actually display the spindle-speed it needs to be hooked
 up to the appropriate HAL signal.
 A .hal file that will be run once AXIS and pyVCP have started can be specified
 in the [HAL] section of the .ini file:
\layout LyX-Code

POSTGUI_HALFILE = spindle_to_pyvcp.hal
\layout Standard

This change will run the HAL commands specified in 
\begin_inset Quotes eld
\end_inset 

spindle_to_pyvcp.hal
\begin_inset Quotes erd
\end_inset 

.
 In our example the contents could look like this:
\layout LyX-Code

linksp spindle-rpm-filtered  pyvcp.spindle-speed
\layout Standard

assuming that a singlal called 
\begin_inset Quotes eld
\end_inset 

spindle-rpm-filtered
\begin_inset Quotes erd
\end_inset 

 already exists.
 Note that when running together with AXIS, all pyVCP widget HAL pins have
 names that start with 
\begin_inset Quotes eld
\end_inset 

pyvcp.
\begin_inset Quotes erd
\end_inset 

.
\layout Standard


\begin_inset Graphics
	filename pyvcp_AXIS.png
	lyxscale 50
	scale 50

\end_inset 


\layout Standard

This is what the newly created pyVCP panel should look like in AXIS.
\layout Section

pyVCP Widget reference
\layout Standard

HAL signals come in two variants, BIT and FLOAT.
 pyVCP can either display the value of the signal with an indicator widget,
 or modify the signal value with a control widget.
 Thus there are four classes of pyVCP widgets that you can connect to a
 HAL signal.
 A fifth class of helper widgets allow you to organize and label your panel.
\layout List
\labelwidthstring 00.00.0000

1.
 Widgets for indicating BIT signals: LED
\layout List
\labelwidthstring 00.00.0000

2.
 Widgets for controlling BIT signals: Button, Checkbutton, Radiobutton
\layout List
\labelwidthstring 00.00.0000

3.
 Widgets for indicating FLOAT signals: Number, Bar, Meter
\layout List
\labelwidthstring 00.00.0000

4.
 Widgets for controlling FLOAT signals: Spinbox, Scale, Jogwheel
\layout List
\labelwidthstring 00.00.0000

5.
 Helper widgets: Hbox, Vbox, Label
\layout Subsection

Syntax
\layout Standard

Each widget is described briefly, followed by the markup used, and a screenshot.
 Tags in brackets [ ] are optional, and comments in parenthesis ( ) should
 not be included in the final file.
\layout Subsection

LED
\layout Standard

A LED is used to indicate the status of a BIT signal.
 The LED color will be on_color when the BIT signal is true, and off_color
 otherwise.
\layout LyX-Code

<led>
\layout LyX-Code

    [ <halpin>
\begin_inset Quotes erd
\end_inset 

my-led
\begin_inset Quotes erd
\end_inset 

</halpin> ]          (default is led.n)
\layout LyX-Code

    [ <size>50</size> ]                      (default is 20)
\layout LyX-Code

    [ <on_color>
\begin_inset Quotes erd
\end_inset 

blue
\begin_inset Quotes erd
\end_inset 

</on_color> ]        (default is 
\begin_inset Quotes eld
\end_inset 

green
\begin_inset Quotes erd
\end_inset 

)
\layout LyX-Code

    [ <off_color>
\begin_inset Quotes erd
\end_inset 

black
\begin_inset Quotes erd
\end_inset 

</off_color> ]     (default is 
\begin_inset Quotes eld
\end_inset 

red
\begin_inset Quotes erd
\end_inset 

)
\layout LyX-Code

</led>
\layout Standard

see the example above for a screenshot of a LED.
\layout Subsection

Button
\layout Standard

A button is used to control a BIT pin.
 The pin will be set True when the button is pressed and held down, and
 will be set False when the button is released.
\layout LyX-Code

<button>
\layout LyX-Code

    [ <halpin>
\begin_inset Quotes erd
\end_inset 

my-button
\begin_inset Quotes erd
\end_inset 

</halpin> ]          (default is button.n)
\layout LyX-Code

    [ <text>
\begin_inset Quotes erd
\end_inset 

ON
\begin_inset Quotes erd
\end_inset 

</text> ]                           (default is an empty string 
\begin_inset Quotes eld
\end_inset 


\begin_inset Quotes erd
\end_inset 

)
\layout LyX-Code

</button>
\layout LyX-Code

\layout LyX-Code


\begin_inset Graphics
	filename pyvcp_button.png

\end_inset 


\layout Subsection

Checkbutton
\layout Standard

A checkbutton controls a BIT pin.
 The pin will be set True when the button is checked, and false when the
 button is unchecked.
\layout LyX-Code

<checkbutton>
\layout LyX-Code

    [ <halpin>
\begin_inset Quotes erd
\end_inset 

my-checkbox
\begin_inset Quotes erd
\end_inset 

</halpin> ]          (default is checkbutton.n)
\layout LyX-Code

</checkbutton>
\layout Standard

An unchecked checkbutton: 
\begin_inset Graphics
	filename pyvcp_checkbutton1.png

\end_inset 

 , and a checked one: 
\begin_inset Graphics
	filename pyvcp_checkbutton2.png

\end_inset 


\layout Subsection

Radiobutton
\layout Standard

A radiobutton will set one of a number of BIT pins true.
 The other pins are set false.
\layout LyX-Code

<radiobutton>                   
\layout LyX-Code

    <choices>["one","two","three"]</choices> 
\layout LyX-Code

    [ <halpin>"my-radio"</halpin> ]          (defalut is radiobutton.n)
\layout LyX-Code

</radiobutton>
\layout LyX-Code

\layout LyX-Code


\begin_inset Graphics
	filename pyvcp_radiobutton.png

\end_inset 


\layout Standard

Note that the HAL pins in the example above will me named my-radio.one, my-radio.t
wo, and my-radio.three
\the_end
