#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\begin_preamble
\usepackage[plainpages=false,pdfpagelabels,colorlinks=true,linkcolor=blue]{hyperref}
\end_preamble
\language english
\inputencoding default
\fontscheme bookman
\graphics default
\float_placement !htbp
\paperfontsize default
\spacing single 
\papersize letterpaper
\paperpackage a4
\use_geometry 1
\use_amsmath 1
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 1
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

Virtual Control Panels
\layout Section

Introduction
\layout Standard

Traditional machine control panels are large sheets of steel with pushbuttons,
 knobs, lights and sometimes meters mounted on them.
 They have many advantages - the buttons are far more rugged than a computer
 keyboard, and large enough that you can usually operate the correct one
 by feel while looking elsewhere, for example at the tool.
 However, they also have disadvantages.
 The occupy a lot of panel space, they are expensive, and wiring them into
 the PC can use up a lot of I/O pins.
 That is where Virtual Control Panels come in.
\layout Standard

A Virtual Control Panel (VCP) is a window on the computer screen with buttons,
 meters, switches, etc.
 When you click on a VCP button, it changes the state of a HAL pin, exactly
 as if you had pressed a physical button wired to an input pin on an I/O
 card.
 Likewise, a VCP LED lights up when a HAL pin goes true, just like a physical
 indicator lamp wired to an output pin on an I/O card.
 Virtual control panels are not intended to replace physical panels - sometimes
 there is just no substiture for a big rugged oil-tight pushbutton.
 But virtual panels can be used for testing or monitoring things that don't
 require physical buttons and lights, to temporarily replace real I/O devices
 while debugging ladder logic, or perhaps to simulate a physical panel before
 you build it and wire it to an I/O board.
\layout Standard

Currently there are two VCP implementations included with EMC2: The older,
 simply named VCP, which used GTK widgets, and the newer, called pyVCP,
 which uses Tkinter widgets.
\layout Section

pyVCP
\layout Standard

The layout of a pyVCP panel is specified with an XML file that contains
 widget tags between <pyvcp> and </pyvcp>.
 For example:
\layout LyX-Code

<pyvcp>
\layout LyX-Code

    <led>
\layout LyX-Code

    </led>
\layout LyX-Code

</pyvcp>
\layout Standard

If you place this text in a file called tiny.xml, and run 
\layout LyX-Code

pyvcp -c mypanel tiny.xml
\layout Standard

pyVCP will create the panel for you, which includes only one widget, a LED.
 It will also create a HAL pin component named 
\begin_inset Quotes eld
\end_inset 

mypanel
\begin_inset Quotes erd
\end_inset 

 (all widgets in this panel are connected to pins that start with 
\begin_inset Quotes eld
\end_inset 

mypanel.
\begin_inset Quotes erd
\end_inset 

).
 Since no <halpin> tag was present inside the <led> tag, pyVCP will automaticall
y name the HAL pin for the LED widget mypanel.led.0
\layout Standard

For a list of widgets and their tags and options, see the widget reference
 below.
\layout Standard

Once you have created your panel, connecting HAL signals to and form the
 pyVCP pins is done with 'halcmd linksp' as usual.
 If you are new to HAL, the HAL Tutorial
\begin_inset LatexCommand \ref{cha:HAL-Tutorial}

\end_inset 

 is recommended.
\layout Section

Using pyVCP with AXIS
\layout Standard

Since AXIS uses the same GUI toolkit (Tkinter) as pyVCP, it is possible
 to include a pyVCP panel on the right side of the normal AXIS user interface.
 A typical example is explained below.
\layout Standard

Place your pyVCP XML file describing the panel in the same directory where
 your .ini file is.
 Say we we want to display the current spindle speed using a Bar widget.
 Place the following in a file called spindle.xml:
\layout LyX-Code

<pyvcp>
\layout LyX-Code

    <label>
\layout LyX-Code

        <text>
\begin_inset Quotes erd
\end_inset 

Spindle speed:
\begin_inset Quotes erd
\end_inset 

</text>
\layout LyX-Code

    </label>
\layout LyX-Code

    <bar>
\layout LyX-Code

        <halpin>
\begin_inset Quotes erd
\end_inset 

spindle-speed
\begin_inset Quotes erd
\end_inset 

</halpin>
\layout LyX-Code

        <endval>5000</endval>
\layout LyX-Code

    </bar>
\layout LyX-Code

</pyvcp>
\layout Standard

Here we've made a panel with a single Bar widget, specified that its HAL
 pin should be named 
\begin_inset Quotes eld
\end_inset 

spindle-speed
\begin_inset Quotes erd
\end_inset 

, and set the maximum value of the bar to 5000 (see widget reference below
 for all options).
 To make AXIS aware of this file, and call it at startup, we need to specify
 the following in the [DISPLAY] section of the .ini file:
\layout LyX-Code

PYVCP = spindle.xml
\layout Standard

To make our widget actually display the spindle-speed it needs to be hooked
 up to the appropriate HAL signal.
 A .hal file that will be run once AXIS and pyVCP have started can be specified
 in the [HAL] section of the .ini file:
\layout LyX-Code

POSTGUI_HALFILE = spindle_to_pyvcp.hal
\layout Standard

This change will run the HAL commands specified in 
\begin_inset Quotes eld
\end_inset 

spindle_to_pyvcp.hal
\begin_inset Quotes erd
\end_inset 

.
 In our example the contents could look like this:
\layout LyX-Code

linksp spindle-rpm-filtered  pyvcp.spindle-speed
\layout Standard

assuming that a singlal called 
\begin_inset Quotes eld
\end_inset 

spindle-rpm-filtered
\begin_inset Quotes erd
\end_inset 

 already exists.
 Note that when running together with AXIS, all pyVCP widget HAL pins have
 names that start with 
\begin_inset Quotes eld
\end_inset 

pyvcp.
\begin_inset Quotes erd
\end_inset 

.
\layout Standard


\begin_inset Graphics
	filename pyvcp_AXIS.png
	lyxscale 50
	scale 50

\end_inset 


\layout Standard

This is what the newly created pyVCP panel should look like in AXIS.
\layout Section

pyVCP Widget reference
\layout Standard

HAL pins come in two variants, BIT and FLOAT.
 pyVCP can either display the value of the pin with an indicator widget,
 or modify the pin value with a control widget.
 Thus there are four classes of pyVCP widgets that you can connect to a
 HAL signal.
 A fifth class of helper widgets allow you to organize and label your panel.
\layout List
\labelwidthstring 00.00.0000

1.
 Widgets for indicating BIT pins: LED
\layout List
\labelwidthstring 00.00.0000

2.
 Widgets for controlling BIT pins: Button, Checkbutton, Radiobutton
\layout List
\labelwidthstring 00.00.0000

3.
 Widgets for indicating FLOAT pins: Number, Bar, Meter
\layout List
\labelwidthstring 00.00.0000

4.
 Widgets for controlling FLOAT pins: Spinbox, Scale, Jogwheel
\layout List
\labelwidthstring 00.00.0000

5.
 Helper widgets: Hbox, Vbox, Label
\layout Section

VCP: A small example
\layout Standard

Place the following in the file 
\family typewriter 
tiny.vcp
\family default 
:
\layout LyX-Code

vcp {
\layout LyX-Code

  main-window {
\layout LyX-Code

    box {
\layout LyX-Code

      button {
\layout LyX-Code

        halpin = vcp.pushbutton
\layout LyX-Code

        label { text = "Push Me" }
\layout LyX-Code

      }
\layout LyX-Code

      LED {
\layout LyX-Code

        halpin = vcp.light
\layout LyX-Code

      }
\layout LyX-Code

    }
\layout LyX-Code

  }
\layout LyX-Code

}
\layout Standard

The above file describes a tiny Virtual Control Panel, with one push button,
 and one light.
 To see what it looks like, we need to start HAL:
\layout LyX-Code

$
\series bold 
halrun
\layout LyX-Code

halcmd:
\layout LyX-Code

\layout Standard

Next we load halvcp, and give it the name of our .vcp file:
\layout LyX-Code

halcmd: 
\series bold 
loadusr halvcp tiny.vcp
\layout LyX-Code

halcmd:
\layout Standard

There may be some text printed as halvcp parses the tiny.vcp file, but when
 it finishes, there should be a small window on your screen, with a button
 and an LED.
 It will look something like figure 
\begin_inset LatexCommand \ref{fig:tiny.vpc_onscreen}

\end_inset 

.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Standard
\align center 

\begin_inset Graphics
	filename tinyvcp.png
	rotateOrigin center

\end_inset 


\layout Caption


\begin_inset LatexCommand \label{fig:tiny.vpc_onscreen}

\end_inset 

tiny.vcp on the screen
\end_inset 


\layout Standard

So, we have a button and an LED, but they aren't connected to anything,
 so nothing happens when you push the button.
 However, the LED and the button both have HAL pins associated with them:
\layout LyX-Code

halcmd: 
\series bold 
show pin
\layout LyX-Code

Component Pins:
\layout LyX-Code

Owner  Type  Dir     Value      Name
\layout LyX-Code

 03    bit   IN      FALSE      vcp.light
\layout LyX-Code

 03    bit   OUT     FALSE      vcp.pushbutton
\layout LyX-Code

halcmd:
\layout LyX-Code

\layout Standard

To make something happen, we can connect a HAL signal between the button
 and the light:
\layout LyX-Code

halcmd: 
\series bold 
newsig jumper bit
\layout LyX-Code

halcmd: 
\series bold 
linksp jumper vcp.pushbutton
\layout LyX-Code

halcmd: 
\series bold 
linksp jumper vcp.light
\layout LyX-Code

halcmd: 
\series bold 
show sig
\layout LyX-Code

Signals:
\layout LyX-Code

Type      Value      Name
\layout LyX-Code

bit       FALSE      jumper
\layout LyX-Code

                         ==> vcp.light
\layout LyX-Code

                         <== vcp.pushbutton
\layout LyX-Code

halcmd:
\layout LyX-Code

\layout Standard

Now push the button, and the the LED should light up!
\layout Section

VCP: Another small example with EMC
\layout Standard

Place the following in the file 
\family typewriter 
estop.vcp
\family default 
:
\layout LyX-Code

vcp { 
\newline 
   main-window { 
\newline 
      toggle { halpin = vcp.estop } 
\newline 
   }
\newline 
}
\layout Standard

In your .hal file, remove any existing signal linked to 
\family typewriter 
iocontrol.0.emc-enable-in
\family default 
 and add the following lines:
\layout LyX-Code

loadusr -W halvcp estop.vcp
\newline 
newsig estop bit
\newline 
linkps vcp.estop => estop
\newline 
linkps estop => iocontrol.0.emc-enable-in
\layout Standard

Now, when running your machine, the ESTOP button in the GUI is disabled,
 and the ESTOP button in the VCP window is used instead.
\layout Section

VCP Syntax
\layout Subsection

Block
\layout Standard

A block's format is:
\layout LyX-Code


\emph on 
tag
\emph default 
 { 
\emph on 
contents
\emph default 
 }
\layout Standard

The contents can consist of attributes that describe the block, or other
 blocks that nest inside it.
\layout Standard

A attribute's format is
\layout LyX-Code


\emph on 
name
\emph default 
 = 
\emph on 
value
\layout Standard

The attribute names that are acceptable for each block depend on the block
 tag, and will be listed later.
\the_end
