#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

Getting Started
\layout Section

Hal Commands
\begin_inset LatexCommand \label{sec:Hal-Commands}

\end_inset 


\layout Standard

More detailed information can be found in the man page for halcmd "man halcmd"
 in a terminal window.
 To see the HAL configuration and check the status of pins and parameters
 use the HAL Configuration window on the Machine menu in AXIS.
 To watch a pin status open the Watch tab and click on each pin you wish
 to watch and it will be added to the watch window.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

HAL Configuration Window
\begin_inset LatexCommand \label{cap:HAL-Configuration-Window}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/HAL_Configuration.png
	scale 60

\end_inset 


\end_inset 


\layout Subsection

loadrt
\layout Standard

The command "loadrt" loads a real time HAL component.
 Real time component functions need to be added to a thread to be updated
 at the rate of the thread.
 You can not load a user space component into the real time space.
\layout Standard

The syntax and an example:
\layout Quote

loadrt <component> <options>
\layout Quote

loadrt mux4 count=1
\layout Subsection

addf
\layout Standard

The command "addf" adds a real time component function to a thread.
 You have to add a function from a HAL real time component to a thread to
 get the function to update at the rate of the thread.
 
\layout Standard

If you used the Stepper Config Wizard to generate your config you will have
 two threads.
\layout Itemize

base-thread (the high speed thread) this thread handles items that need
 a fast response like making pulses, reading and writing to the parallel
 port.
\layout Itemize

servo-thread (the slow speed thread) this thread handles items that don't
 quite need as fast of a thread like motion controller, ClassicLadder, motion
 command handler.
\layout Standard

The syntax and an example:
\layout Quote

addf <component> <thread>
\layout Quote

addf mux4 servo-thread
\layout Subsection

loadusr
\layout Standard

The command "loadusr" loads a user space HAL component.
 User space programs are their own separate processes, which optionally
 talk to other HAL components via pins and parameters.
 You can not load real time components into user space.
\layout Standard

Flags may be one or more of the following:
\layout Description

-W to wait for the component to become ready.
 The component is assumed to have the same name as the first argument of
 the command.
\layout Description

-Wn\SpecialChar ~
<name> to wait for the component, which will have the given <name>.
\layout Description

-w to wait for the program to exit
\layout Description

-i to ignore the program return value (with -w) 
\layout Standard

The syntax and examples:
\layout Quote

loadusr <component> <options>
\layout Quote

loadusr halui
\layout Quote

loadusr -Wn spindle gs2_vfd -n spindle
\layout Quote

in English is "loadusr wait for name spindle component gs2_vfd name spindle."
\newline 
the -n spindle is part of the gs2_vfd component not the loadusr command.
\layout Subsection

net
\layout Standard

The command "net" creates a "connection" between a signal and and one or
 more pins.
 The direction indicator "<= and =>" is only to make it easier to read for
 humans and is not used by net.
 
\layout Standard

The syntax and an example:
\layout Quote

net <signal-name> <pin-name> <opt-direction> <opt-pin-name>
\layout Quote

net both-home-y <= paraport.0.pin-11-in
\layout Standard

Each signal can only have one source (a HAL "out
\begin_inset Quotes erd
\end_inset 

 pin) and as many readers (a HAL "in" pin) as you like.
 In the Dir column of the HAL Configuration window you can see which pins
 are "in" and which are "out".
 The following figure shows the "direction" for a clearer understanding.
 
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

Signal Direction
\begin_inset LatexCommand \label{cap:Signal-Direction}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/signal-direction.png
	scale 80

\end_inset 


\end_inset 


\layout Standard

To do this on one line:
\layout Quote

net xStep stepgen.0.out => parport.0.pin-02-out parport.0.pin-08-out
\layout Standard

To do this on multiple lines just use the signal with the readers on subsequent
 lines:
\layout Quote

net xStep stepgen.0.out => parport.0.pin-02-out
\newline 
net xStep => parport.0.pin-02-out
\layout Standard

The so called I/O pins like index-enable do not follow this rule.
\layout Subsection

setp
\begin_inset LatexCommand \index{setp}

\end_inset 


\begin_inset LatexCommand \label{sub:setp}

\end_inset 


\layout Standard

The command "setp" sets the value of a pin or parameter.
 The valid values will depend on the type of the pin or parameter.
 It is an error if the data types do not match.
\layout Standard

Some components have parameters that need to be set before use.
 Parameters can be set before use or while running as needed.
 You can not use setp on a pin that is connected to a signal.
\layout Standard

The syntax and an example:
\layout Quote

setp <pin/parameter-name> <value>
\layout Quote

setp paraport.0.pin-08-out TRUE
\layout Subsection

unlinkp
\layout Standard

The command "unlinkp" unlinks a pin from the connected signal.
 If no signal was connected to the pin prior running the command, nothing
 happens.
\layout Standard

The syntax and an example:
\layout Quote

unlinkp <pin-name>
\layout Quote

unlinkp parport.0.pin-02-out
\layout Subsection

Obsolete Commands
\layout Subsubsection

linksp
\layout Standard

The command "linksp" creates a "connection" between a signal and one pin.
\layout Standard

The syntax and an example:
\layout Quote

linksp <signal-name> <pin-name>
\layout Quote

linksp X-step parport.0.pin-02-out
\layout Standard

The "linksp" command has been superseeded by the "net" command.
\layout Subsubsection

linkps
\layout Standard

The command "linkps" creates a "connection" between one pin and one signal.
 It is the same as linksp but the arguments are reversed.
\layout Standard

The syntax and an example:
\layout Quote

linkps <pin-name> <signal-name>
\layout Quote

linkps parport.0.pin-02-out X-Step
\layout Standard

The "linkps" command has been superseeded by the "net" command.
\layout Subsubsection

newsig
\layout Standard

the command "newsig" creates a new HAL signal by the name <signame> and
 the data type of <type>.
 Type must be "bit", "s32", "u32" or "float".
 Error if <signame> all ready exists.
\layout Standard

The syntax and an example:
\layout Quote

newsig <signame> <type>
\layout Quote

newsig Xstep bit
\layout Standard

More information can be found in the HAL manual or the man pages for halrun.
\layout Section

Hal Data
\begin_inset LatexCommand \label{sec:Hal-Data}

\end_inset 


\layout Subsection

Bit
\begin_inset LatexCommand \index{Bit}

\end_inset 


\layout Standard

A bit value is an on or off.
\layout Itemize

bit values = true or 1 and false or 0 (True, TRUE, true are all valid)
\layout Subsection

Float
\begin_inset LatexCommand \index{Float}

\end_inset 


\layout Standard

A "float" is a floating point number.
 In other words the decimal point can move as needed.
\layout Itemize

float values = a 32 bit floating point value, with approximately 24 bits
 of resolution and over 200 bits of dynamic range.
\layout Standard

For more information on floating point numbers see:
\layout Standard


\begin_inset LatexCommand \url{http://en.wikipedia.org/wiki/Floating_point}

\end_inset 


\layout Subsection

s32
\begin_inset LatexCommand \index{s32}

\end_inset 


\layout Standard

An "s32" number is a whole number that can have a negative or positive value.
\layout Itemize

s32 values = integer numbers -2147483648 to 2147483647
\layout Subsection

u32
\begin_inset LatexCommand \index{u32}

\end_inset 


\layout Standard

A "u32" number is a whole number that is positive only.
\layout Itemize

u32 values = integer numbers 0 to 4294967295
\layout Section

Hal Files
\layout Standard

If you used the Stepper Config Wizard to generate your config you will have
 up to three HAL files in your config directory.
\layout Itemize

my-mill.hal (if your config is named "my-mill") This file is loaded first
 and should not be changed if you used the Stepper Config Wizard.
\layout Itemize

custom.hal This file is loaded next and before the GUI loads.
 This is where you put your custom HAL commands that you want loaded before
 the GUI is loaded.
 
\layout Itemize

custom_postgui.hal This file is loaded after the GUI loads.
 This is where you put your custom HAL commands that you want loaded after
 the GUI is loaded.
 Any HAL commands that use pyVCP widgets need to be placed here.
 
\layout Section

HAL Components
\layout Standard

Two parameters are automatically added to each HAL component when it is
 created.
 These parameters allow you to scope the execution time of a component.
\layout Quote

.time
\begin_inset LatexCommand \index{time}

\end_inset 


\newline 
.tmax
\begin_inset LatexCommand \index{tmax}

\end_inset 


\layout Standard

Time is the number of CPU cycles it took to execute the function.
\layout Standard

Tmax is the maximum number of CPU cycles it took to execute the function.
 Tmax is a read/write parameter so the user can set it to 0 to get rid of
 the first time initialization on the function's execution time.
\layout Section

Logic Components
\layout Standard

Hal contains several real time logic components.
 Logic components follow a "Truth Table" that states what the output is
 for any given input.
 Typically these are bit manipulators and follow electrical logic gate truth
 tables.
\layout Subsection

and2
\layout Standard

The "and2" component is a two input "and" gate.
 The truth table below shows the ouput based on each combination of input.
\layout Standard

Syntax
\layout Quote

and2 [count=N|names=name1[,name2...]]
\layout Standard

Functions
\layout Quote

and2.n
\layout Standard

Pins
\layout Quote

and2.N.in0 (bit, in)
\newline 
and2.N.in1 (bit, in)
\newline 
and2.N.out (bit, out)
\layout Standard
\align center 
Truth Table
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

not
\layout Standard

The "not" component is a bit inverter.
 
\layout Standard

Syntax
\layout Quote

not [count=n|names=name1[,name2...]]
\layout Standard

Functions
\layout Quote

not.all
\newline 
not.n
\layout Standard

Pins
\layout Quote

not.n.in (bit, in)
\newline 
not.n.out (bit, out)
\layout Standard
\align center 
Truth Table
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

or2
\layout Standard

The "or2" component is a two input OR gate.
\layout Standard

Syntax
\layout Quote

or2[count=,|names=name1[,name2...]]
\layout Standard

Functions
\layout Quote

or2.n
\layout Standard

Pins
\layout Quote

or2.n.in0 (bit, in)
\newline 
or2.n.in1 (bit, in)
\newline 
or2.n.out (bit, out)
\layout Standard
\align center 
Truth Table
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

xor2
\layout Standard

The "xor2" component is a two input XOR (exclusive OR)gate.
\layout Standard

Syntax
\layout Quote

xor2[count=,|names=name1[,name2...]]
\layout Standard

Functions
\layout Quote

xor2.n
\layout Standard

Pins
\layout Quote

xor2.n.in0 (bit, in)
\newline 
xor2.n.in1 (bit, in)
\newline 
xor2.n.out (bit, out)
\layout Standard
\align center 
Truth Table
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

Logic Examples
\layout Standard

An "and2" example connecting two inputs to one output.
\layout Quote

loadrt and2 count=1
\newline 
addf and2.0 servo-thread
\newline 
net my-sigin1 and2.0.in0 <= paraport.0.pin-11-in
\newline 
net my-sigin2 and2.0.in.1 <= paraport.0.pin-12-in
\newline 
net both-on paraport.0.pin-14-out <= and2.0.out
\layout Standard

In the above example one copy of and2 is loaded into real time space and
 added to the servo thread.
 Next pin 11 of the parallel port is connected to the in0 bit of the and
 gate.
 Next pin 12 is connected to the in1 bit of the and gate.
 Last we connect the and2 out bit to the parallel port pin 14.
 So following the truth table for and2 if pin 11 and pin 12 are on then
 the output pin 14 will be on.
\the_end
