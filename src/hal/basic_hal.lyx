#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

Getting Started
\layout Standard

This section is under construction at the moment...
\layout Section

Hal Commands
\layout Subsection

loadrt
\layout Standard

The command "loadrt" loads a real time HAL component.
 Real time components need to be added to threads to do anything.
 You can not load a user space component into the real time space.
\layout Standard

The syntax and an example:
\layout Quote

loadrt <component> <options>
\layout Quote

loadrt mux4 count=1
\layout Subsection

addf
\layout Standard

The command "addf" adds a function to a real time thread.
 If you used the Stepper Config Wizard to generate your config you will
 have two threads.
\layout Itemize

base-thread (the high speed thread) this thread handles items that need
 a fast response like making pulses, reading and writing to the parallel
 port.
\layout Itemize

servo-thread (the slow speed thread) this thread handles items that don't
 quite need as fast of a thread like motion controller, ClassicLadder, motion
 command handler.
\layout Standard

The syntax and an example:
\layout Quote

addf <component> <thread>
\layout Quote

addf mux4 servo-thread
\layout Subsection

loadusr
\layout Standard

The command "loadusr" loads a user space HAL component.
 User space programs are their own separate processes, which optionally
 talk to other HAL components via pins and parameters.
 You can not load real time components into user space.
\layout Standard

The syntax and an example:
\layout Quote

loadusr <component> <options>
\layout Quote

loadusr or2 count=2
\layout Subsection

net
\layout Standard

The command "net" creates a "connection" between a signal and and one or
 more pins.
 The direction indicator "<= and =>" is only to make it easier to read for
 humans and is not used by net.
 
\layout Standard

The syntax and an example:
\layout Quote

net <signal-name> <pin-name> <opt-direction> <opt-pin-name>
\layout Quote

net my-new-signal function.0.pin-00-in <= paraport.0.pin-11-in
\layout Subsection

setp
\layout Standard

The command "setp" sets the value pin or parameter.
 Some components have parameters that need to be set before use.
 Parameters can be set before use or while running as needed.
 You can not use setp on a pin that is connected to a signal.
\layout Standard

The syntax and an example:
\layout Quote

setp <pin/parameter-name> <value>
\layout Quote

setp function.0.parameter 1
\layout Section

Hal Files
\layout Standard

If you used the Stepper Config Wizard to generate your config you will have
 up to three HAL files in your config directory.
\layout Itemize

my-mill.hal (if your config is named "my-mill") This file is loaded first
 and should not be changed if you used the Stepper Config Wizard.
\layout Itemize

custom.hal This file is loaded next and before the GUI loads.
 This is where you put your custom HAL commands that you want loaded before
 the GUI is loaded.
 
\layout Itemize

custom_postgui.hal This file is loaded after the GUI loads.
 This is where you put your custom HAL commands that you want loaded after
 the GUI is loaded.
 Any HAL commands that use pyVCP widgets need to be placed here.
 
\the_end
