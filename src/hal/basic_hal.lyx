#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

Getting Started
\layout Section

Hal Commands
\layout Subsection

loadrt
\layout Standard

The command "loadrt" loads a real time HAL component.
 Real time components need to be added to threads to do anything.
 You can not load a user space component into the real time space.
\layout Standard

The syntax and an example:
\layout Quote

loadrt <component> <options>
\layout Quote

loadrt mux4 count=1
\layout Subsection

addf
\layout Standard

The command "addf" adds a function to a real time thread.
 If you used the Stepper Config Wizard to generate your config you will
 have two threads.
\layout Itemize

base-thread (the high speed thread) this thread handles items that need
 a fast response like making pulses, reading and writing to the parallel
 port.
\layout Itemize

servo-thread (the slow speed thread) this thread handles items that don't
 quite need as fast of a thread like motion controller, ClassicLadder, motion
 command handler.
\layout Standard

The syntax and an example:
\layout Quote

addf <component> <thread>
\layout Quote

addf mux4 servo-thread
\layout Subsection

loadusr
\layout Standard

The command "loadusr" loads a user space HAL component.
 User space programs are their own separate processes, which optionally
 talk to other HAL components via pins and parameters.
 You can not load real time components into user space.
\layout Standard

The syntax and an example:
\layout Quote

loadusr <component> <options>
\layout Quote

loadusr or2 count=2
\layout Subsection

net
\layout Standard

The command "net" creates a "connection" between a signal and and one or
 more pins.
 The direction indicator "<= and =>" is only to make it easier to read for
 humans and is not used by net.
 
\layout Standard

The syntax and an example:
\layout Quote

net <signal-name> <pin-name> <opt-direction> <opt-pin-name>
\layout Quote

net my-new-signal function.0.pin-00-in <= paraport.0.pin-11-in
\layout Subsection

setp
\layout Standard

The command "setp" sets the value pin or parameter.
 Some components have parameters that need to be set before use.
 Parameters can be set before use or while running as needed.
 You can not use setp on a pin that is connected to a signal.
\layout Standard

The syntax and an example:
\layout Quote

setp <pin/parameter-name> <value>
\layout Quote

setp function.0.parameter 1
\layout Section

Hal Files
\layout Standard

If you used the Stepper Config Wizard to generate your config you will have
 up to three HAL files in your config directory.
\layout Itemize

my-mill.hal (if your config is named "my-mill") This file is loaded first
 and should not be changed if you used the Stepper Config Wizard.
\layout Itemize

custom.hal This file is loaded next and before the GUI loads.
 This is where you put your custom HAL commands that you want loaded before
 the GUI is loaded.
 
\layout Itemize

custom_postgui.hal This file is loaded after the GUI loads.
 This is where you put your custom HAL commands that you want loaded after
 the GUI is loaded.
 Any HAL commands that use pyVCP widgets need to be placed here.
 
\layout Section

Logic Components
\layout Standard

Hal contains several real time logic components.
 Logic components follow a "Truth Table" that states what the output is
 for any given input.
 Typically these are bit manipulators and follow electrical logic gate truth
 tables.
\layout Subsection

and2
\layout Standard

The "and2" component is a two input "and" gate.
 The truth table below shows the ouput based on each combination of input.
\layout Standard

Syntax
\layout Quote

and2 [count=N|names=name1[,name2...]]
\layout Standard

Functions
\layout Quote

and2.all
\newline 
and2.n
\layout Standard

Pins
\layout Quote

and2.N.in0 (bit, in)
\newline 
and2.N.in1 (bit, in)
\newline 
and2.N.out (bit, out)
\layout Standard
\align center 
Truth Table
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

not
\layout Standard

The "not" component is a bit inverter.
 
\layout Standard

Syntax
\layout Quote

not [count=n|names=name1[,name2...]]
\layout Standard

Functions
\layout Quote

not.all
\newline 
not.n
\layout Standard

Pins
\layout Quote

not.n.in (bit, in)
\newline 
not.n.out (bit, out)
\layout Standard
\align center 
Truth Table
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

or2
\layout Standard

The "or2" component is a two input OR gate.
\layout Standard

Syntax
\layout Quote

or2[count=,|names=name1[,name2...]]
\layout Standard

Functions
\layout Quote

or2.all
\newline 
or2.n
\layout Standard

Pins
\layout Quote

or2.n.in0 (bit, in)
\newline 
or2.n.in1 (bit, in)
\newline 
or2.n.out (bit, out)
\layout Standard
\align center 
Truth Table
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

xor2
\layout Standard

The "xor2" component is a two input XOR (exclusive OR)gate.
\layout Standard

Syntax
\layout Quote

xor2[count=,|names=name1[,name2...]]
\layout Standard

Functions
\layout Quote

xor2.all
\newline 
xor2.n
\layout Standard

Pins
\layout Quote

xor2.n.in0 (bit, in)
\newline 
xor2.n.in1 (bit, in)
\newline 
xor2.n.out (bit, out)
\layout Standard
\align center 
Truth Table
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in0
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

in1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

out
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

True
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

False
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

Logic Examples
\layout Standard

An "and2" example connecting two inputs to one output.
\layout Quote

loadrt and2 count=1
\newline 
addf and2.0 servo-thread
\newline 
net my-sigin1 and2.0.in0 <= paraport.0.pin-11-in
\newline 
net my-sigin2 and2.0.in.1 <= paraport.0.pin-12-in
\newline 
net both-on paraport.0.pin-14-out <= and2.0.out
\layout Standard

In the above example one copy of and2 is loaded into real time space and
 added to the servo thread.
 Next pin 11 of the parallel port is connected to the in0 bit of the and
 gate.
 Next pin 12 is connected to the in1 bit of the and gate.
 Last we connect the and2 out bit to the parallel port pin 14.
 So following the truth table for and2 if pin 11 and pin 12 are on then
 the output pin 14 will be on.
\layout Standard

An "and2" example using the .all function
\layout Quote

loadrt and2 count=4
\newline 
addf and2.all servo-thread
\layout Standard

In the above example 4 copies of and2 are loaded into real time and added
 to the servo thread using only two lines.
 The disadvantage of using the .all function is you can't decide on the sequencin
g of their evaluation.
 Also you would not use the .all if you need to add some of the and2's to
 the fast thread and some to the slow thread.
\the_end
