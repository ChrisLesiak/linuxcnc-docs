#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

pyVCP Examples
\layout Section

AXIS
\layout Standard

To create a pyVCP panel to use with the AXIS interface that is attached
 to the right of AXIS you need to do the following basic things.
\layout Itemize

Create an .xml file that contains your panel description and put it in your
 config directory.
\layout Itemize

Add the PYVCP entry to the [DISPLAY] section of the ini file with your .xml
 file name.
\layout Itemize

Add the POSTGUI_HALFILE entry to the [HAL] section of the ini file with
 the name of your postgui hal file name.
\layout Itemize

Add the links to HAL pins for your panel in the postgui.hal file to "connect"
 your pyVCP panel to EMC.
\layout Section

Floating
\layout Standard

To create floating pyVCP panels that can be used with any interface you
 need to do the following basic things.
\layout Itemize

Create an .xml file that contains your panel description and put it in your
 config directory.
\layout Itemize

Add a loadusr line to your .hal file to load each panel.
\layout Itemize

Add the links to HAL pins for your panel in the postgui.hal file to "connect"
 your pyVCP panel to EMC.
\layout Standard

The following is an example of a loadusr command to load two pyVCP panels
 and name each one so the connection names in HAL will be known.
\layout Quote

loadusr -Wn btnpanel pyvcp -c btnpanel panel1.xml
\newline 
loadusr -Wn sppanel pyvcp -c sppanel panel2.xml
\layout Standard

The -Wn makes hal "Wait for name" to be loaded before proceeding.
 The pyvcp -c makes pyVCP name the panel.
\layout Standard

The HAL pins from panel1.xml will be named btnpanel.<pin name>
\layout Standard

The HAL pins from panel2.xml will be named sppanel.<pin name>
\layout Standard

Make sure the loadusr line is before any net's that make use of the pyVCP
 pins.
\layout Section
\pagebreak_top 
Jog Buttons
\layout Standard

In this example we will create a pyVCP panel with jog buttons for X, Y,
 and Z.
 This configuration will be built upon a Stepconf Wizard generated configuration.
 First we run the Stepconf Wizard and configure our machine, then on the
 Advanced Configuration Options page we make a couple of selections to add
 a blank pyVCP panel as shown in the following figure.
 For this example we named the configuration "pyvcp_xyz" on the Basic Machine
 Information page of the Stepconf Wizard.
 
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

XYZ Wizard Configuration
\begin_inset LatexCommand \label{cap:XYZ-Wizard-Configuration}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/xyz_ACO.png
	scale 70

\end_inset 


\end_inset 


\layout Standard

The Stepconf Wizard will create several files and place them in the /emc/configs
/pyvcp_xyz directory.
 If you left the create link checked you will have a link to those files
 on your desktop.
 
\layout Subsection*

Create the Widgets
\layout Standard

Open up the custompanel.xml file by right clicking on it and selecting "open
 with text editor".
 Between the <pyvcp></pyvcp> tags we will add the widgets for our panel.
\layout Standard

Look in the pyVCP Widgets Reference section of the manual for more detailed
 information on each widget.
\layout Standard

In your custompanel.xml file we will add the description of the widgets.
 
\layout Quote

<pyvcp>
\layout Quote

<labelframe text="Jog Buttons">
\newline 
<font>("Helvetica",16)</font>
\layout Quote

<!-\SpecialChar \-
- the X jog buttons -\SpecialChar \-
->
\newline 
<hbox>
\newline 
<relief>RAISED</relief>
\newline 
<bd>3</bd>
\newline 
<button>
\newline 
<font>("Helvetica",20)</font>
\newline 
<width>3</width>
\newline 
<halpin>"x-plus"</halpin>
\newline 
<text>"X+"</text>
\newline 
</button>
\newline 
<button>
\newline 
<font>("Helvetica",20)</font>
\newline 
<width>3</width>
\newline 
<halpin>"x-minus"</halpin>
\newline 
<text>"X-"</text>
\newline 
</button>
\newline 
</hbox>
\layout Quote

<!-\SpecialChar \-
- the Y jog buttons -\SpecialChar \-
->
\newline 
<hbox>
\newline 
<relief>RAISED</relief>
\newline 
<bd>3</bd>
\newline 
<button>
\newline 
<font>("Helvetica",20)</font>
\newline 
<width>3</width>
\newline 
<halpin>"y-plus"</halpin>
\newline 
<text>"Y+"</text>
\newline 
</button>
\newline 
<button>
\newline 
<font>("Helvetica",20)</font>
\newline 
<width>3</width>
\newline 
<halpin>"y-minus"</halpin>
\newline 
<text>"Y-"</text>
\newline 
</button>
\newline 
</hbox>
\layout Quote

<!-\SpecialChar \-
- the Z jog buttons -\SpecialChar \-
->
\newline 
<hbox>
\newline 
<relief>RAISED</relief>
\newline 
<bd>3</bd>
\newline 
<button>
\newline 
<font>("Helvetica",20)</font>
\newline 
<width>3</width>
\newline 
<halpin>"z-plus"</halpin>
\newline 
<text>"Z+"</text>
\newline 
</button>
\newline 
<button>
\newline 
<font>("Helvetica",20)</font>
\newline 
<width>3</width>
\newline 
<halpin>"z-minus"</halpin>
\newline 
<text>"Z-"</text>
\newline 
</button>
\newline 
</hbox>
\layout Quote

<!-\SpecialChar \-
- the jog speed slider -\SpecialChar \-
->
\newline 
<vbox>
\newline 
<relief>RAISED</relief>
\newline 
<bd>3</bd>
\newline 
<label>
\newline 
<text>"Jog Speed"</text>
\newline 
<font>("Helvetica",16)</font>
\newline 
</label>
\newline 
<scale>
\newline 
<font>("Helvetica",14)</font>
\newline 
<halpin>"jog-speed"</halpin>
\newline 
<resolution>1</resolution>
\newline 
<orient>HORIZONTAL</orient>
\newline 
<min_>0</min_>
\newline 
<max_>80</max_>
\newline 
</scale>
\newline 
</vbox>
\layout Quote

</labelframe>
\layout Quote

</pyvcp>
\layout Quote

After adding the above you now will have a pyVCP panel that looks like the
 following attached to the right side of AXIS.
 It looks nice but it does not do anything until you "connect" the buttons
 to halui.
 If you get an error when you try and run scroll down to the bottom of the
 pop up window and usually the error is a spelling or syntax error and it
 will be there.
\layout Quote


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

Jog Buttons
\begin_inset LatexCommand \label{cap:Jog-Buttons}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/xyz_buttons.png
	scale 80
	keepAspectRatio

\end_inset 


\end_inset 


\layout Subsection*

Make Connections
\layout Standard

To make the connections needed open up your custom_postgui.hal file and add
 the following.
\layout Quote

# connect the X pyVCP buttons
\newline 
net my-jogxminus halui.jog.0.minus <= pyvcp.x-minus
\newline 
net my-jogxplus halui.jog.0.plus <= pyvcp.x-plus
\layout Quote

# connect the Y pyVCP buttons
\newline 
net my-jogyminus halui.jog.1.minus <= pyvcp.y-minus
\newline 
net my-jogyplus halui.jog.1.plus <= pyvcp.y-plus
\layout Quote

# connect the Z pyVCP buttons
\newline 
net my-jogzminus halui.jog.2.minus <= pyvcp.z-minus
\newline 
net my-jogzplus halui.jog.2.plus <= pyvcp.z-plus
\layout Quote

# connect the pyVCP jog speed slider 
\newline 
net my-jogspeed halui.jog-speed <= pyvcp.jog-speed-f
\layout Standard

After resetting the E-Stop and putting it into jog mode and moving the jog
 speed slider in the pyVCP panel to a value greater than zero the pyVCP
 jog buttons should work.
 You can not jog when running a g code file or while paused or while the
 MDI tab is selected.
\layout Section
\pagebreak_top 
Port Tester
\layout Standard

This example shows you how to make a simple parallel port tester using pyVCP
 and HAL.
\layout Standard

First create the ptest.xml file with the following code to create the panel
 description.
\layout LyX-Code

<!-- Test panel for the parallel port cfg for out -->
\layout LyX-Code

<pyvcp>
\layout LyX-Code

    <hbox>
\layout LyX-Code

        <relief>RIDGE</relief>
\layout LyX-Code

        <bd>2</bd>
\layout LyX-Code

        <button>
\layout LyX-Code

            <halpin>"btn01"</halpin>
\layout LyX-Code

            <text>"Pin 01"</text>
\layout LyX-Code

        </button>
\layout LyX-Code

        <led>
\layout LyX-Code

            <halpin>"led-01"</halpin>
\layout LyX-Code

            <size>25</size>
\layout LyX-Code

            <on_color>"green"</on_color>
\layout LyX-Code

            <off_color>"red"</off_color>
\layout LyX-Code

       </led>       
\layout LyX-Code

    </hbox>
\layout LyX-Code

    <hbox>
\layout LyX-Code

        <relief>RIDGE</relief>
\layout LyX-Code

        <bd>2</bd>
\layout LyX-Code

        <button>
\layout LyX-Code

            <halpin>"btn02"</halpin>
\layout LyX-Code

            <text>"Pin 02"</text>
\layout LyX-Code

        </button>
\layout LyX-Code

        <led>
\layout LyX-Code

            <halpin>"led-02"</halpin>
\layout LyX-Code

            <size>25</size>
\layout LyX-Code

            <on_color>"green"</on_color>
\layout LyX-Code

            <off_color>"red"</off_color>
\layout LyX-Code

       </led>       
\layout LyX-Code

    </hbox>
\layout LyX-Code

    <hbox>
\layout LyX-Code

        <relief>RIDGE</relief>
\layout LyX-Code

        <bd>2</bd>
\layout LyX-Code

        <label>
\layout LyX-Code

            <text>"Pin 10"</text>
\layout LyX-Code

            <font>("Helvetica",14)</font>
\layout LyX-Code

        </label>
\layout LyX-Code

        <led>
\layout LyX-Code

            <halpin>"led-10"</halpin>
\layout LyX-Code

            <size>25</size>
\layout LyX-Code

            <on_color>"green"</on_color>
\layout LyX-Code

            <off_color>"red"</off_color>
\layout LyX-Code

        </led>       
\layout LyX-Code

    </hbox>
\layout LyX-Code

    
\layout LyX-Code

    <hbox>
\layout LyX-Code

        <relief>RIDGE</relief>
\layout LyX-Code

        <bd>2</bd>
\layout LyX-Code

        <label>
\layout LyX-Code

            <text>"Pin 11"</text>
\layout LyX-Code

            <font>("Helvetica",14)</font>
\layout LyX-Code

        </label>
\layout LyX-Code

        <led>
\layout LyX-Code

            <halpin>"led-11"</halpin>
\layout LyX-Code

            <size>25</size>
\layout LyX-Code

            <on_color>"green"</on_color>
\layout LyX-Code

            <off_color>"red"</off_color>
\layout LyX-Code

        </led>       
\layout LyX-Code

    </hbox>
\layout LyX-Code

   
\layout LyX-Code

</pyvcp>
\layout Standard

This will create the following floating panel which contains a couple of
 in pins and a couple of out pins.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

Port Tester Panel
\begin_inset LatexCommand \label{cap:Port-Tester-Panel}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/ptest.png
	scale 80

\end_inset 


\end_inset 


\layout Standard

To run the HAL commands that we need to get everything up and running we
 put the following in our ptest.hal file.
\layout LyX-Code

loadrt hal_parport cfg="0x378 out"
\layout LyX-Code

loadusr -Wn ptest pyvcp -c ptest ptest.xml
\layout LyX-Code

loadrt threads name1=porttest period1=1000000
\layout LyX-Code

addf parport.0.read porttest
\layout LyX-Code

addf parport.0.write porttest
\layout LyX-Code

net pin01 ptest.btn01 parport.0.pin-01-out ptest.led-01
\layout LyX-Code

net pin02 ptest.btn02 parport.0.pin-02-out ptest.led-02
\layout LyX-Code

net pin10 parport.0.pin-10-in ptest.led-10
\layout LyX-Code

net pin11 parport.0.pin-11-in ptest.led-11
\layout LyX-Code

start
\layout LyX-Code

\layout Standard

To run the HAL file we use the following command from a terminal window.
\layout LyX-Code

~$ 
\series bold 
halrun -I -f ptest.hal
\layout Standard

The following figure shows what a complete panel might look like.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

Port Tester Complete
\begin_inset LatexCommand \label{cap:Port-Tester-Complete}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/ptest-final.png
	scale 80

\end_inset 


\end_inset 


\layout Standard

To add the rest of the parallel port pins just modify the .xml and .hal files.
\layout Standard

To show the pins after running the HAL script use the following command
 at the halcmd prompt:
\layout LyX-Code

halcmd: 
\series bold 
show pin
\layout LyX-Code

Component Pins:
\layout LyX-Code

Owner   Type  Dir         Value  Name
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-01-out <== pin01
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-02-out <== pin02
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-03-out
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-04-out
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-05-out
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-06-out
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-07-out
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-08-out
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-09-out
\layout LyX-Code

     2  bit   OUT          TRUE  parport.0.pin-10-in ==> pin10
\layout LyX-Code

     2  bit   OUT         FALSE  parport.0.pin-10-in-not
\layout LyX-Code

     2  bit   OUT          TRUE  parport.0.pin-11-in ==> pin11
\layout LyX-Code

     2  bit   OUT         FALSE  parport.0.pin-11-in-not
\layout LyX-Code

     2  bit   OUT          TRUE  parport.0.pin-12-in
\layout LyX-Code

     2  bit   OUT         FALSE  parport.0.pin-12-in-not
\layout LyX-Code

     2  bit   OUT          TRUE  parport.0.pin-13-in
\layout LyX-Code

     2  bit   OUT         FALSE  parport.0.pin-13-in-not
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-14-out
\layout LyX-Code

     2  bit   OUT          TRUE  parport.0.pin-15-in
\layout LyX-Code

     2  bit   OUT         FALSE  parport.0.pin-15-in-not
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-16-out
\layout LyX-Code

     2  bit   IN          FALSE  parport.0.pin-17-out
\layout LyX-Code

     4  bit   OUT         FALSE  ptest.btn01 ==> pin01
\layout LyX-Code

     4  bit   OUT         FALSE  ptest.btn02 ==> pin02
\layout LyX-Code

     4  bit   IN          FALSE  ptest.led-01 <== pin01
\layout LyX-Code

     4  bit   IN          FALSE  ptest.led-02 <== pin02
\layout LyX-Code

     4  bit   IN           TRUE  ptest.led-10 <== pin10
\layout LyX-Code

     4  bit   IN           TRUE  ptest.led-11 <== pin11
\layout Standard

This will show you what pins are IN and what pins are OUT as well as any
 connections.
\layout LyX-Code

\layout Section
\pagebreak_top 
GS2 RPM Meter
\begin_inset LatexCommand \label{sec:GS2-RPM-Meter}

\end_inset 


\layout Standard

The following example uses the Automation Direct GS2 VDF driver and displays
 the RPM and other info in a pyVCP panel.
 This example is based on the GS2 example in the Hardware Examples section
 this manual.
\layout Subsection*

The Panel
\layout Standard

To create the panel we add the following to the .xml file.
\layout Quote

<pyvcp>
\layout Quote

<!-\SpecialChar \-
- the RPM meter -\SpecialChar \-
->
\newline 
<hbox>
\newline 
<relief>RAISED</relief>
\newline 
<bd>3</bd>
\newline 
<meter>
\newline 
<halpin>"spindle_rpm"</halpin>
\newline 
<text>"Spindle"</text>
\newline 
<subtext>"RPM"</subtext>
\newline 
<size>200</size>
\newline 
<min_>0</min_>
\newline 
<max_>3000</max_>
\newline 
<majorscale>500</majorscale>
\newline 
<minorscale>100</minorscale>
\newline 
<region1>0,10,"yellow"</region1>
\newline 
</meter>
\newline 
</hbox>
\layout Quote

<!-\SpecialChar \-
- the On Led -\SpecialChar \-
->
\newline 
<hbox>
\newline 
<relief>RAISED</relief>
\newline 
<bd>3</bd>
\newline 
<vbox>
\newline 
<relief>RAISED</relief>
\newline 
<bd>2</bd>
\newline 
<label>
\newline 
<text>"On"</text>
\newline 
<font>("Helvetica",18)</font>
\newline 
</label>
\newline 
<width>5</width>
\newline 
 <hbox>
\newline 
<label width=
\begin_inset Quotes erd
\end_inset 

2
\begin_inset Quotes erd
\end_inset 

/> <!-- used to center the led -->
\newline 
<rectled>
\newline 
<halpin>"on-led"</halpin>
\newline 
<height>"30"</height>
\newline 
<width>"30"</width>
\newline 
<on_color>"green"</on_color>
\newline 
<off_color>"red"</off_color>
\newline 
</rectled>
\newline 
</hbox>
\newline 
</vbox>
\layout Quote

<!-\SpecialChar \-
- the FWD Led -\SpecialChar \-
->
\newline 
<vbox>
\newline 
<relief>RAISED</relief>
\newline 
<bd>2</bd>
\newline 
<label>
\newline 
<text>"FWD"</text>
\newline 
<font>("Helvetica",18)</font>
\newline 
<width>5</width>
\newline 
</label>
\newline 
<label width=
\begin_inset Quotes erd
\end_inset 

2
\begin_inset Quotes erd
\end_inset 

/>
\newline 
<rectled>
\newline 
<halpin>"fwd-led"</halpin>
\newline 
<height>"30"</height>
\newline 
<width>"30"</width>
\newline 
<on_color>"green"</on_color>
\newline 
<off_color>"red"</off_color>
\newline 
</rectled>
\newline 
</vbox>
\layout Quote

<!-\SpecialChar \-
- the REV Led -\SpecialChar \-
->
\newline 
<vbox>
\newline 
<relief>RAISED</relief>
\newline 
<bd>2</bd>
\newline 
<label>
\newline 
<text>"REV"</text>
\newline 
<font>("Helvetica",18)</font>
\newline 
<width>5</width>
\newline 
</label>
\newline 
<label width=
\begin_inset Quotes erd
\end_inset 

2
\begin_inset Quotes erd
\end_inset 

/>
\newline 
<rectled>
\newline 
<halpin>"rev-led"</halpin>
\newline 
<height>"30"</height>
\newline 
<width>"30"</width>
\newline 
<on_color>"red"</on_color>
\newline 
<off_color>"green"</off_color>
\newline 
</rectled>
\newline 
</vbox>
\newline 
</hbox>
\newline 
</pyvcp>
\layout Standard

The above gives us a pyVCP panel that looks like the following.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

GS2 Panel
\begin_inset LatexCommand \label{cap:GS2-Panel}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/gs2_panel.png

\end_inset 


\end_inset 


\layout Subsection*

The Connections
\layout Standard

To make it work we add the following code to the custom_postgui.hal file.
\layout Quote

# display the rpm based on freq * rpm per hz
\newline 
loadrt mult2
\newline 
addf mult2.0 servo-thread
\newline 
setp mult2.0.in1 28.75
\newline 
net cypher_speed mult2.0.in0 <= spindle-vfd.frequency-out
\newline 
net speed_out pyvcp.spindle_rpm <= mult2.0.out 
\layout Quote

# run led
\newline 
net gs2-run => pyvcp.on-led
\layout Quote

# fwd led
\newline 
net gs2-fwd => pyvcp.fwd-led
\layout Quote

# rev led
\newline 
net running-rev spindle-vfd.spindle-rev => pyvcp.rev-led
\layout Standard

Some of the lines might need some explanations.
 The fwd led line uses the signal created in the custom.hal file where as
 the rev led needs to use the spindle-rev bit.
 You can't link the spindle-fwd bit twice so you use the signal that it
 was linked to.
\the_end
