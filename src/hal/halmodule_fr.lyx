#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\begin_preamble
\usepackage[plainpages=false,pdfpagelabels,colorlinks=true,linkcolor=blue]{hyperref}
\end_preamble
\language french
\inputencoding default
\fontscheme bookman
\graphics default
\float_placement !!h
\paperfontsize 10
\spacing single 
\papersize letterpaper
\paperpackage a4
\use_geometry 0
\use_amsmath 1
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 5
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language french
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle headings

\layout Chapter

Création de composants de l'espace utilisateur Python avec les modules de
 'hal'
\layout Section

Utilisation de base
\layout Standard

Un composant de l'espace utilisateur commence par créer ses pins et ses
 paramètres, puis il entre dans une boucle de laquelle il va positionner
 périodiquement toutes ses sorties en fonction de ses entrées.
 Le composant suivant, un passe-tout, copie la valeur vue sur ses pins d'entrée
 (
\family typewriter 
passthrough.in
\family default 
) vers ses pins de sortie (
\family typewriter 
passthrough.out
\family default 
) approximativement une fois par seconde.
\layout LyX-Code

#!/usr/bin/python
\newline 
import hal, time
\newline 
h = hal.component("passthrough")
\newline 
h.newpin("in", hal.HAL_FLOAT, hal.HAL_IN)
\newline 
h.newpin("out", hal.HAL_FLOAT, hal.HAL_OUT)
\newline 
h.ready()
\newline 
try:
\newline 
    while 1:
\newline 
        time.sleep(1)
\newline 
        h['out'] = h['in']
\newline 
except KeyboardInterrupt:
\newline 
    raise SystemExit
\layout Standard

Copier le listing précédent dans un fichier nommé 
\begin_inset Quotes fld
\end_inset 

passthrough
\begin_inset Quotes frd
\end_inset 

, le rendre exécutable par un 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

chmod +x
\begin_inset Quotes frd
\end_inset 

 
\family default 
et le placer dans son 
\family typewriter 
$PATH
\family default 
.
 On peut alors l'essayer en faisant:
\layout LyX-Code

$ halrun
\newline 
halcmd: loadusr passthrough
\newline 
halcmd: show pin
\newline 
Component Pins:
\newline 
Owner  Type  Dir     Value      Name
\newline 
 03    float IN              0  passthrough.in
\newline 
 03    float OUT             0  passthrough.out
\newline 
halcmd: setp passthrough.in 3.14
\newline 
halcmd: show pin
\newline 
Component Pins:
\newline 
Owner  Type  Dir     Value      Name
\newline 
 03    float IN           3.14  passthrough.in
\newline 
 03    float OUT          3.14  passthrough.out
\layout Section

Composants de l'espace utilisateur et délais
\layout Standard

Si vous tapez rapidement 
\begin_inset Quotes fld
\end_inset 

show pin
\begin_inset Quotes frd
\end_inset 

, vous pourrez voir que 
\family typewriter 
passthrough.out
\family default 
 conserve un moment son ancienne valeur de 0.
 Ceci est dû à l'appel de la fonction 'time.sleep(1)', qui fait que les pins
 de sortie changent d'état, au plus, une fois par seconde.
 Parceque ce composant appartient à l'espace utilisateur, ce délai peut
 apparaître plus long, par exemple si la mémoire utilisée par le composant
 passthrough est échangée avec le disque dur, le délai peut être allongé
 jusqu'au raffraîchissement de la mémoire.
\layout Standard

Ces composants de l'espace utilisateur conviennent parfaitement pour des
 éléments tels que des panneaux de contrôle pour lesquels des délais de
 l'ordre de quelques millisecondes sont imperceptibles.
 Ils ne conviennent pas, en revanche, pour envoyer des impulsions de pas
 vers une carte de pilotage de périphériques pour lesquelles les délais
 doivent rester de l'ordre de quelques microsecondes, dans tous les cas).
\layout Section

Créer les pins et les paramètres
\layout LyX-Code

h = hal.component("passthrough")
\layout Standard

Le composant lui-même est créé par l'appel du constructeur '
\family typewriter 
hal.component
\family default 
'.
 Les arguments sont le nom du composant HAL et optionnellement, le préfixe
 utilisé pour les noms de pin et de paramètre.
 Si le préfixe n'est pas spécifié, le nom du composant est utilisé.
\layout LyX-Code

h.newpin("in", hal.HAL_FLOAT, hal.HAL_IN)
\layout Standard

Puis les pins sont créées par appels des méthodes sur l'objet composant.
 Les arguments sont: pin nom suffixe, type de pin et direction de la pin.
 Pour les paramètres, les arguments sont: paramètre nom suffixe, type de
 paramètre et direction du paramètre.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption

HAL Option Names
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Types de Pin et Paramètre:
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

HAL_BIT
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

HAL_FLOAT
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

HAL_S32
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

HAL_U32
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Directions des pins:
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

HAL_IN
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

HAL_OUT
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

HAL_IO
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Directions des paramètres:
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

HAL_RO
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

HAL_RW
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Standard

Le nom complet d'une pin ou d'un paramètre est formé en joignant le préfixe
 avec le suffixe par un 
\begin_inset Quotes fld
\end_inset 

.
\begin_inset Quotes frd
\end_inset 

, comme dans l'exemple où la pin créée est appelée 
\family typewriter 
passthrough.in
\family default 
.
\layout LyX-Code

h.ready()
\layout Standard

Une fois toutes les pins et les paramètres créés, la méthode 
\family typewriter 
.ready() est appelée
\family default 
.
\layout Subsection

Changer le préfixe
\layout Standard

Le préfixe peut être changé en appelant la méthode 
\family typewriter 
.setprefix()
\family default 
.
 Le préfixe courant peut être retrouvé en appelant la méthode 
\family typewriter 
.getprefix()
\family default 
.
\layout Section

Lire et écrire les pins et les paramètres
\layout Standard

Pour les pins et les paramètres qui sont aussi des identifiants Python,
 la valeur est accessible ou ajustable en utilisant la syntaxe des attributs
 suivante:
\layout LyX-Code

h.out = h.in
\layout Standard

Pour les pins et les paramètres qui sont aussi des identifiants Python,
 la valeur est accessible ou ajustable en utilisant la syntaxe de sous-script
 suivante:
\layout LyX-Code

h['out'] = h['in']
\layout Subsection

Pilotage des pins de sortie (HAL_OUT)
\layout Standard

Périodiquement, habituellement dans le temps de réponse de l'horloge, toutes
 les pins HAL_OUT doivent être 
\begin_inset Quotes fld
\end_inset 

pilotées
\begin_inset Quotes frd
\end_inset 

 en leur assignant une nouvelle valeur.
 Ceci doit être fait que la valeur soit différente ou non de la valeur précédemm
ent assignée.
 Quand la pin est connectée au signal, l'ancienne valeur de sortie n'est
 pas copiée vers le signal, la valeur correcte n'apparaîtra donc sur le
 signal qu'une fois que le composant lui aura assigné une nouvelle valeur.
\layout Subsection

Pilotage des pins bidirectionelles (HAL_IO)
\layout Standard

La règle mentionnée ci-dessus ne s'applique pas aux pins bidirectionnelles.
 Au lieux de celà, une pin bidirectionnelle doit seulement être pilotée
 par le composant et quand le composant souhaîte changer sa valeur.
 Par exemple, dans l'interface codeur, le composant codeur positionne seulement
 la pin 
\series bold 
index-enable
\series default 
 à 
\series bold 
FALSE
\series default 
 quand une impulsion d'index est vue et que l'ancienne valeur est 
\series bold 
TRUE
\series default 
, mais ne la positionne jamais à 
\series bold 
TRUE
\series default 
.
 Piloter répétitivement la pin à 
\series bold 
FALSE
\series default 
 pourrait faire qu'un autre composant connecté agisse comme si une nouvelle
 impulsion d'index avait été vue.
\layout Section

Quitter
\layout Standard

Une requête 
\family typewriter 

\begin_inset Quotes fld
\end_inset 

halcmd unload
\family default 

\begin_inset Quotes frd
\end_inset 

 pour le composant est délivrée comme une exception 
\family typewriter 
KeyboardInterrupt
\family default 
.
 Quand une requête de déchargement arrive, le processus doit quitter dans
 un court laps de temps ou appeler la méthode 
\family typewriter 
.exit()
\family default 
 sur le composant si un travail substentiel, comme la lecture ou l'écriture
 de fichiers, doit être fourni pour terminer le processus d'arrêt.
\layout Section

Idées de projets
\layout Itemize

Créer un panneau de contrôle extérieur avec boutons poussoirs, interrupteurs
 et voyants.
 Connecter le tout à un microcontrolleur et raccorder le microcontrolleur
 à un PC en utilisant une liaison série.
 Python est vraiment capable d'interfacer une liaison série grâce à son
 module 
\begin_inset LatexCommand \url[pyserial]{http://pyserial.sourceforge.net/}

\end_inset 

 (Paquet 
\begin_inset Quotes fld
\end_inset 

python-serial,dans les dépots universe d'Ubuntu)
\layout Itemize

Relier un module d'affichage à LCD 
\begin_inset LatexCommand \url[LCDProc]{http://lcdproc.omnipotent.net/}

\end_inset 

 et l'utiliser pour afficher les informations de votre choix (Paquet 
\begin_inset Quotes fld
\end_inset 

lcdproc
\begin_inset Quotes frd
\end_inset 

, dans les dépots universe d'Ubuntu)
\layout Itemize

Créer un panneau de contrôle virtuel utilisant n'importe quelle librairie
 d'interface graphique supportée par Python (gtk, qt, wxwindows, etc)
\the_end
