#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\begin_preamble
\usepackage[plainpages=false,pdfpagelabels,colorlinks=true,linkcolor=blue]{hyperref}
\end_preamble
\language english
\inputencoding default
\fontscheme bookman
\graphics default
\float_placement !htbp
\paperfontsize default
\spacing single 
\papersize letterpaper
\paperpackage a4
\use_geometry 1
\use_amsmath 1
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 1
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter


\emph on 
comp
\emph default 
: a tool for creating HAL modules
\layout Section

Introduction
\layout Standard

Writing a HAL component can be a tedious process, most of it in setup calls
 to 
\family typewriter 
rtapi_
\family default 
 and 
\family typewriter 
hal_
\family default 
 functions and associated error checking.
 
\emph on 
comp
\emph default 
 will write all this code for you, automatically.
\layout Standard

Compiling a realtime HAL component is also much easier when using 
\emph on 
comp
\emph default 
, whether the component is part of the emc2 source tree, or outside it.
\layout Standard

For instance, the 
\begin_inset Quotes eld
\end_inset 

ddt
\begin_inset Quotes erd
\end_inset 

 portion of 
\family typewriter 
blocks
\family default 
 is around 80 lines of code.
 The equivalent component is very short when written using the 
\emph on 
comp
\emph default 
 preprocessor:
\layout LyX-Code

component ddt;
\newline 
pin in float in;
\newline 
pin out float out;
\newline 
option data float;
\newline 
function update;
\newline 
;;
\newline 
FUNCTION(update) { 
\newline 
    float tmp = in; 
\newline 
    out = (tmp - data) / (period * 1e-9); 
\newline 
    data = tmp;
\newline 
}
\layout Standard

and it can be compiled and installed very easily: by simply placing 
\family typewriter 
ddt.comp
\family default 
 in 
\family typewriter 
src/hal/components
\family default 
 and running '
\family typewriter 
make
\family default 
', or by placing it anywhere on the system and running '
\family typewriter 
comp --install ddt.comp
\family default 
'
\layout Section

Syntax
\layout Standard

A 
\family typewriter 
.comp
\family default 
 file consists of a number of declarations, followed by 
\begin_inset Quotes eld
\end_inset 

;;
\begin_inset Quotes erd
\end_inset 

 on a line of its own, followed by C code implementing the module's realtime
 functions.
\layout Standard

Declarations include:
\layout LyX-Code

component NAME;
\newline 
pin NAME TYPE PINDIRECTION;
\newline 
param NAME TYPE PARAMDIRECTION;
\newline 
function NAME [fp | nofp];
\newline 
option NAME VALUE;
\layout Description

NAME A C identifier.
 When used to create a HAL identifier, any underscores are replaced with
 dashes, so that 
\begin_inset Quotes eld
\end_inset 

this_name
\begin_inset Quotes erd
\end_inset 

 will be turned into 
\begin_inset Quotes eld
\end_inset 

this-name
\begin_inset Quotes erd
\end_inset 

.
\layout Description

TYPE One of the HAL types: bit, s8, u8, s16, u16, s32, u32, or float.
\layout Description

PINDIRECTION One of the following: 
\begin_inset Quotes eld
\end_inset 

in
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

out
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

io
\begin_inset Quotes erd
\end_inset 

, corresponding to HAL_IN, HAL_OUT and HAL_IO.
 A component sets a value for a HAL_OUT pin, it reads a value from a HAL_IN
 pin, and it may read or set the value of a HAL_IO pin.
\layout Description

PARAMDIRECTION One of the following: 
\begin_inset Quotes eld
\end_inset 

r
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

rw
\begin_inset Quotes erd
\end_inset 

, corresponding to HAL_RO and HAL_RW.
 A component sets a value for a HAL_RO parameter, and it may read or set
 the value of a HAL_RW parameter.
\layout Description

fp Indicates that the function performs floating-point calculations.
\layout Description

nofp Indicates that it only performs integer calculations.
 If neither is specified, 
\begin_inset Quotes eld
\end_inset 

fp
\begin_inset Quotes erd
\end_inset 

 is assumed.
\layout Standard

The currently defined options are:
\layout Description

option\SpecialChar ~
singleton\SpecialChar ~
yes (default: no)
\newline 
Do not create a 'count' module parameter, and always create a single object.
 With 'singleton', items are named 'component-name.item-name' and without
 'singleton', items are named 'component-name.num.item-name', where 'num'
 goes from 0 to the module parameter 'count'.
\layout Description

option\SpecialChar ~
default_count (default: 1)
\newline 
Normally, the module parameter 'count' defaults to 1.
 If specified, the count will default to this value instead.
\layout Description

option\SpecialChar ~
count_function\SpecialChar ~
yes (default: no)
\newline 
Normally, the number of instances to create is specified in the module parameter
 'count'; if 'count_function' is specified, the value returned by the function
 'int get_count(void)' is used instead, and the 'count' module parameter
 is not defined.
\layout Description

option\SpecialChar ~
rtapi_app\SpecialChar ~
no (default: yes)
\newline 
Normally, the functions 'rtapi_app_main' and 'rtapi_app_exit' are automatically
 defined.
 With 'option rtapi_app no', they are not, and must be provided in the C
 code.
\newline 
When implementing your own 'rtapi_app_main', call the function 'int export(char
 *prefix, long extra_arg)' to register the pins, parameters, and functions
 for 'prefix'.
\layout Description

option\SpecialChar ~
data\SpecialChar ~

\emph on 
type
\emph default 
 (default: none)
\newline 
If specified, each instance of the component will have an associated data
 block of 
\emph on 
type
\emph default 
 (which can be a simple type like 'float' or the name of a type created
 with 'typedef').
\layout Description

option\SpecialChar ~
extra_setup\SpecialChar ~
yes (default: no)
\newline 
If specified, call the function 'int extra_setup(struct state *inst, long
 extra_arg)' for each instance.
 If using the automatically defined 'rtapi_app_main', 'extra_arg' is the
 number of this instance.
 Return a nonzero value to indicate failure.
\layout Description

option\SpecialChar ~
extra_cleanup\SpecialChar ~
yes (default: no)
\newline 
If specified, call the function 'void extra_cleanup(void)' from the automaticall
y defined 'rtapi_app_exit', or if an error is detected in the automatically
 defined 'rtapi_app_main'.
\layout Standard

The result of using any other option is undefined.
\layout Standard

C++-style one-line comments (
\begin_inset Quotes eld
\end_inset 

// ...
\begin_inset Quotes erd
\end_inset 

) and C-style multiline comments (
\begin_inset Quotes eld
\end_inset 

/* ...
 */
\begin_inset Quotes erd
\end_inset 

) are both supported in the declaration section.
\layout Section

Other restrictions on comp files
\layout Standard

Though HAL permits a pin, a parameter, and a function to have the same name,
 comp does not.
\layout Standard

There is no provision for setting the initial value of parameters or instance
 data.
\layout Section

Convenience Macros
\layout Standard

Once you have a number of pins, parameters and functions, comp will generate
 the 
\begin_inset Quotes eld
\end_inset 

C
\begin_inset Quotes erd
\end_inset 

 program using a preprocessor.
 During this process, a proper data structure will be generated, which will
 hold all pins and parameters.
 All the pins and parameters names you defined above will be part of a structure
, referenced by 'inst' (instance data).
 However, you don not need to adress them using formats like *(inst->name),
 but you can easily address them as 'name'.
 This is possible because in the generated 
\begin_inset Quotes eld
\end_inset 

C
\begin_inset Quotes erd
\end_inset 

 code, there are some convenience macros automatically generated.
\layout Description

#define\SpecialChar ~
FUNCTION(name)\SpecialChar ~
...
 One Macro definition per defined function.
 It properly defines the function 'name' including its return type and argument
 types and names.
 The argument 'inst' is a pointer to the instance data, and the argument
 'period' is the number of nanoseconds between calls to the function.
\layout Description

#define\SpecialChar ~
pi\SpecialChar ~
...
\layout Description

#define\SpecialChar ~
pa\SpecialChar ~
...
 Defined for each pin 'pi' or param 'pa' there is a macro which allows the
 name to be used on its own (no dots, points-at or stars required) to refer
 to the pin or parameter.
 These macros assume that 'inst' is a pointer to the instance data.
 
\begin_inset Foot
collapsed true

\layout Standard

Instead of having *(inst->pin_name) just use pin_name.
\end_inset 


\layout Description

#define\SpecialChar ~
data\SpecialChar ~
...
 If 'option data' is specified, this macro allows access to the instance
 data.
 This macro assumes that 'inst' is a pointer to the instance data.
\layout Standard

Any of these macros may be undefined with '#undef' if desired.
\layout Section

Compiling 
\begin_inset Quotes eld
\end_inset 

.comp
\begin_inset Quotes erd
\end_inset 

 files in the source tree
\layout Standard

Place the 
\begin_inset Quotes eld
\end_inset 

.comp
\begin_inset Quotes erd
\end_inset 

 file in the source directory emc2/src/hal/components and re-run 'make'.
 Comp files are automatically detected by the build system.
\layout Section

Compiling components outside the source tree
\layout Standard


\begin_inset Quotes eld
\end_inset 

comp
\begin_inset Quotes erd
\end_inset 

 can process, compile, and install a component in a single step, placing
 
\family typewriter 
example.ko
\family default 
 in the emc2 realtime module directory:
\layout LyX-Code

comp --install example.comp
\layout Standard

Or, it can process and compile in one step, leaving 
\family typewriter 
example.ko
\family default 
 in the current directory:
\layout LyX-Code

comp --compile example.comp
\layout Standard

Or it can simly process, leaving 
\family typewriter 
example.c
\family default 
 in the current directory:
\layout LyX-Code

comp example.comp
\layout Standard


\begin_inset Quotes eld
\end_inset 

comp
\begin_inset Quotes erd
\end_inset 

 can also compile and install a component written in 
\begin_inset Quotes eld
\end_inset 

C
\begin_inset Quotes erd
\end_inset 

, using the --install and --compile options shown above:
\layout LyX-Code

comp --install example2.c
\the_end
