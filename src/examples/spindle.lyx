#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Spindle Control
\begin_inset LatexCommand index
name "Spindle Control"

\end_inset


\begin_inset LatexCommand label
name "cha:Spindle-Control"

\end_inset


\end_layout

\begin_layout Section
0-10v Spindle Speed
\begin_inset LatexCommand index
name "0-10v Spindle Speed"

\end_inset


\end_layout

\begin_layout Standard
If your spindle is controlled by a VFD with a 0 to 10 volt signal and your
 using a DAC card like the m5i20 to output the control signal.
 
\end_layout

\begin_layout Standard
First you need to figure the scale of spindle speed to control signal.
 For this example the spindle top speed of 5000 RPM is equal to 10 volts.
 
\begin_inset Formula $10/5000=0.002$
\end_inset

 so our scale factor is 0.002
\end_layout

\begin_layout Standard
We have to add a scale component to the hal file to scale the motion.spindle-spee
d-out to the 0 to 10 needed by the VFD if your DAC card does not do scaling.
\end_layout

\begin_layout LyX-Code
loadrt scale count=1
\newline
addf scale.0 servo-thread
\newline
setp scale.0.gain 0.002
\newline
net spindle-spee
d-scale motion.spindle-speed-out => scale.0.in
\newline
net spindle-speed-DAC scale.0.out
 => <your DAC pin name>
\end_layout

\begin_layout Section
PWM Spindle Speed
\begin_inset LatexCommand index
name "PWM Spindle Speed"

\end_inset


\end_layout

\begin_layout Standard
If your spindle can be controlled by a PWM signal, use the pwmgen component
 to create the signal:
\end_layout

\begin_layout LyX-Code
loadrt pwmgen output_type=0 
\newline
addf pwmgen.update servo-thread
\newline
addf pwmgen.make-pulses
 base-thread
\newline
net spindle-speed-cmd motion.spindle-speed-out => pwmgen.0.value
\newline
net
 spindle-on motion.spindle-on => pwmgen.0.enable
\newline
net spindle-pwm pwmgen.0.pwm
 => parport.0.pin-09-out
\newline
# Set the spindle's top speed in RPM 
\newline
setp pwmgen.0.scale
 1800
\end_layout

\begin_layout Standard
This assumes that the spindle controller's response to PWM is simple: 0%
 PWM gives 0RPM, 10% PWM gives 180 RPM, etc.
 If there is a minimum PWM required to get the spindle to turn, follow the
 example in the nist-lathe sample configuration to use a scale component.
 
\end_layout

\begin_layout Section
Spindle Enable
\begin_inset LatexCommand index
name "Spindle Enable"

\end_inset


\end_layout

\begin_layout Standard
If you need a spindle enable signal link your output pin to motion.spindle-on.
 To link these pins to a parallel port pin put something like the following
 in your .hal file making sure you pick the pin that is connected to your
 control device.
\end_layout

\begin_layout LyX-Code
net spindle-enable motion.spindle-on => parport.0.pin-14-out
\end_layout

\begin_layout Section
Spindle Direction
\begin_inset LatexCommand index
name "Spindle Direction"

\end_inset


\end_layout

\begin_layout Standard
If you have direction control of your spindle the hal pins motion.spindle-forward
 and motion.spindle-reverse are controlled by M3 and M4.
 Spindle speed "Sn" must be set to a positive non zero value for M3/4 to
 turn on spindle motion.
 
\end_layout

\begin_layout Standard
To link these pins to a parallel port pin put something like the following
 in your .hal file making sure you pick the pin that is connected to your
 control device.
\end_layout

\begin_layout LyX-Code
net spindle-fwd motion.spindle-forward => parport.0.pin-16-out
\newline
net spindle-rev
 motion.spindle-reverse => parport.0.pin-17-out
\end_layout

\begin_layout Section
Spindle Soft Start
\end_layout

\begin_layout Standard
If you need to ramp your spindle speed command and your control does not
 have that feature it can be done in HAL.
 Basically you need to hijack the output of motion.spindle-speed-out and
 run it through a limit2 component with the scale set so it will ramp the
 rpm from motion.spindle-speed-out to your device that receives the rpm.
 The second part is to let EMC know when the spindle is at speed so motion
 can begin.
\end_layout

\begin_layout Standard
In the 0-10 volt example the line "net spindle-speed-scale motion.spindle-speed-o
ut => scale.0.in" is changed as shown in the following example.
\end_layout

\begin_layout LyX-Code
# load real time a limit2 and a near with names so it is easier to follow
\newline
loadrt
 limit2 names=spindle-ramp
\newline
loadrt near names=spindle-at-speed
\end_layout

\begin_layout LyX-Code
# add the functions to a thread
\newline
addf spindle-ramp servo-thread
\newline
addf spindle-at-spe
ed servo-thread
\end_layout

\begin_layout LyX-Code
# set the parameter for max velocity
\newline
setp spindle-ramp.maxv 60
\end_layout

\begin_layout LyX-Code
# hijack the spindle speed out and send it to spindle ramp in
\newline
net spindle-cmd
 <= motion.spindle-speed-out => spindle-ramp.in
\end_layout

\begin_layout LyX-Code
# the output of spindle ramp is sent to the scale in
\newline
net spindle-ramped <=
 spindle-ramp.out => scale.0.in
\end_layout

\begin_layout LyX-Code
# to know when to start the motion we send the near component 
\newline
# (named spindle-a
t-speed) to the spindle commanded speed from
\newline
# the signal spindle-cmd and
 the actual spindle speed
\newline
# provided your spindle can accelerate at the maxv
 setting.
\newline
net spindle-cmd => spindle-at-speed.in1
\newline
net spindle-ramped => spindle-at-s
peed.in2
\end_layout

\begin_layout LyX-Code
# the output from spindle-at-speed is sent to motion.spindle-at-speed
\newline
# and
 when this is true motion will start
\newline
net spindle-ready <= spindle-at-speed.out
 => motion.spindle-at-speed
\end_layout

\begin_layout Chapter
Spindle Feedback
\begin_inset LatexCommand index
name "Spindle Feedback"

\end_inset


\begin_inset LatexCommand label
name "cha:Spindle-Feedback"

\end_inset


\end_layout

\begin_layout Section
Spindle Synchronized Motion
\begin_inset LatexCommand index
name "Spindle Synchronized Motion"

\end_inset


\begin_inset LatexCommand label
name "sec:Spindle-Synchronized-Motion"

\end_inset


\end_layout

\begin_layout Standard
Spindle feedback is needed by EMC to perform any spindle coordinated motions
 like threading and constant surface speed.
 The StepConf Wizard can perform the connections for you if you select Encoder
 Phase A and Encoder Index as inputs.
\end_layout

\begin_layout Standard
Hardware assumptions:
\end_layout

\begin_layout Itemize
An encoder is connected to the spindle and puts out 100 pulses per revolution
 on phase A
\end_layout

\begin_layout Itemize
The encoder A phase is connected to the parallel port pin 10
\end_layout

\begin_layout Itemize
The encoder index pulse is connected to the parallel port pin 11
\end_layout

\begin_layout Standard
Basic Steps to add the components and configure them:
\end_layout

\begin_layout LyX-Code
loadrt encoder num_chan=1
\newline
addf encoder.update-counters base-thread
\newline
addf encoder.capt
ure-position servo-thread
\newline
setp encoder.0.position-scale 100 
\newline
net spindle-position
 encoder.0.position => motion.spindle-revs
\newline
net spindle-velocity encoder.0.velocity
 => motion.spindle-speed-in
\newline
net spindle-index-enable encoder.0.index-enable
 <=> motion.spindle-index-enable
\newline
net spindle-phase-a encoder.0.phase-A
\newline
net spindle-ph
ase-b encoder.0.phase-B
\newline
net spindle-index encoder.0.phase-Z
\newline
net spindle-phase-a
 <= parport.0.pin-10-in
\newline
net spindle-index <= parport.0.pin-11-in
\end_layout

\begin_layout Section
Spindle At Speed
\begin_inset LatexCommand index
name "Spindle At Speed"

\end_inset


\begin_inset LatexCommand label
name "sec:Spindle-At-Speed"

\end_inset


\end_layout

\begin_layout Standard
To enable EMC to wait for the spindle to be at speed before executing a
 series of moves you need to set motion.spindle-at-speed to true when the
 spindle is at the commanded speed.
 To do this you need spindle feedback from an encoder.
 Since the feedback and the commanded speed are not usually 
\series bold
exactly
\series default
 the same you need to use the "near" component to say that the two numbers
 are close enough.
 The connections needed are from the spindle velocity command signal to
 near.n.in1 and from the spindle velocity from the encoder to near.n.in2.
 Then the near.n.out is connected to motion.spindle-at-speed.
 The near.n.scale needs to be set to say how close the two numbers must be
 before turning on the output.
 Depending on your setup you may need to adjust the scale to work with your
 hardware.
 The following is typical of the additions needed to your hal file to enable
 Spindle At Speed.
 If you already have near in your hal file then increase the count and adjust
 code to suit.
 Check to make sure the signal names are the same in your hal file.
\end_layout

\begin_layout LyX-Code
loadrt near
\end_layout

\begin_layout LyX-Code
addf near.0 servo-thread
\end_layout

\begin_layout LyX-Code
net spindle-cmd near.0.in1
\end_layout

\begin_layout LyX-Code
net spindle-velocity near.0.in2
\end_layout

\begin_layout LyX-Code
net spindle-at-speed motion.spindle-at-speed <= near.0.out
\end_layout

\begin_layout LyX-Code
setp near.0.scale 1.01
\end_layout

\end_body
\end_document
