#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Spindle Control
\end_layout

\begin_layout Section
0-10v Spindle Speed
\end_layout

\begin_layout Standard
If your spindle is controlled by a VFD with a 0 to 10 volt signal and your
 using a DAC card like the m5i20 to output the control signal.
 
\end_layout

\begin_layout Standard
First you need to figure the scale of spindle speed to control signal.
 For this example the spindle top speed of 5000 RPM is equal to 10 volts.
 
\begin_inset Formula $10/5000=0.002$
\end_inset

 so our scale factor is 0.002
\end_layout

\begin_layout Standard
We have to add a scale component to the hal file to scale the motion.spindle-spee
d-out to the 0 to 10 needed by the VFD if your DAC card does not do scaling.
\end_layout

\begin_layout Quote
loadrt scale count=1
\newline
addf scale.0 servo-thread
\newline
setp scale.0.gain 0.002
\newline
net spindle-spee
d-scale motion.spindle-speed-out => scale.0.in
\newline
net spindle-speed-DAC scale.0.out
 => <your DAC pin name>
\end_layout

\begin_layout Section
PWM Spindle Speed
\end_layout

\begin_layout Standard
If your spindle can be controlled by a PWM signal, use the pwmgen component
 to create the signal:
\end_layout

\begin_layout Quote
loadrt pwmgen output_type=0 
\newline
addf pwmgen.update servo-thread
\newline
addf pwmgen.make-pulses
 base-thread
\newline
net spindle-speed-cmd motion.spindle-speed-out => pwmgen.0.value
\newline
net
 spindle-on motion.spindle-on => pwmgen.0.enable
\newline
net spindle-pwm pwmgen.0.pwm
 => parport.0.pin-09-out
\newline
setp pwmgen.0.scale 1800 # Change to your spindle's
 top speed in RPM 
\end_layout

\begin_layout Standard
This assumes that the spindle controller's response to PWM is simple: 0%
 PWM gives 0RPM, 10% PWM gives 180 RPM, etc.
 If there is a minimum PWM required to get the spindle to turn, follow the
 example in the nist-lathe sample configuration to use a scale component.
 
\end_layout

\begin_layout Section
Spindle Enable
\end_layout

\begin_layout Standard
If you need a spindle enable signal link your output pin to motion.spindle-on.
 To link these pins to a parallel port pin put something like the following
 in your .hal file making sure you pick the pin that is connected to your
 control device.
\end_layout

\begin_layout Quote
net spindle-enable motion.spindle-on => parport.0.pin-14-out
\end_layout

\begin_layout Section
Spindle Direction
\end_layout

\begin_layout Standard
If you have direction control of your spindle the hal pins motion.spindle-forward
 and motion.spindle-reverse are controlled by M3 and M4.
 S must be set to a positive non zero value for M3/4 to turn on spindle
 motion.
 
\end_layout

\begin_layout Standard
To link these pins to a parallel port pin put something like the following
 in your .hal file making sure you pick the pin that is connected to your
 control device.
\end_layout

\begin_layout Quote
net spindle-fwd motion.spindle-forward -> parport.0.pin-16-out
\newline
net spindle-rev
 motion.spindle-reverse => parport.0.pin-17-out
\end_layout

\begin_layout Chapter
Spindle Feedback
\end_layout

\begin_layout Standard
Spindle feedback is needed by EMC to perform any spindle coordinated motions
 like threading and constant surface speed.
 The StepConf Wizard can perform the connections for you if you select Encoder
 Phase A and Encoder Index as inputs.
\end_layout

\begin_layout Standard
Hardware assumptions:
\end_layout

\begin_layout Itemize
An encoder is connected to the spindle and puts out 100 pulses per revolution
 on phase A
\end_layout

\begin_layout Itemize
The encoder A phase is connected to the parallel port pin 10
\end_layout

\begin_layout Itemize
The encoder index pulse is connected to the parallel port pin 11
\end_layout

\begin_layout Standard
Basic Steps to add the components and configure them:
\end_layout

\begin_layout LyX-Code
loadrt encoder num_chan=1
\newline
addf encoder.update-counters base-thread
\newline
addf encoder.capt
ure-position servo-thread
\newline
setp encoder.0.position-scale 100 
\newline
net spindle-position
 encoder.0.position => motion.spindle-revs
\newline
net spindle-velocity encoder.0.velocity
 => motion.spindle-speed-in
\newline
net spindle-index-enable encoder.0.index-enable
 <=> motion.spindle-index-enable
\newline
net spindle-phase-a encoder.0.phase-A
\newline
net spindle-ph
ase-b encoder.0.phase-B
\newline
net spindle-index encoder.0.phase-Z
\newline
net spindle-phase-a
 <= parport.0.pin-10-in
\newline
net spindle-index <= parport.0.pin-11-in
\end_layout

\end_body
\end_document
