#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Hardware
\end_layout

\begin_layout Section
Latency Test
\end_layout

\begin_layout Standard
Latency is how long it takes the PC to stop what it is doing and respond
 to an external request.
 For EMC2 the request is BASE_THREAD that makes the periodic "heartbeat"
 that serves as a timing reference for the step pulses.
 The lower the latency, the faster you can run the heartbeat, and the faster
 and smoother the step pulses will be.
\end_layout

\begin_layout Standard
Latency is far more important than CPU speed.
 A lowly Pentium II that responds to interrupts within 10 microseconds each
 and every time can give better results than the latest and fastest P4 Hyperthre
ading beast.
\end_layout

\begin_layout Standard
The CPU isn't the only factor in determining latency.
 Motherboards, video cards, USB ports, and a number of other things can
 hurt the latency.
 The best way to find out what you are dealing with is to run the RTAI latency
 test.
 
\end_layout

\begin_layout Standard
Generating step pulses in software has one very big advantage - it's free.
 Just about every PC has a parallel port that is capable of outputting step
 pulses that are generated by the software.
 However, software step pulses also have some disadvantages:
\end_layout

\begin_layout Itemize
limited maximum step rate 
\end_layout

\begin_layout Itemize
jitter in the generated pulses
\end_layout

\begin_layout Itemize
loads the CPU
\end_layout

\begin_layout Standard
The best way to find out what you are dealing with is to run the HAL latency
 test.
 To run the test, open a terminal window from Applications/Accessories/Terminal
 (Ubuntu) and run the following command: 
\end_layout

\begin_layout Quote
latency-test 
\end_layout

\begin_layout Standard
You should see something like this:
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/latency.png
	scale 70

\end_inset


\end_layout

\begin_layout Standard
While the test is running, you should "abuse" the computer.
 Move windows around on the screen.
 Surf the web.
 Copy some large files around on the disk.
 Play some music.
 Run an OpenGL program such as glxgears.
 The idea is to put the PC through its paces while the latency test checks
 to see what the worst case numbers are.
 
\end_layout

\begin_layout Standard
NOTE: Do not run EMC2 or Stepconf while the latency test is running.
\end_layout

\begin_layout Standard
The important numbers are the "max jitter".
 In the example above, that is 7555 nanoseconds, or 7.5 microseconds.
 Record this number, and enter it in Stepconf when it is requested.
\end_layout

\begin_layout Standard
In the example above, latency-test only ran for a few seconds.
 You should run the test for at least several minutes; sometimes the worst
 case latency doesn't happen very often, or only happens when you do some
 particular action.
 For instance, one Intel motherboard worked pretty well most of the time,
 but every 64 seconds it had a very bad 300uS latency.
 Fortunately that was fixable see 
\begin_inset LatexCommand htmlurl
target "http://wiki.linuxcnc.org/cgi-bin/emcinfo.pl?FixingSMIIssues"

\end_inset


\end_layout

\begin_layout Standard
So, what do the results mean? If your Max Jitter number is less than about
 15-20 microseconds (15000-20000 nanoseconds), the computer should give
 very nice results with software stepping.
 If the max latency is more like 30-50 microseconds, you can still get good
 results, but your maximum step rate might be a little disappointing, especially
 if you use microstepping or have very fine pitch leadscrews.
 If the numbers are 100uS or more (100,000 nanoseconds), then the PC is
 not a good candidate for software stepping.
 Numbers over 1 millisecond (1,000,000 nanoseconds) mean the PC is not a
 good candidate for EMC, regardless of whether you use software stepping
 or not.
\end_layout

\begin_layout Standard
Note that if you get high numbers, there may be ways to improve them.
 Another PC had very bad latency (several milliseconds) when using the onboard
 video.
 But a $5 used video card solved the problem - EMC does not require bleeding
 edge hardware.
\end_layout

\begin_layout Standard
For more information on stepper tuning see the Stepper Tuning chapter (
\begin_inset LatexCommand ref
reference "cha:Stepper-Tuning"

\end_inset

).
\end_layout

\begin_layout Section
Port Address
\end_layout

\begin_layout Standard
For those who build their own hardware, one safeguard against shorting out
 an on-board parallel port - or even the whole motherboard - is to use an
 add-on parallel port card.
 Even if you don't need the extra layer of safety, a parport card is a good
 way to add extra I/O lines with EMC.
\end_layout

\begin_layout Standard
One good PCI parport card is made with the Netmos 9815 chipset.
 It has good +5V signals, and can come in a single or dual ports.
 
\end_layout

\begin_layout Standard
To find the I/O addresses for these cards open a terminal window and use
 the list pci command:
\end_layout

\begin_layout Quote
lspci -v
\end_layout

\begin_layout Standard
Look for the entry with "NetMos" in it.
 Example of a 2-port card:
\end_layout

\begin_layout Standard
0000:01:0a.0 Communication controller: Netmos Technology PCI 9815 Multi-I/O
 Controller (rev 01)
\end_layout

\begin_layout Quote
Subsystem: LSI Losgic / Symbios Logic 2POS (2 port parallel adapter) 
\end_layout

\begin_layout Quote
Flags: medium devsel, IRQ 5
\newline
I/O ports at b800 [size=8]
\newline
I/O ports at bc00 [size=8]
 
\newline
I/O ports at c000 [size=8] 
\newline
I/O ports at c400 [size=8] 
\newline
I/O ports at c800
 [size=8] 
\newline
I/O ports at cc00 [size=16]
\end_layout

\begin_layout Standard
From experimentation, I've found the first port (the on-card port) uses
 the third address listed (c000), and the second port (the one that attaches
 with a ribbon cable) uses the first address listed (b800).
\end_layout

\begin_layout Standard
You can then open an editor and put the addresses into the appropriate place
 in your .hal file.
\end_layout

\begin_layout Quote
loadrt hal_parport cfg="0x378 0xc000"
\end_layout

\begin_layout Standard
You must also direct EMC to run the "read" and "write" functions for the
 second card.
 For example,
\end_layout

\begin_layout Quotation
addf parport.1.read base-thread 1 
\end_layout

\begin_layout Quotation
addf parport.1.write base-thread -1
\end_layout

\begin_layout Standard
Please note that your values will differ.
 The Netmos cards are Plug-N-Play, and might change their settings depending
 on which slot you put them into, so if you like to 'get under the hood'
 and re-arrange things, be sure to check these values before you start EMC.
 
\end_layout

\end_body
\end_document
