#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

Hardware
\layout Section

Latency Test
\layout Standard

Latency is how long it takes the PC to stop what it is doing and respond
 to an external request.
 For EMC2 the request is BASE_THREAD that makes the periodic "heartbeat"
 that serves as a timing reference for the step pulses.
 The lower the latency, the faster you can run the heartbeat, and the faster
 and smoother the step pulses will be.
\layout Standard

Latency is far more important than CPU speed.
 A lowly Pentium II that responds to interrupts within 10 microseconds each
 and every time can give better results than the latest and fastest P4 Hyperthre
ading beast.
\layout Standard

The CPU isn't the only factor in determining latency.
 Motherboards, video cards, USB ports, and a number of other things can
 hurt the latency.
 The best way to find out what you are dealing with is to run the RTAI latency
 test.
 
\layout Standard

Generating step pulses in software has one very big advantage - it's free.
 Just about every PC has a parallel port that is capable of outputting step
 pulses that are generated by the software.
 However, software step pulses also have some disadvantages:
\layout Itemize

limited maximum step rate 
\layout Itemize

jitter in the generated pulses
\layout Itemize

loads the CPU
\layout Standard

The best way to find out what you are dealing with is to run the HAL latency
 test.
 To run the test, open a terminal window from Applications/Accessories/Terminal
 (Ubuntu) and run the following command: 
\layout Quote

latency-test 
\layout Standard

You should see something like this:
\layout Standard
\align center 

\begin_inset Graphics
	filename images/latency.png

\end_inset 


\layout Standard

While the test is running, you should "abuse" the computer.
 Move windows around on the screen.
 Surf the web.
 Copy some large files around on the disk.
 Play some music.
 Run an OpenGL program such as glxgears.
 The idea is to put the PC through its paces while the latency test checks
 to see what the worst case numbers are.
 
\layout Standard

NOTE: Do not run EMC2 or Stepconf while the latency test is running.
\layout Standard

The important numbers are the "max jitter".
 In the example above, that is 17894 nanoseconds, or 17.9 microseconds.
 Record this number, and enter it in Stepconf when it is requested.
\layout Standard

In the example above, latency-test only ran for a few seconds.
 You should run the test for at least several minutes; sometimes the worst
 case latency doesn't happen very often, or only happens when you do some
 particular action.
 For instance, one Intel motherboard worked pretty well most of the time,
 but every 64 seconds it had a very bad 300uS latency.
 Fortunately that was fixable see ([http://wiki.linuxcnc.org/cgi-bin/emcinfo.pl?Fix
ingSMIIssues||"Fixing SMI Issues"])
\layout Standard

So, what do the results mean? If your Max Jitter number is less than about
 15-20 microseconds (15000-20000 nanoseconds), the computer should give
 very nice results with software stepping.
 If the max latency is more like 30-50 microseconds, you can still get good
 results, but your maximum step rate might be a little disappointing, especially
 if you use microstepping or have very fine pitch leadscrews.
 If the numbers are 100uS or more (100,000 nanoseconds), then the PC is
 not a good candidate for software stepping.
 Numbers over 1 millisecond (1,000,000 nanoseconds) mean the PC is not a
 good candidate for EMC, regardless of whether you use software stepping
 or not.
\layout Standard

Note that if you get high numbers, there may be ways to improve them.
 Another PC had very bad latency (several milliseconds) when using the onboard
 video.
 But a $5 used Matrox video card solved the problem - EMC does not require
 bleeding edge hardware.
\layout Section

Base Period
\layout Standard

BASE_PERIOD is the "heartbeat" of your EMC computer.
 Every period, the software step generator decides if it is time for another
 step pulse.
 A shorter period will allow you to generate more pulses per second, within
 limits.
 But if you go too short, your computer will spend so much time generating
 step pulses that everything else will slow to a crawl, or maybe even lock
 up.
 Latency and stepper drive requirements affect the shortest period you can
 use.
\layout Standard

The really nasty part about this problem is that it can be very very rare.
 Worst case latencies might only happen a few times a minute, and the odds
 of bad latency happening just as the motor is changing direction are low.
 So you get very rare errors that ruin a part every once in a while and
 are impossible to troubleshoot.
\layout Standard

The simplest way to avoid this problem is to choose a BASE_PERIOD that is
 the sum of the longest timing requirement of your drive, and the worst
 case latency of your computer.
 This is not always the best choice for example if you are running a drive
 with a 20uS hold time requirement, and your latency test said you have
 a maximum latency of 11uS, then if you set the BASE_PERIOD to 20+11 = 31uS
 and a not-so-nice 16,129 steps per second.
 
\layout Standard

The problem is with the 20uS hold time requirement.
 That plus the 11uS latency is what forces us to use a slow 31uS period.
 But the EMC2 software step generator has some parameters that let you increase
 the various time from one period to several.
 For example, if steplen is changed from 1 to 2, then it there will be two
 periods between the beginning and end of the step pulse.
 Likewise, if dirhold is changed from 1 to 3, there will be at least three
 periods between the step pulse and a change of the direction pin.
\layout Standard

If we can use dirhold to meet the 20uS hold time requirement, then the next
 longest time is the 4.5uS high time.
 Add the 11uS latency to the 4.5uS high time, and you get a minimum period
 of 15.5uS.
 When you try 15.5uS, you find that the computer is sluggish, so you settle
 on 16uS.
 If we leave dirhold at 1 (the default), then the minimum time between step
 and direction is the 16uS period minus the 11uS latency = 5uS, which is
 not enough.
 We need another 15uS.
 Since the period is 16uS, we need one more period.
 So we change dirhold from 1 to 2.
 Now the minimum time from the end of the step pulse to the changing direction
 pin is 5+16=21uS, and we don't have to worry about the drive stepping the
 wrong direction because of latency.
 
\layout Standard

For more information on stepgen see Section (
\begin_inset LatexCommand \ref{sec:Stepgen}

\end_inset 

).
\the_end
